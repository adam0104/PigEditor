/*
* generated by Xtext
*/
parser grammar InternalPigParser;

options {
	tokenVocab=InternalPigLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.apache.pigeditor.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.apache.pigeditor.services.PigGrammarAccess;

}

@members {


	private PigGrammarAccess grammarAccess;
	 	
	public InternalPigParser(TokenStream input, PigGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Query";	
	} 
	   	   	
	@Override
	protected PigGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	 iv_ruleQuery=ruleQuery 
	 { $current=$iv_ruleQuery.current; } 
	 EOF 
;

// Rule Query
ruleQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryAccess().getElementsStatementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDefineStatementParserRuleCall_0_0_0()); 
    }
    this_DefineStatement_0=ruleDefineStatement
    {
        $current = $this_DefineStatement_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLoadStatementParserRuleCall_0_0_1()); 
    }
    this_LoadStatement_1=ruleLoadStatement
    {
        $current = $this_LoadStatement_1.current;
        afterParserOrEnumRuleCall();
    }

    |((
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForeachStatementParserRuleCall_0_0_2_0_0()); 
    }
    this_ForeachStatement_2=ruleForeachStatement
    {
        $current = $this_ForeachStatement_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getFilterStatementParserRuleCall_0_0_2_0_1()); 
    }
    this_FilterStatement_3=ruleFilterStatement
    {
        $current = $this_FilterStatement_3.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getGroupByStatementParserRuleCall_0_0_2_0_2()); 
    }
    this_GroupByStatement_4=ruleGroupByStatement
    {
        $current = $this_GroupByStatement_4.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getOrderStatementParserRuleCall_0_0_2_0_3()); 
    }
    this_OrderStatement_5=ruleOrderStatement
    {
        $current = $this_OrderStatement_5.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLimitStatementParserRuleCall_0_0_2_0_4()); 
    }
    this_LimitStatement_6=ruleLimitStatement
    {
        $current = $this_LimitStatement_6.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDistinctStatementParserRuleCall_0_0_2_0_5()); 
    }
    this_DistinctStatement_7=ruleDistinctStatement
    {
        $current = $this_DistinctStatement_7.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCrossStatementParserRuleCall_0_0_2_0_6()); 
    }
    this_CrossStatement_8=ruleCrossStatement
    {
        $current = $this_CrossStatement_8.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getJoinStatementParserRuleCall_0_0_2_0_7()); 
    }
    this_JoinStatement_9=ruleJoinStatement
    {
        $current = $this_JoinStatement_9.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCoGroupByStatementParserRuleCall_0_0_2_0_8()); 
    }
    this_CoGroupByStatement_10=ruleCoGroupByStatement
    {
        $current = $this_CoGroupByStatement_10.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStreamStatementParserRuleCall_0_0_2_0_9()); 
    }
    this_StreamStatement_11=ruleStreamStatement
    {
        $current = $this_StreamStatement_11.current;
        afterParserOrEnumRuleCall();
    }
)(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getParallelClauseParserRuleCall_0_0_2_1()); 
    }
ruleParallelClause
    {
        afterParserOrEnumRuleCall();
    }
)?)
    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getMrStatementParserRuleCall_0_0_3()); 
    }
    this_MrStatement_13=ruleMrStatement
    {
        $current = $this_MrStatement_13.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSplitStatementParserRuleCall_0_0_4()); 
    }
    this_SplitStatement_14=ruleSplitStatement
    {
        $current = $this_SplitStatement_14.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getUnionStatementParserRuleCall_0_0_5()); 
    }
    this_UnionStatement_15=ruleUnionStatement
    {
        $current = $this_UnionStatement_15.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSampleStatementParserRuleCall_0_0_6()); 
    }
    this_SampleStatement_16=ruleSampleStatement
    {
        $current = $this_SampleStatement_16.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStoreStatementParserRuleCall_0_0_7()); 
    }
    this_StoreStatement_17=ruleStoreStatement
    {
        $current = $this_StoreStatement_17.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDumpStatementParserRuleCall_0_0_8()); 
    }
    this_DumpStatement_18=ruleDumpStatement
    {
        $current = $this_DumpStatement_18.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDescribeStatementParserRuleCall_0_0_9()); 
    }
    this_DescribeStatement_19=ruleDescribeStatement
    {
        $current = $this_DescribeStatement_19.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExplainStatementParserRuleCall_0_0_10()); 
    }
    this_ExplainStatement_20=ruleExplainStatement
    {
        $current = $this_ExplainStatement_20.current;
        afterParserOrEnumRuleCall();
    }
)
	otherlv_21=KEYWORD_13
    {
    	newLeafNode(otherlv_21, grammarAccess.getStatementAccess().getSemicolonKeyword_0_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCommentStatementParserRuleCall_1()); 
    }
ruleCommentStatement
    {
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDefineStatement
entryRuleDefineStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDefineStatementRule()); }
	 iv_ruleDefineStatement=ruleDefineStatement 
	 { $current=$iv_ruleDefineStatement.current; } 
	 EOF 
;

// Rule DefineStatement
ruleDefineStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDefineStatementAccess().getRegisterClauseParserRuleCall_0()); 
    }
ruleRegisterClause
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefineStatementAccess().getDefineClauseParserRuleCall_1()); 
    }
    this_DefineClause_1=ruleDefineClause
    {
        $current = $this_DefineClause_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefineStatementAccess().getDefaultClauseParserRuleCall_2()); 
    }
    this_DefaultClause_2=ruleDefaultClause
    {
        $current = $this_DefaultClause_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDefineStatementAccess().getDeclareClauseParserRuleCall_3()); 
    }
    this_DeclareClause_3=ruleDeclareClause
    {
        $current = $this_DeclareClause_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLoadStatement
entryRuleLoadStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLoadStatementRule()); }
	 iv_ruleLoadStatement=ruleLoadStatement 
	 { $current=$iv_ruleLoadStatement.current; } 
	 EOF 
;

// Rule LoadStatement
ruleLoadStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLoadStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getLoadStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_54
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoadStatementAccess().getLOADKeyword_2());
    }
this_STRING_3=RULE_STRING
    { 
    newLeafNode(this_STRING_3, grammarAccess.getLoadStatementAccess().getSTRINGTerminalRuleCall_3()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getLoadStatementAccess().getLoadUsingParserRuleCall_4()); 
    }
ruleLoadUsing
    {
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getLoadStatementAccess().getAsClauseParserRuleCall_5()); 
    }
ruleAsClause
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleForeachStatement
entryRuleForeachStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getForeachStatementRule()); }
	 iv_ruleForeachStatement=ruleForeachStatement 
	 { $current=$iv_ruleForeachStatement.current; } 
	 EOF 
;

// Rule ForeachStatement
ruleForeachStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForeachStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getForeachStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_78
    {
    	newLeafNode(otherlv_2, grammarAccess.getForeachStatementAccess().getFOREACHKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachStatementAccess().getTypeAliasTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getForeachStatementAccess().getItemsNested_blkParserRuleCall_4_0_0_0()); 
	    }
		lv_items_4_0=rulenested_blk		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachStatementRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"nested_blk");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=KEYWORD_13
    {
    	newLeafNode(otherlv_5, grammarAccess.getForeachStatementAccess().getSemicolonKeyword_4_0_1());
    }
)?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachStatementAccess().getItemsGenerate_clauseParserRuleCall_4_1_0()); 
	    }
		lv_items_6_0=rulegenerate_clause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachStatementRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_6_0, 
        		"generate_clause");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFilterStatement
entryRuleFilterStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFilterStatementRule()); }
	 iv_ruleFilterStatement=ruleFilterStatement 
	 { $current=$iv_ruleFilterStatement.current; } 
	 EOF 
;

// Rule FilterStatement
ruleFilterStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFilterStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getFilterStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_73
    {
    	newLeafNode(otherlv_2, grammarAccess.getFilterStatementAccess().getFILTERKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterStatementAccess().getTypeAliasTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_29
    {
    	newLeafNode(otherlv_4, grammarAccess.getFilterStatementAccess().getBYKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFilterStatementAccess().getCondConditionParserRuleCall_5_0()); 
	    }
		lv_cond_5_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFilterStatementRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_5_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGroupByStatement
entryRuleGroupByStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupByStatementRule()); }
	 iv_ruleGroupByStatement=ruleGroupByStatement 
	 { $current=$iv_ruleGroupByStatement.current; } 
	 EOF 
;

// Rule GroupByStatement
ruleGroupByStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGroupByStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupByStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroupByStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_59
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupByStatementAccess().getGROUPKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupByStatementAccess().getTypeAliasTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupByStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupByStatementAccess().getItemsGroup_item_listParserRuleCall_4_0()); 
	    }
		lv_items_4_0=rulegroup_item_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupByStatementRule());
	        }
       		set(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"group_item_list");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=KEYWORD_70
    {
    	newLeafNode(otherlv_5, grammarAccess.getGroupByStatementAccess().getUSINGKeyword_5_0());
    }

    { 
        newCompositeNode(grammarAccess.getGroupByStatementAccess().getGroup_typeParserRuleCall_5_1()); 
    }
rulegroup_type
    {
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getGroupByStatementAccess().getPartition_clauseParserRuleCall_6()); 
    }
rulepartition_clause
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleCoGroupByStatement
entryRuleCoGroupByStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCoGroupByStatementRule()); }
	 iv_ruleCoGroupByStatement=ruleCoGroupByStatement 
	 { $current=$iv_ruleCoGroupByStatement.current; } 
	 EOF 
;

// Rule CoGroupByStatement
ruleCoGroupByStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCoGroupByStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoGroupByStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getCoGroupByStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_76
    {
    	newLeafNode(otherlv_2, grammarAccess.getCoGroupByStatementAccess().getCOGROUPKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCoGroupByStatementAccess().getAliasesJoin_sub_clauseParserRuleCall_3_0()); 
	    }
		lv_aliases_3_0=rulejoin_sub_clause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoGroupByStatementRule());
	        }
       		set(
       			$current, 
       			"aliases",
        		lv_aliases_3_0, 
        		"join_sub_clause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_70
    {
    	newLeafNode(otherlv_4, grammarAccess.getCoGroupByStatementAccess().getUSINGKeyword_4_0());
    }
this_COGROUP_TYPE_5=RULE_COGROUP_TYPE
    { 
    newLeafNode(this_COGROUP_TYPE_5, grammarAccess.getCoGroupByStatementAccess().getCOGROUP_TYPETerminalRuleCall_4_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getCoGroupByStatementAccess().getPartition_clauseParserRuleCall_5()); 
    }
rulepartition_clause
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleOrderStatement
entryRuleOrderStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrderStatementRule()); }
	 iv_ruleOrderStatement=ruleOrderStatement 
	 { $current=$iv_ruleOrderStatement.current; } 
	 EOF 
;

// Rule OrderStatement
ruleOrderStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOrderStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrderStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getOrderStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_63
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrderStatementAccess().getORDERKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrderStatementAccess().getTypeAliasTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrderStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_29
    {
    	newLeafNode(otherlv_4, grammarAccess.getOrderStatementAccess().getBYKeyword_4());
    }

    { 
        newCompositeNode(grammarAccess.getOrderStatementAccess().getOrder_by_clauseParserRuleCall_5()); 
    }
ruleorder_by_clause
    {
        afterParserOrEnumRuleCall();
    }
(
	otherlv_6=KEYWORD_70
    {
    	newLeafNode(otherlv_6, grammarAccess.getOrderStatementAccess().getUSINGKeyword_6_0());
    }

    { 
        newCompositeNode(grammarAccess.getOrderStatementAccess().getFuncClauseParserRuleCall_6_1()); 
    }
ruleFuncClause
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleCrossStatement
entryRuleCrossStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCrossStatementRule()); }
	 iv_ruleCrossStatement=ruleCrossStatement 
	 { $current=$iv_ruleCrossStatement.current; } 
	 EOF 
;

// Rule CrossStatement
ruleCrossStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCrossStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCrossStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getCrossStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_57
    {
    	newLeafNode(otherlv_2, grammarAccess.getCrossStatementAccess().getCROSSKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCrossStatementAccess().getAliasesRel_listParserRuleCall_3_0()); 
	    }
		lv_aliases_3_0=rulerel_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCrossStatementRule());
	        }
       		set(
       			$current, 
       			"aliases",
        		lv_aliases_3_0, 
        		"rel_list");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getCrossStatementAccess().getPartition_clauseParserRuleCall_4()); 
    }
rulepartition_clause
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleUnionStatement
entryRuleUnionStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnionStatementRule()); }
	 iv_ruleUnionStatement=ruleUnionStatement 
	 { $current=$iv_ruleUnionStatement.current; } 
	 EOF 
;

// Rule UnionStatement
ruleUnionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnionStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnionStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_69
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnionStatementAccess().getUNIONKeyword_2());
    }

	otherlv_3=KEYWORD_35
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnionStatementAccess().getONKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionStatementAccess().getAliasesRel_listParserRuleCall_4_0()); 
	    }
		lv_aliases_4_0=rulerel_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionStatementRule());
	        }
       		set(
       			$current, 
       			"aliases",
        		lv_aliases_4_0, 
        		"rel_list");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJoinStatement
entryRuleJoinStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJoinStatementRule()); }
	 iv_ruleJoinStatement=ruleJoinStatement 
	 { $current=$iv_ruleJoinStatement.current; } 
	 EOF 
;

// Rule JoinStatement
ruleJoinStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJoinStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getJoinStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_52
    {
    	newLeafNode(otherlv_2, grammarAccess.getJoinStatementAccess().getJOINKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoinStatementAccess().getAliasesJoin_sub_clauseParserRuleCall_3_0()); 
	    }
		lv_aliases_3_0=rulejoin_sub_clause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoinStatementRule());
	        }
       		set(
       			$current, 
       			"aliases",
        		lv_aliases_3_0, 
        		"join_sub_clause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=KEYWORD_70
    {
    	newLeafNode(otherlv_4, grammarAccess.getJoinStatementAccess().getUSINGKeyword_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getJoinStatementAccess().getJoin_typeParserRuleCall_4_1()); 
    }
rulejoin_type
    {
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getJoinStatementAccess().getPartition_clauseParserRuleCall_5()); 
    }
rulepartition_clause
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleLimitStatement
entryRuleLimitStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLimitStatementRule()); }
	 iv_ruleLimitStatement=ruleLimitStatement 
	 { $current=$iv_ruleLimitStatement.current; } 
	 EOF 
;

// Rule LimitStatement
ruleLimitStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLimitStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getLimitStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_61
    {
    	newLeafNode(otherlv_2, grammarAccess.getLimitStatementAccess().getLIMITKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLimitStatementAccess().getTypeAliasTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getLimitStatementAccess().getScalarIntParserRuleCall_4()); 
    }
rulescalarInt
    {
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSampleStatement
entryRuleSampleStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSampleStatementRule()); }
	 iv_ruleSampleStatement=ruleSampleStatement 
	 { $current=$iv_ruleSampleStatement.current; } 
	 EOF 
;

// Rule SampleStatement
ruleSampleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSampleStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSampleStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getSampleStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_74
    {
    	newLeafNode(otherlv_2, grammarAccess.getSampleStatementAccess().getSAMPLEKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSampleStatementAccess().getTypeAliasTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSampleStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)this_DOUBLENUMBER_4=RULE_DOUBLENUMBER
    { 
    newLeafNode(this_DOUBLENUMBER_4, grammarAccess.getSampleStatementAccess().getDOUBLENUMBERTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleDistinctStatement
entryRuleDistinctStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDistinctStatementRule()); }
	 iv_ruleDistinctStatement=ruleDistinctStatement 
	 { $current=$iv_ruleDistinctStatement.current; } 
	 EOF 
;

// Rule DistinctStatement
ruleDistinctStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDistinctStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDistinctStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getDistinctStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_84
    {
    	newLeafNode(otherlv_2, grammarAccess.getDistinctStatementAccess().getDISTINCTKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDistinctStatementAccess().getTypeAliasTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDistinctStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getDistinctStatementAccess().getPartition_clauseParserRuleCall_4()); 
    }
rulepartition_clause
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleStreamStatement
entryRuleStreamStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStreamStatementRule()); }
	 iv_ruleStreamStatement=ruleStreamStatement 
	 { $current=$iv_ruleStreamStatement.current; } 
	 EOF 
;

// Rule StreamStatement
ruleStreamStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStreamStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStreamStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getStreamStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_75
    {
    	newLeafNode(otherlv_2, grammarAccess.getStreamStatementAccess().getSTREAMKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStreamStatementAccess().getTypeAliasTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStreamStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_80
    {
    	newLeafNode(otherlv_4, grammarAccess.getStreamStatementAccess().getTHROUGHKeyword_4());
    }
(this_EXECCOMMAND_5=RULE_EXECCOMMAND
    { 
    newLeafNode(this_EXECCOMMAND_5, grammarAccess.getStreamStatementAccess().getEXECCOMMANDTerminalRuleCall_5_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getStreamStatementAccess().getIDENTIFIERParserRuleCall_5_1()); 
    }
ruleIDENTIFIER
    {
        afterParserOrEnumRuleCall();
    }
)(
    { 
        newCompositeNode(grammarAccess.getStreamStatementAccess().getAsClauseParserRuleCall_6()); 
    }
ruleAsClause
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleMrStatement
entryRuleMrStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMrStatementRule()); }
	 iv_ruleMrStatement=ruleMrStatement 
	 { $current=$iv_ruleMrStatement.current; } 
	 EOF 
;

// Rule MrStatement
ruleMrStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMrStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMrStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getMrStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_90
    {
    	newLeafNode(otherlv_2, grammarAccess.getMrStatementAccess().getMAPREDUCEKeyword_2());
    }
this_STRING_3=RULE_STRING
    { 
    newLeafNode(this_STRING_3, grammarAccess.getMrStatementAccess().getSTRINGTerminalRuleCall_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getMrStatementAccess().getStoreStatementParserRuleCall_4()); 
    }
    this_StoreStatement_4=ruleStoreStatement
    {
        $current = $this_StoreStatement_4.current;
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMrStatementAccess().getLoadLoadStatementParserRuleCall_5_0()); 
	    }
		lv_load_5_0=ruleLoadStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMrStatementRule());
	        }
       		set(
       			$current, 
       			"load",
        		lv_load_5_0, 
        		"LoadStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_EXECCOMMAND_6=RULE_EXECCOMMAND
    { 
    newLeafNode(this_EXECCOMMAND_6, grammarAccess.getMrStatementAccess().getEXECCOMMANDTerminalRuleCall_6()); 
    }
)?)
;





// Entry rule entryRuleSplitStatement
entryRuleSplitStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSplitStatementRule()); }
	 iv_ruleSplitStatement=ruleSplitStatement 
	 { $current=$iv_ruleSplitStatement.current; } 
	 EOF 
;

// Rule SplitStatement
ruleSplitStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSplitStatementAccess().getNameAliasParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplitStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getSplitStatementAccess().getEqualsSignKeyword_1());
    }

	otherlv_2=KEYWORD_66
    {
    	newLeafNode(otherlv_2, grammarAccess.getSplitStatementAccess().getSPLITKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSplitStatementAccess().getTypeAliasTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplitStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_51
    {
    	newLeafNode(otherlv_4, grammarAccess.getSplitStatementAccess().getINTOKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSplitStatementAccess().getBranchesSplit_branchParserRuleCall_5_0()); 
	    }
		lv_branches_5_0=rulesplit_branch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplitStatementRule());
	        }
       		add(
       			$current, 
       			"branches",
        		lv_branches_5_0, 
        		"split_branch");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_6=KEYWORD_8
    {
    	newLeafNode(otherlv_6, grammarAccess.getSplitStatementAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSplitStatementAccess().getBranchesSplit_branchParserRuleCall_6_1_0()); 
	    }
		lv_branches_7_0=rulesplit_branch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSplitStatementRule());
	        }
       		add(
       			$current, 
       			"branches",
        		lv_branches_7_0, 
        		"split_branch");
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRuleStoreStatement
entryRuleStoreStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStoreStatementRule()); }
	 iv_ruleStoreStatement=ruleStoreStatement 
	 { $current=$iv_ruleStoreStatement.current; } 
	 EOF 
;

// Rule StoreStatement
ruleStoreStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_67
    {
    	newLeafNode(otherlv_0, grammarAccess.getStoreStatementAccess().getSTOREKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreStatementAccess().getTypeAliasTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_51
    {
    	newLeafNode(otherlv_2, grammarAccess.getStoreStatementAccess().getINTOKeyword_2());
    }
this_STRING_3=RULE_STRING
    { 
    newLeafNode(this_STRING_3, grammarAccess.getStoreStatementAccess().getSTRINGTerminalRuleCall_3()); 
    }
(
	otherlv_4=KEYWORD_70
    {
    	newLeafNode(otherlv_4, grammarAccess.getStoreStatementAccess().getUSINGKeyword_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getStoreStatementAccess().getFuncClauseParserRuleCall_4_1()); 
    }
ruleFuncClause
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleDescribeStatement
entryRuleDescribeStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDescribeStatementRule()); }
	 iv_ruleDescribeStatement=ruleDescribeStatement 
	 { $current=$iv_ruleDescribeStatement.current; } 
	 EOF 
;

// Rule DescribeStatement
ruleDescribeStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_83
    {
    	newLeafNode(otherlv_0, grammarAccess.getDescribeStatementAccess().getDESCRIBEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDescribeStatementAccess().getTypeAliasTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDescribeStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExplainStatement
entryRuleExplainStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExplainStatementRule()); }
	 iv_ruleExplainStatement=ruleExplainStatement 
	 { $current=$iv_ruleExplainStatement.current; } 
	 EOF 
;

// Rule ExplainStatement
ruleExplainStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_77
    {
    	newLeafNode(otherlv_0, grammarAccess.getExplainStatementAccess().getEXPLAINKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExplainStatementAccess().getTypeAliasTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExplainStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDumpStatement
entryRuleDumpStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDumpStatementRule()); }
	 iv_ruleDumpStatement=ruleDumpStatement 
	 { $current=$iv_ruleDumpStatement.current; } 
	 EOF 
;

// Rule DumpStatement
ruleDumpStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_49
    {
    	newLeafNode(otherlv_0, grammarAccess.getDumpStatementAccess().getDUMPKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDumpStatementAccess().getTypeAliasTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDumpStatementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_4
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getConditionAccess().getTypeParserRuleCall_0_1()); 
    }
ruleType
    {
        afterParserOrEnumRuleCall();
    }

	otherlv_2=KEYWORD_5
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getRightParenthesisKeyword_0_2());
    }
)?
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getOrConditionParserRuleCall_1()); 
    }
    this_OrCondition_3=ruleOrCondition
    {
        $current = $this_OrCondition_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOrCondition
entryRuleOrCondition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrConditionRule()); }
	 iv_ruleOrCondition=ruleOrCondition 
	 { $current=$iv_ruleOrCondition.current; } 
	 EOF 
;

// Rule OrCondition
ruleOrCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrConditionAccess().getAndConditionParserRuleCall_0()); 
    }
    this_AndCondition_0=ruleAndCondition
    {
        $current = $this_AndCondition_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrConditionAccess().getOrConditionLeftAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_36
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrConditionAccess().getORKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrConditionAccess().getRightAndConditionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrConditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndCondition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndCondition
entryRuleAndCondition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAndConditionRule()); }
	 iv_ruleAndCondition=ruleAndCondition 
	 { $current=$iv_ruleAndCondition.current; } 
	 EOF 
;

// Rule AndCondition
ruleAndCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndConditionAccess().getUnaryConditionParserRuleCall_0()); 
    }
    this_UnaryCondition_0=ruleUnaryCondition
    {
        $current = $this_UnaryCondition_0.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndConditionAccess().getAndConditionLeftAction_1_0(),
            $current);
    }
)
	otherlv_2=KEYWORD_39
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndConditionAccess().getANDKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndConditionAccess().getRightUnaryConditionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleUnaryCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndConditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnaryCondition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryCondition
entryRuleUnaryCondition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnaryConditionRule()); }
	 iv_ruleUnaryCondition=ruleUnaryCondition 
	 { $current=$iv_ruleUnaryCondition.current; } 
	 EOF 
;

// Rule UnaryCondition
ruleUnaryCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_4
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnaryConditionAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getUnaryConditionAccess().getConditionParserRuleCall_0_1()); 
    }
    this_Condition_1=ruleCondition
    {
        $current = $this_Condition_1.current;
        afterParserOrEnumRuleCall();
    }
(
	otherlv_2=KEYWORD_17
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryConditionAccess().getQuestionMarkKeyword_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryConditionAccess().getLeftExpConditionParserRuleCall_0_2_1_0()); 
	    }
		lv_leftExp_3_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryConditionRule());
	        }
       		set(
       			$current, 
       			"leftExp",
        		lv_leftExp_3_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=KEYWORD_12
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnaryConditionAccess().getColonKeyword_0_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryConditionAccess().getRightExpConditionParserRuleCall_0_2_3_0()); 
	    }
		lv_rightExp_5_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryConditionRule());
	        }
       		set(
       			$current, 
       			"rightExp",
        		lv_rightExp_5_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_6=KEYWORD_5
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnaryConditionAccess().getRightParenthesisKeyword_0_3());
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUnaryConditionAccess().getUnaryConditionLeftAction_0_4_0(),
            $current);
    }
)
	otherlv_8=KEYWORD_7
    {
    	newLeafNode(otherlv_8, grammarAccess.getUnaryConditionAccess().getPlusSignKeyword_0_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryConditionAccess().getRightConditionParserRuleCall_0_4_2_0()); 
	    }
		lv_right_9_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryConditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_9_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(
    { 
        newCompositeNode(grammarAccess.getUnaryConditionAccess().getTEParserRuleCall_1_0()); 
    }
    this_TE_10=ruleTE
    {
        $current = $this_TE_10.current;
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUnaryConditionAccess().getUnaryConditionLeftAction_1_1_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getUnaryConditionAccess().getRel_opParserRuleCall_1_1_1()); 
    }
rulerel_op
    {
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryConditionAccess().getRightTEParserRuleCall_1_1_2_0()); 
	    }
		lv_right_13_0=ruleTE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryConditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_13_0, 
        		"TE");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleTE
entryRuleTE returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTERule()); }
	 iv_ruleTE=ruleTE 
	 { $current=$iv_ruleTE.current; } 
	 EOF 
;

// Rule TE
ruleTE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTEAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    {
        $current = $this_Expression_0.current;
        afterParserOrEnumRuleCall();
    }
(
	otherlv_1=KEYWORD_33
    {
    	newLeafNode(otherlv_1, grammarAccess.getTEAccess().getISKeyword_1_0());
    }
(
	otherlv_2=KEYWORD_47
    {
    	newLeafNode(otherlv_2, grammarAccess.getTEAccess().getNOTKeyword_1_1());
    }
)?
	otherlv_3=KEYWORD_56
    {
    	newLeafNode(otherlv_3, grammarAccess.getTEAccess().getNULLKeyword_1_2());
    }
)?)
;





// Entry rule entryRulefunc_eval
entryRulefunc_eval returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFunc_evalRule()); }
	 iv_rulefunc_eval=rulefunc_eval 
	 { $current=$iv_rulefunc_eval.current; } 
	 EOF 
;

// Rule func_eval
rulefunc_eval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunc_evalAccess().getFuncNameParserRuleCall_0()); 
    }
ruleFuncName
    {
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunc_evalAccess().getFunc_evalAction_1(),
            $current);
    }
)
	otherlv_2=KEYWORD_4
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunc_evalAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunc_evalAccess().getArg_listReal_arg_listParserRuleCall_3_0()); 
	    }
		lv_arg_list_3_0=rulereal_arg_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunc_evalRule());
	        }
       		set(
       			$current, 
       			"arg_list",
        		lv_arg_list_3_0, 
        		"real_arg_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_4=KEYWORD_5
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunc_evalAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRulereal_arg_list
entryRulereal_arg_list returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReal_arg_listRule()); }
	 iv_rulereal_arg_list=rulereal_arg_list 
	 { $current=$iv_rulereal_arg_list.current; } 
	 EOF 
;

// Rule real_arg_list
rulereal_arg_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getReal_arg_listAccess().getArgsReal_argParserRuleCall_0_0()); 
	    }
		lv_args_0_0=rulereal_arg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReal_arg_listRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_0_0, 
        		"real_arg");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=KEYWORD_8
    {
    	newLeafNode(otherlv_1, grammarAccess.getReal_arg_listAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReal_arg_listAccess().getArgsReal_argParserRuleCall_1_1_0()); 
	    }
		lv_args_2_0=rulereal_arg		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReal_arg_listRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"real_arg");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulereal_arg
entryRulereal_arg returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReal_argRule()); }
	 iv_rulereal_arg=rulereal_arg 
	 { $current=$iv_rulereal_arg.current; } 
	 EOF 
;

// Rule real_arg
rulereal_arg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReal_argAccess().getConditionParserRuleCall_0()); 
    }
    this_Condition_0=ruleCondition
    {
        $current = $this_Condition_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReal_argAccess().getSTARParserRuleCall_1()); 
    }
ruleSTAR
    {
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=KEYWORD_47
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionAccess().getNOTKeyword_0());
    }
)?
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAddExpressionParserRuleCall_1()); 
    }
    this_AddExpression_1=ruleAddExpression
    {
        $current = $this_AddExpression_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	 iv_ruleAddExpression=ruleAddExpression 
	 { $current=$iv_ruleAddExpression.current; } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAddExpressionAccess().getMulti_exprParserRuleCall_0()); 
    }
    this_multi_expr_0=rulemulti_expr
    {
        $current = $this_multi_expr_0.current;
        afterParserOrEnumRuleCall();
    }
((
    { 
        newCompositeNode(grammarAccess.getAddExpressionAccess().getPLUSParserRuleCall_1_0_0()); 
    }
rulePLUS
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAddExpressionAccess().getMINUSParserRuleCall_1_0_1()); 
    }
ruleMINUS
    {
        afterParserOrEnumRuleCall();
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getMul_expMulti_exprParserRuleCall_1_1_0()); 
	    }
		lv_mul_exp_3_0=rulemulti_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		set(
       			$current, 
       			"mul_exp",
        		lv_mul_exp_3_0, 
        		"multi_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulemulti_expr
entryRulemulti_expr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMulti_exprRule()); }
	 iv_rulemulti_expr=rulemulti_expr 
	 { $current=$iv_rulemulti_expr.current; } 
	 EOF 
;

// Rule multi_expr
rulemulti_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMulti_exprAccess().getCast_exprParserRuleCall_0()); 
    }
    this_cast_expr_0=rulecast_expr
    {
        $current = $this_cast_expr_0.current;
        afterParserOrEnumRuleCall();
    }
((
    { 
        newCompositeNode(grammarAccess.getMulti_exprAccess().getSTARParserRuleCall_1_0_0()); 
    }
ruleSTAR
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMulti_exprAccess().getDIVParserRuleCall_1_0_1()); 
    }
ruleDIV
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMulti_exprAccess().getPERCENTParserRuleCall_1_0_2()); 
    }
rulePERCENT
    {
        afterParserOrEnumRuleCall();
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMulti_exprAccess().getMul_castCast_exprParserRuleCall_1_1_0()); 
	    }
		lv_mul_cast_4_0=rulecast_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMulti_exprRule());
	        }
       		set(
       			$current, 
       			"mul_cast",
        		lv_mul_cast_4_0, 
        		"cast_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulecast_expr
entryRulecast_expr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCast_exprRule()); }
	 iv_rulecast_expr=rulecast_expr 
	 { $current=$iv_rulecast_expr.current; } 
	 EOF 
;

// Rule cast_expr
rulecast_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getCast_exprAccess().getUnary_exprParserRuleCall()); 
    }
    this_unary_expr_0=ruleunary_expr
    {
        $current = $this_unary_expr_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleunary_expr
entryRuleunary_expr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnary_exprRule()); }
	 iv_ruleunary_expr=ruleunary_expr 
	 { $current=$iv_ruleunary_expr.current; } 
	 EOF 
;

// Rule unary_expr
ruleunary_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnary_exprAccess().getExpr_evalParserRuleCall_0()); 
    }
    this_expr_eval_0=ruleexpr_eval
    {
        $current = $this_expr_eval_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnary_exprAccess().getNeg_exprParserRuleCall_1()); 
    }
    this_neg_expr_1=ruleneg_expr
    {
        $current = $this_neg_expr_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleexpr_eval
entryRuleexpr_eval returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpr_evalRule()); }
	 iv_ruleexpr_eval=ruleexpr_eval 
	 { $current=$iv_ruleexpr_eval.current; } 
	 EOF 
;

// Rule expr_eval
ruleexpr_eval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpr_evalAccess().getConst_exprParserRuleCall_0()); 
    }
ruleconst_expr
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpr_evalAccess().getVar_exprParserRuleCall_1()); 
    }
    this_var_expr_1=rulevar_expr
    {
        $current = $this_var_expr_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulevar_expr
entryRulevar_expr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVar_exprRule()); }
	 iv_rulevar_expr=rulevar_expr 
	 { $current=$iv_rulevar_expr.current; } 
	 EOF 
;

// Rule var_expr
rulevar_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVar_exprAccess().getProjectable_exprParserRuleCall_0()); 
    }
    this_projectable_expr_0=ruleprojectable_expr
    {
        $current = $this_projectable_expr_0.current;
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getVar_exprAccess().getDot_projParserRuleCall_1_0()); 
    }
ruledot_proj
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVar_exprAccess().getPound_projParserRuleCall_1_1()); 
    }
rulepound_proj
    {
        afterParserOrEnumRuleCall();
    }
)*)
;





// Entry rule entryRuleprojectable_expr
entryRuleprojectable_expr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getProjectable_exprRule()); }
	 iv_ruleprojectable_expr=ruleprojectable_expr 
	 { $current=$iv_ruleprojectable_expr.current; } 
	 EOF 
;

// Rule projectable_expr
ruleprojectable_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProjectable_exprAccess().getFunc_evalParserRuleCall_0()); 
    }
    this_func_eval_0=rulefunc_eval
    {
        $current = $this_func_eval_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProjectable_exprAccess().getCol_refParserRuleCall_1()); 
    }
rulecol_ref
    {
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuledot_proj
entryRuledot_proj returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDot_projRule()); } 
	 iv_ruledot_proj=ruledot_proj 
	 { $current=$iv_ruledot_proj.current.getText(); }  
	 EOF 
;

// Rule dot_proj
ruledot_proj returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDot_projAccess().getFullStopKeyword_0_0()); 
    }

    |
	kw=KEYWORD_24 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDot_projAccess().getColonColonKeyword_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getDot_projAccess().getCol_alias_or_indexParserRuleCall_1()); 
    }
    this_col_alias_or_index_2=rulecol_alias_or_index    {
		$current.merge(this_col_alias_or_index_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulecol_alias_or_index
entryRulecol_alias_or_index returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCol_alias_or_indexRule()); } 
	 iv_rulecol_alias_or_index=rulecol_alias_or_index 
	 { $current=$iv_rulecol_alias_or_index.current.getText(); }  
	 EOF 
;

// Rule col_alias_or_index
rulecol_alias_or_index returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getCol_alias_or_indexAccess().getCol_aliasParserRuleCall_0()); 
    }
    this_col_alias_0=rulecol_alias    {
		$current.merge(this_col_alias_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCol_alias_or_indexAccess().getCol_indexParserRuleCall_1()); 
    }
    this_col_index_1=rulecol_index    {
		$current.merge(this_col_index_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulecol_alias
entryRulecol_alias returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCol_aliasRule()); } 
	 iv_rulecol_alias=rulecol_alias 
	 { $current=$iv_rulecol_alias.current.getText(); }  
	 EOF 
;

// Rule col_alias
rulecol_alias returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

    { 
        newCompositeNode(grammarAccess.getCol_aliasAccess().getIDENTIFIERParserRuleCall()); 
    }
    this_IDENTIFIER_0=ruleIDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulecol_index
entryRulecol_index returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCol_indexRule()); } 
	 iv_rulecol_index=rulecol_index 
	 { $current=$iv_rulecol_index.current.getText(); }  
	 EOF 
;

// Rule col_index
rulecol_index returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getCol_indexAccess().getDOLLARParserRuleCall_0()); 
    }
    this_DOLLAR_0=ruleDOLLAR    {
		$current.merge(this_DOLLAR_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_DIGIT_1=RULE_DIGIT    {
		$current.merge(this_DIGIT_1);
    }

    { 
    newLeafNode(this_DIGIT_1, grammarAccess.getCol_indexAccess().getDIGITTerminalRuleCall_1_0()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getCol_indexAccess().getINTTerminalRuleCall_1_1()); 
    }
))
    ;





// Entry rule entryRulepound_proj
entryRulepound_proj returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPound_projRule()); } 
	 iv_rulepound_proj=rulepound_proj 
	 { $current=$iv_rulepound_proj.current.getText(); }  
	 EOF 
;

// Rule pound_proj
rulepound_proj returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getPound_projAccess().getPOUNDParserRuleCall_0()); 
    }
    this_POUND_0=rulePOUND    {
		$current.merge(this_POUND_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getPound_projAccess().getSTRINGTerminalRuleCall_1_0()); 
    }

    |
	kw=KEYWORD_56 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPound_projAccess().getNULLKeyword_1_1()); 
    }
))
    ;







// Entry rule entryRuleneg_expr
entryRuleneg_expr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNeg_exprRule()); }
	 iv_ruleneg_expr=ruleneg_expr 
	 { $current=$iv_ruleneg_expr.current; } 
	 EOF 
;

// Rule neg_expr
ruleneg_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_9
    {
    	newLeafNode(otherlv_0, grammarAccess.getNeg_exprAccess().getHyphenMinusKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getNeg_exprAccess().getCast_exprParserRuleCall_1()); 
    }
    this_cast_expr_1=rulecast_expr
    {
        $current = $this_cast_expr_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulerel_op
entryRulerel_op returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRel_opRule()); } 
	 iv_rulerel_op=rulerel_op 
	 { $current=$iv_rulerel_op.current.getText(); }  
	 EOF 
;

// Rule rel_op
rulerel_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getRel_opAccess().getRel_op_eqParserRuleCall_0()); 
    }
    this_rel_op_eq_0=rulerel_op_eq    {
		$current.merge(this_rel_op_eq_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRel_opAccess().getRel_op_neParserRuleCall_1()); 
    }
    this_rel_op_ne_1=rulerel_op_ne    {
		$current.merge(this_rel_op_ne_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRel_opAccess().getRel_op_gtParserRuleCall_2()); 
    }
    this_rel_op_gt_2=rulerel_op_gt    {
		$current.merge(this_rel_op_gt_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRel_opAccess().getRel_op_gteParserRuleCall_3()); 
    }
    this_rel_op_gte_3=rulerel_op_gte    {
		$current.merge(this_rel_op_gte_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRel_opAccess().getRel_op_ltParserRuleCall_4()); 
    }
    this_rel_op_lt_4=rulerel_op_lt    {
		$current.merge(this_rel_op_lt_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRel_opAccess().getRel_op_lteParserRuleCall_5()); 
    }
    this_rel_op_lte_5=rulerel_op_lte    {
		$current.merge(this_rel_op_lte_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=KEYWORD_79 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRel_opAccess().getMATCHESKeyword_6()); 
    }
)
    ;





// Entry rule entryRulerel_op_eq
entryRulerel_op_eq returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRel_op_eqRule()); } 
	 iv_rulerel_op_eq=rulerel_op_eq 
	 { $current=$iv_rulerel_op_eq.current.getText(); }  
	 EOF 
;

// Rule rel_op_eq
rulerel_op_eq returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getRel_op_eqAccess().getSTR_OP_EQParserRuleCall_0()); 
    }
    this_STR_OP_EQ_0=ruleSTR_OP_EQ    {
		$current.merge(this_STR_OP_EQ_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRel_op_eqAccess().getNUM_OP_EQParserRuleCall_1()); 
    }
    this_NUM_OP_EQ_1=ruleNUM_OP_EQ    {
		$current.merge(this_NUM_OP_EQ_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulerel_op_ne
entryRulerel_op_ne returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRel_op_neRule()); } 
	 iv_rulerel_op_ne=rulerel_op_ne 
	 { $current=$iv_rulerel_op_ne.current.getText(); }  
	 EOF 
;

// Rule rel_op_ne
rulerel_op_ne returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getRel_op_neAccess().getSTR_OP_NEParserRuleCall_0()); 
    }
    this_STR_OP_NE_0=ruleSTR_OP_NE    {
		$current.merge(this_STR_OP_NE_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRel_op_neAccess().getNUM_OP_NEParserRuleCall_1()); 
    }
    this_NUM_OP_NE_1=ruleNUM_OP_NE    {
		$current.merge(this_NUM_OP_NE_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulerel_op_gt
entryRulerel_op_gt returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRel_op_gtRule()); } 
	 iv_rulerel_op_gt=rulerel_op_gt 
	 { $current=$iv_rulerel_op_gt.current.getText(); }  
	 EOF 
;

// Rule rel_op_gt
rulerel_op_gt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getRel_op_gtAccess().getSTR_OP_GTParserRuleCall_0()); 
    }
    this_STR_OP_GT_0=ruleSTR_OP_GT    {
		$current.merge(this_STR_OP_GT_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRel_op_gtAccess().getNUM_OP_GTParserRuleCall_1()); 
    }
    this_NUM_OP_GT_1=ruleNUM_OP_GT    {
		$current.merge(this_NUM_OP_GT_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulerel_op_gte
entryRulerel_op_gte returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRel_op_gteRule()); } 
	 iv_rulerel_op_gte=rulerel_op_gte 
	 { $current=$iv_rulerel_op_gte.current.getText(); }  
	 EOF 
;

// Rule rel_op_gte
rulerel_op_gte returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getRel_op_gteAccess().getSTR_OP_GTEParserRuleCall_0()); 
    }
    this_STR_OP_GTE_0=ruleSTR_OP_GTE    {
		$current.merge(this_STR_OP_GTE_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRel_op_gteAccess().getNUM_OP_GTEParserRuleCall_1()); 
    }
    this_NUM_OP_GTE_1=ruleNUM_OP_GTE    {
		$current.merge(this_NUM_OP_GTE_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulerel_op_lt
entryRulerel_op_lt returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRel_op_ltRule()); } 
	 iv_rulerel_op_lt=rulerel_op_lt 
	 { $current=$iv_rulerel_op_lt.current.getText(); }  
	 EOF 
;

// Rule rel_op_lt
rulerel_op_lt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getRel_op_ltAccess().getSTR_OP_LTParserRuleCall_0()); 
    }
    this_STR_OP_LT_0=ruleSTR_OP_LT    {
		$current.merge(this_STR_OP_LT_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRel_op_ltAccess().getNUM_OP_LTParserRuleCall_1()); 
    }
    this_NUM_OP_LT_1=ruleNUM_OP_LT    {
		$current.merge(this_NUM_OP_LT_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulerel_op_lte
entryRulerel_op_lte returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRel_op_lteRule()); } 
	 iv_rulerel_op_lte=rulerel_op_lte 
	 { $current=$iv_rulerel_op_lte.current.getText(); }  
	 EOF 
;

// Rule rel_op_lte
rulerel_op_lte returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getRel_op_lteAccess().getSTR_OP_LTEParserRuleCall_0()); 
    }
    this_STR_OP_LTE_0=ruleSTR_OP_LTE    {
		$current.merge(this_STR_OP_LTE_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRel_op_lteAccess().getNUM_OP_LTEParserRuleCall_1()); 
    }
    this_NUM_OP_LTE_1=ruleNUM_OP_LTE    {
		$current.merge(this_NUM_OP_LTE_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleAliasType
entryRuleAliasType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAliasTypeRule()); }
	 iv_ruleAliasType=ruleAliasType 
	 { $current=$iv_ruleAliasType.current; } 
	 EOF 
;

// Rule AliasType
ruleAliasType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAliasTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAliasTypeAccess().getReferencedStatementCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleFlattenGeneratedItem
entryRuleFlattenGeneratedItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFlattenGeneratedItemRule()); }
	 iv_ruleFlattenGeneratedItem=ruleFlattenGeneratedItem 
	 { $current=$iv_ruleFlattenGeneratedItem.current; } 
	 EOF 
;

// Rule FlattenGeneratedItem
ruleFlattenGeneratedItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getFlattenGeneratedItemAccess().getConditionParserRuleCall_0_0()); 
    }
    this_Condition_0=ruleCondition
    {
        $current = $this_Condition_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	otherlv_1=KEYWORD_6
    {
    	newLeafNode(otherlv_1, grammarAccess.getFlattenGeneratedItemAccess().getAsteriskKeyword_0_1());
    }
)(
	otherlv_2=KEYWORD_28
    {
    	newLeafNode(otherlv_2, grammarAccess.getFlattenGeneratedItemAccess().getASKeyword_1_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getFlattenGeneratedItemAccess().getFieldDefParserRuleCall_1_1_0()); 
    }
ruleFieldDef
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFlattenGeneratedItemAccess().getFieldFefListParserRuleCall_1_1_1()); 
    }
ruleFieldFefList
    {
        afterParserOrEnumRuleCall();
    }
))?)
;





// Entry rule entryRuleCommentStatement
entryRuleCommentStatement returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCommentStatementRule()); } 
	 iv_ruleCommentStatement=ruleCommentStatement 
	 { $current=$iv_ruleCommentStatement.current.getText(); }  
	 EOF 
;

// Rule CommentStatement
ruleCommentStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_SL_COMMENT_0=RULE_SL_COMMENT    {
		$current.merge(this_SL_COMMENT_0);
    }

    { 
    newLeafNode(this_SL_COMMENT_0, grammarAccess.getCommentStatementAccess().getSL_COMMENTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleAlias
entryRuleAlias returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAliasRule()); } 
	 iv_ruleAlias=ruleAlias 
	 { $current=$iv_ruleAlias.current.getText(); }  
	 EOF 
;

// Rule Alias
ruleAlias returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getAliasAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleParallelClause
entryRuleParallelClause returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getParallelClauseRule()); } 
	 iv_ruleParallelClause=ruleParallelClause 
	 { $current=$iv_ruleParallelClause.current.getText(); }  
	 EOF 
;

// Rule ParallelClause
ruleParallelClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_86 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParallelClauseAccess().getPARALLELKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getParallelClauseAccess().getScalarIntParserRuleCall_1()); 
    }
    this_scalarInt_1=rulescalarInt    {
		$current.merge(this_scalarInt_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleRegisterClause
entryRuleRegisterClause returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRegisterClauseRule()); } 
	 iv_ruleRegisterClause=ruleRegisterClause 
	 { $current=$iv_ruleRegisterClause.current.getText(); }  
	 EOF 
;

// Rule RegisterClause
ruleRegisterClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_87 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRegisterClauseAccess().getREGISTERKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getRegisterClauseAccess().getPathClauseParserRuleCall_1()); 
    }
    this_PathClause_1=rulePathClause    {
		$current.merge(this_PathClause_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleDefaultClause
entryRuleDefaultClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDefaultClauseRule()); }
	 iv_ruleDefaultClause=ruleDefaultClause 
	 { $current=$iv_ruleDefaultClause.current; } 
	 EOF 
;

// Rule DefaultClause
ruleDefaultClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_82
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefaultClauseAccess().getDEFAULTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultClauseAccess().getNameAliasParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultClauseRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)this_STRING_2=RULE_STRING
    { 
    newLeafNode(this_STRING_2, grammarAccess.getDefaultClauseAccess().getSTRINGTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleDeclareClause
entryRuleDeclareClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDeclareClauseRule()); }
	 iv_ruleDeclareClause=ruleDeclareClause 
	 { $current=$iv_ruleDeclareClause.current; } 
	 EOF 
;

// Rule DeclareClause
ruleDeclareClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_81
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeclareClauseAccess().getDECLAREKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclareClauseAccess().getNameAliasParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclareClauseRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)this_STRING_2=RULE_STRING
    { 
    newLeafNode(this_STRING_2, grammarAccess.getDeclareClauseAccess().getSTRINGTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleDefineClause
entryRuleDefineClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDefineClauseRule()); }
	 iv_ruleDefineClause=ruleDefineClause 
	 { $current=$iv_ruleDefineClause.current; } 
	 EOF 
;

// Rule DefineClause
ruleDefineClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_71
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefineClauseAccess().getDEFINEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineClauseAccess().getNameAliasParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleAlias		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineClauseRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Alias");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getDefineClauseAccess().getFuncClauseParserRuleCall_2()); 
    }
ruleFuncClause
    {
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLoadUsing
entryRuleLoadUsing returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getLoadUsingRule()); } 
	 iv_ruleLoadUsing=ruleLoadUsing 
	 { $current=$iv_ruleLoadUsing.current.getText(); }  
	 EOF 
;

// Rule LoadUsing
ruleLoadUsing returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_70 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLoadUsingAccess().getUSINGKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLoadUsingAccess().getFuncClauseParserRuleCall_1()); 
    }
    this_FuncClause_1=ruleFuncClause    {
		$current.merge(this_FuncClause_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleFuncClause
entryRuleFuncClause returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFuncClauseRule()); } 
	 iv_ruleFuncClause=ruleFuncClause 
	 { $current=$iv_ruleFuncClause.current.getText(); }  
	 EOF 
;

// Rule FuncClause
ruleFuncClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getFuncClauseAccess().getFuncNameParserRuleCall_0()); 
    }
    this_FuncName_0=ruleFuncName    {
		$current.merge(this_FuncName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFuncClauseAccess().getLeftParenthesisKeyword_1()); 
    }
(    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getFuncClauseAccess().getSTRINGTerminalRuleCall_2()); 
    }
)?(
	kw=KEYWORD_8 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFuncClauseAccess().getCommaKeyword_3_0()); 
    }
    this_STRING_4=RULE_STRING    {
		$current.merge(this_STRING_4);
    }

    { 
    newLeafNode(this_STRING_4, grammarAccess.getFuncClauseAccess().getSTRINGTerminalRuleCall_3_1()); 
    }
)*
	kw=KEYWORD_5 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFuncClauseAccess().getRightParenthesisKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleFuncName
entryRuleFuncName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFuncNameRule()); } 
	 iv_ruleFuncName=ruleFuncName 
	 { $current=$iv_ruleFuncName.current.getText(); }  
	 EOF 
;

// Rule FuncName
ruleFuncName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFuncNameAccess().getIDTerminalRuleCall_0()); 
    }

    |
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFuncNameAccess().getFullStopKeyword_1()); 
    }

    |
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFuncNameAccess().getDollarSignKeyword_2()); 
    }
)+
    ;





// Entry rule entryRulePathClause
entryRulePathClause returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPathClauseRule()); } 
	 iv_rulePathClause=rulePathClause 
	 { $current=$iv_rulePathClause.current.getText(); }  
	 EOF 
;

// Rule PathClause
rulePathClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_38 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPathClauseAccess().getALLKeyword_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getPathClauseAccess().getScalarParserRuleCall_1()); 
    }
    this_scalar_1=rulescalar    {
		$current.merge(this_scalar_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getPathClauseAccess().getIDTerminalRuleCall_2()); 
    }

    |
	kw=KEYWORD_10 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPathClauseAccess().getFullStopKeyword_3()); 
    }

    |
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPathClauseAccess().getDollarSignKeyword_4()); 
    }

    |
	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPathClauseAccess().getSolidusKeyword_5()); 
    }

    |
	kw=KEYWORD_19 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPathClauseAccess().getReverseSolidusKeyword_6()); 
    }

    |
	kw=KEYWORD_9 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPathClauseAccess().getHyphenMinusKeyword_7()); 
    }
)+
    ;





// Entry rule entryRuleAsClause
entryRuleAsClause returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAsClauseRule()); } 
	 iv_ruleAsClause=ruleAsClause 
	 { $current=$iv_ruleAsClause.current.getText(); }  
	 EOF 
;

// Rule AsClause
ruleAsClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_28 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAsClauseAccess().getASKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getAsClauseAccess().getAliasDefParserRuleCall_1_0()); 
    }
    this_AliasDef_1=ruleAliasDef    {
		$current.merge(this_AliasDef_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAsClauseAccess().getAliasDefListParserRuleCall_1_1()); 
    }
    this_AliasDefList_2=ruleAliasDefList    {
		$current.merge(this_AliasDefList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleAliasDef
entryRuleAliasDef returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAliasDefRule()); } 
	 iv_ruleAliasDef=ruleAliasDef 
	 { $current=$iv_ruleAliasDef.current.getText(); }  
	 EOF 
;

// Rule AliasDef
ruleAliasDef returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getAliasDefAccess().getAliasParserRuleCall_0()); 
    }
    this_Alias_0=ruleAlias    {
		$current.merge(this_Alias_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_12 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliasDefAccess().getColonKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getAliasDefAccess().getTypeParserRuleCall_1_1()); 
    }
    this_Type_2=ruleType    {
		$current.merge(this_Type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleAliasDefList
entryRuleAliasDefList returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAliasDefListRule()); } 
	 iv_ruleAliasDefList=ruleAliasDefList 
	 { $current=$iv_ruleAliasDefList.current.getText(); }  
	 EOF 
;

// Rule AliasDefList
ruleAliasDefList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliasDefListAccess().getLeftParenthesisKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getAliasDefListAccess().getAliasDefParserRuleCall_1()); 
    }
    this_AliasDef_1=ruleAliasDef    {
		$current.merge(this_AliasDef_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_8 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliasDefListAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getAliasDefListAccess().getAliasDefParserRuleCall_2_1()); 
    }
    this_AliasDef_3=ruleAliasDef    {
		$current.merge(this_AliasDef_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=KEYWORD_5 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliasDefListAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleIDENTIFIER
entryRuleIDENTIFIER returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getIDENTIFIERRule()); } 
	 iv_ruleIDENTIFIER=ruleIDENTIFIER 
	 { $current=$iv_ruleIDENTIFIER.current.getText(); }  
	 EOF 
;

// Rule IDENTIFIER
ruleIDENTIFIER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIDENTIFIERAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleFieldDef
entryRuleFieldDef returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFieldDefRule()); } 
	 iv_ruleFieldDef=ruleFieldDef 
	 { $current=$iv_ruleFieldDef.current.getText(); }  
	 EOF 
;

// Rule FieldDef
ruleFieldDef returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getFieldDefAccess().getIDENTIFIERParserRuleCall_0()); 
    }
    this_IDENTIFIER_0=ruleIDENTIFIER    {
		$current.merge(this_IDENTIFIER_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_12 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldDefAccess().getColonKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFieldDefAccess().getTypeParserRuleCall_1_1()); 
    }
    this_Type_2=ruleType    {
		$current.merge(this_Type_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleFieldFefList
entryRuleFieldFefList returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFieldFefListRule()); } 
	 iv_ruleFieldFefList=ruleFieldFefList 
	 { $current=$iv_ruleFieldFefList.current.getText(); }  
	 EOF 
;

// Rule FieldFefList
ruleFieldFefList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldFefListAccess().getLeftParenthesisKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFieldFefListAccess().getFieldDefParserRuleCall_1()); 
    }
    this_FieldDef_1=ruleFieldDef    {
		$current.merge(this_FieldDef_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_8 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldFefListAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFieldFefListAccess().getFieldDefParserRuleCall_2_1()); 
    }
    this_FieldDef_3=ruleFieldDef    {
		$current.merge(this_FieldDef_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=KEYWORD_5 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldFefListAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleType
entryRuleType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getTypeRule()); } 
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current.getText(); }  
	 EOF 
;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_0()); 
    }
    this_SimpleType_0=ruleSimpleType    {
		$current.merge(this_SimpleType_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTupleTypeParserRuleCall_1()); 
    }
    this_TupleType_1=ruleTupleType    {
		$current.merge(this_TupleType_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getMapTypeParserRuleCall_2()); 
    }
    this_MapType_2=ruleMapType    {
		$current.merge(this_MapType_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getBag_typeParserRuleCall_3()); 
    }
    this_bag_type_3=rulebag_type    {
		$current.merge(this_bag_type_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleSimpleType
entryRuleSimpleType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSimpleTypeRule()); } 
	 iv_ruleSimpleType=ruleSimpleType 
	 { $current=$iv_ruleSimpleType.current.getText(); }  
	 EOF 
;

// Rule SimpleType
ruleSimpleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_44 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getINTKeyword_0()); 
    }

    |
	kw=KEYWORD_55 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getLONGKeyword_1()); 
    }

    |
	kw=KEYWORD_58 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getFLOATKeyword_2()); 
    }

    |
	kw=KEYWORD_72 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getDOUBLEKeyword_3()); 
    }

    |
	kw=KEYWORD_89 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getCHARARRAYKeyword_4()); 
    }

    |
	kw=KEYWORD_88 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeAccess().getBYTEARRAYKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleTupleType
entryRuleTupleType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getTupleTypeRule()); } 
	 iv_ruleTupleType=ruleTupleType 
	 { $current=$iv_ruleTupleType.current.getText(); }  
	 EOF 
;

// Rule TupleType
ruleTupleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_68 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTupleTypeAccess().getTUPLEKeyword_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getTupleTypeAccess().getAliasDefListParserRuleCall_1()); 
    }
    this_AliasDefList_1=ruleAliasDefList    {
		$current.merge(this_AliasDefList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulebag_type
entryRulebag_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getBag_typeRule()); } 
	 iv_rulebag_type=rulebag_type 
	 { $current=$iv_rulebag_type.current.getText(); }  
	 EOF 
;

// Rule bag_type
rulebag_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=KEYWORD_42 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBag_typeAccess().getBAGKeyword_0()); 
    }
)?
	kw=KEYWORD_21 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBag_typeAccess().getLeftCurlyBracketKeyword_1()); 
    }
((
    { 
        newCompositeNode(grammarAccess.getBag_typeAccess().getIDENTIFIERParserRuleCall_2_0_0()); 
    }
    this_IDENTIFIER_2=ruleIDENTIFIER    {
		$current.merge(this_IDENTIFIER_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=KEYWORD_12 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBag_typeAccess().getColonKeyword_2_0_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getBag_typeAccess().getTupleTypeParserRuleCall_2_1()); 
    }
    this_TupleType_4=ruleTupleType    {
		$current.merge(this_TupleType_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=KEYWORD_22 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBag_typeAccess().getRightCurlyBracketKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleMapType
entryRuleMapType returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getMapTypeRule()); } 
	 iv_ruleMapType=ruleMapType 
	 { $current=$iv_ruleMapType.current.getText(); }  
	 EOF 
;

// Rule MapType
ruleMapType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_62 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMapTypeAccess().getMAPKeyword()); 
    }

    ;







// Entry rule entryRuleSTR_OP_EQ
entryRuleSTR_OP_EQ returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSTR_OP_EQRule()); } 
	 iv_ruleSTR_OP_EQ=ruleSTR_OP_EQ 
	 { $current=$iv_ruleSTR_OP_EQ.current.getText(); }  
	 EOF 
;

// Rule STR_OP_EQ
ruleSTR_OP_EQ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_30 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTR_OP_EQAccess().getEQKeyword()); 
    }

    ;





// Entry rule entryRuleSTR_OP_GT
entryRuleSTR_OP_GT returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSTR_OP_GTRule()); } 
	 iv_ruleSTR_OP_GT=ruleSTR_OP_GT 
	 { $current=$iv_ruleSTR_OP_GT.current.getText(); }  
	 EOF 
;

// Rule STR_OP_GT
ruleSTR_OP_GT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_31 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTR_OP_GTAccess().getGTKeyword()); 
    }

    ;





// Entry rule entryRuleSTR_OP_LT
entryRuleSTR_OP_LT returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSTR_OP_LTRule()); } 
	 iv_ruleSTR_OP_LT=ruleSTR_OP_LT 
	 { $current=$iv_ruleSTR_OP_LT.current.getText(); }  
	 EOF 
;

// Rule STR_OP_LT
ruleSTR_OP_LT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_34 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTR_OP_LTAccess().getLTKeyword()); 
    }

    ;





// Entry rule entryRuleSTR_OP_GTE
entryRuleSTR_OP_GTE returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSTR_OP_GTERule()); } 
	 iv_ruleSTR_OP_GTE=ruleSTR_OP_GTE 
	 { $current=$iv_ruleSTR_OP_GTE.current.getText(); }  
	 EOF 
;

// Rule STR_OP_GTE
ruleSTR_OP_GTE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_43 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTR_OP_GTEAccess().getGTEKeyword()); 
    }

    ;





// Entry rule entryRuleSTR_OP_LTE
entryRuleSTR_OP_LTE returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSTR_OP_LTERule()); } 
	 iv_ruleSTR_OP_LTE=ruleSTR_OP_LTE 
	 { $current=$iv_ruleSTR_OP_LTE.current.getText(); }  
	 EOF 
;

// Rule STR_OP_LTE
ruleSTR_OP_LTE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_45 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTR_OP_LTEAccess().getLTEKeyword()); 
    }

    ;





// Entry rule entryRuleSTR_OP_NE
entryRuleSTR_OP_NE returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSTR_OP_NERule()); } 
	 iv_ruleSTR_OP_NE=ruleSTR_OP_NE 
	 { $current=$iv_ruleSTR_OP_NE.current.getText(); }  
	 EOF 
;

// Rule STR_OP_NE
ruleSTR_OP_NE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_46 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTR_OP_NEAccess().getNEQKeyword()); 
    }

    ;







// Entry rule entryRuleNUM_OP_EQ
entryRuleNUM_OP_EQ returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNUM_OP_EQRule()); } 
	 iv_ruleNUM_OP_EQ=ruleNUM_OP_EQ 
	 { $current=$iv_ruleNUM_OP_EQ.current.getText(); }  
	 EOF 
;

// Rule NUM_OP_EQ
ruleNUM_OP_EQ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_26 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNUM_OP_EQAccess().getEqualsSignEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleNUM_OP_LT
entryRuleNUM_OP_LT returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNUM_OP_LTRule()); } 
	 iv_ruleNUM_OP_LT=ruleNUM_OP_LT 
	 { $current=$iv_ruleNUM_OP_LT.current.getText(); }  
	 EOF 
;

// Rule NUM_OP_LT
ruleNUM_OP_LT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_14 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNUM_OP_LTAccess().getLessThanSignKeyword()); 
    }

    ;





// Entry rule entryRuleNUM_OP_LTE
entryRuleNUM_OP_LTE returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNUM_OP_LTERule()); } 
	 iv_ruleNUM_OP_LTE=ruleNUM_OP_LTE 
	 { $current=$iv_ruleNUM_OP_LTE.current.getText(); }  
	 EOF 
;

// Rule NUM_OP_LTE
ruleNUM_OP_LTE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_25 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNUM_OP_LTEAccess().getLessThanSignEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleNUM_OP_GT
entryRuleNUM_OP_GT returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNUM_OP_GTRule()); } 
	 iv_ruleNUM_OP_GT=ruleNUM_OP_GT 
	 { $current=$iv_ruleNUM_OP_GT.current.getText(); }  
	 EOF 
;

// Rule NUM_OP_GT
ruleNUM_OP_GT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_16 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNUM_OP_GTAccess().getGreaterThanSignKeyword()); 
    }

    ;





// Entry rule entryRuleNUM_OP_GTE
entryRuleNUM_OP_GTE returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNUM_OP_GTERule()); } 
	 iv_ruleNUM_OP_GTE=ruleNUM_OP_GTE 
	 { $current=$iv_ruleNUM_OP_GTE.current.getText(); }  
	 EOF 
;

// Rule NUM_OP_GTE
ruleNUM_OP_GTE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_27 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNUM_OP_GTEAccess().getGreaterThanSignEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleNUM_OP_NE
entryRuleNUM_OP_NE returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNUM_OP_NERule()); } 
	 iv_ruleNUM_OP_NE=ruleNUM_OP_NE 
	 { $current=$iv_ruleNUM_OP_NE.current.getText(); }  
	 EOF 
;

// Rule NUM_OP_NE
ruleNUM_OP_NE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_23 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNUM_OP_NEAccess().getExclamationMarkEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleSEMI_COLON
entryRuleSEMI_COLON returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSEMI_COLONRule()); } 
	 iv_ruleSEMI_COLON=ruleSEMI_COLON 
	 { $current=$iv_ruleSEMI_COLON.current.getText(); }  
	 EOF 
;

// Rule SEMI_COLON
ruleSEMI_COLON returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_13 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSEMI_COLONAccess().getSemicolonKeyword()); 
    }

    ;

















// Entry rule entryRulePOUND
entryRulePOUND returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPOUNDRule()); } 
	 iv_rulePOUND=rulePOUND 
	 { $current=$iv_rulePOUND.current.getText(); }  
	 EOF 
;

// Rule POUND
rulePOUND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_1 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPOUNDAccess().getNumberSignKeyword()); 
    }

    ;







// Entry rule entryRuleCOMMA
entryRuleCOMMA returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCOMMARule()); } 
	 iv_ruleCOMMA=ruleCOMMA 
	 { $current=$iv_ruleCOMMA.current.getText(); }  
	 EOF 
;

// Rule COMMA
ruleCOMMA returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_8 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOMMAAccess().getCommaKeyword()); 
    }

    ;







// Entry rule entryRuleDIV
entryRuleDIV returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDIVRule()); } 
	 iv_ruleDIV=ruleDIV 
	 { $current=$iv_ruleDIV.current.getText(); }  
	 EOF 
;

// Rule DIV
ruleDIV returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_11 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDIVAccess().getSolidusKeyword()); 
    }

    ;





// Entry rule entryRulePERCENT
entryRulePERCENT returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPERCENTRule()); } 
	 iv_rulePERCENT=rulePERCENT 
	 { $current=$iv_rulePERCENT.current.getText(); }  
	 EOF 
;

// Rule PERCENT
rulePERCENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_3 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPERCENTAccess().getPercentSignKeyword()); 
    }

    ;





// Entry rule entryRulePLUS
entryRulePLUS returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPLUSRule()); } 
	 iv_rulePLUS=rulePLUS 
	 { $current=$iv_rulePLUS.current.getText(); }  
	 EOF 
;

// Rule PLUS
rulePLUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_7 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPLUSAccess().getPlusSignKeyword()); 
    }

    ;





// Entry rule entryRuleMINUS
entryRuleMINUS returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getMINUSRule()); } 
	 iv_ruleMINUS=ruleMINUS 
	 { $current=$iv_ruleMINUS.current.getText(); }  
	 EOF 
;

// Rule MINUS
ruleMINUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_9 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMINUSAccess().getHyphenMinusKeyword()); 
    }

    ;





// Entry rule entryRuleSTAR
entryRuleSTAR returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSTARRule()); } 
	 iv_ruleSTAR=ruleSTAR 
	 { $current=$iv_ruleSTAR.current.getText(); }  
	 EOF 
;

// Rule STAR
ruleSTAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_6 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTARAccess().getAsteriskKeyword()); 
    }

    ;







// Entry rule entryRuleDOLLAR
entryRuleDOLLAR returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDOLLARRule()); } 
	 iv_ruleDOLLAR=ruleDOLLAR 
	 { $current=$iv_ruleDOLLAR.current.getText(); }  
	 EOF 
;

// Rule DOLLAR
ruleDOLLAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=KEYWORD_2 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDOLLARAccess().getDollarSignKeyword()); 
    }

    ;





// Entry rule entryRulegroup_type
entryRulegroup_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getGroup_typeRule()); } 
	 iv_rulegroup_type=rulegroup_type 
	 { $current=$iv_rulegroup_type.current.getText(); }  
	 EOF 
;

// Rule group_type
rulegroup_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getGroup_typeAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRulegroup_item_list
entryRulegroup_item_list returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroup_item_listRule()); }
	 iv_rulegroup_item_list=rulegroup_item_list 
	 { $current=$iv_rulegroup_item_list.current; } 
	 EOF 
;

// Rule group_item_list
rulegroup_item_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGroup_item_listAccess().getGroup_itemParserRuleCall_0()); 
    }
    this_group_item_0=rulegroup_item
    {
        $current = $this_group_item_0.current;
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getGroup_item_listAccess().getCOMMAParserRuleCall_1_0()); 
    }
ruleCOMMA
    {
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroup_item_listAccess().getItemsGroup_itemParserRuleCall_1_1_0()); 
	    }
		lv_items_2_0=rulegroup_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroup_item_listRule());
	        }
       		set(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"group_item");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleorder_by_clause
entryRuleorder_by_clause returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOrder_by_clauseRule()); } 
	 iv_ruleorder_by_clause=ruleorder_by_clause 
	 { $current=$iv_ruleorder_by_clause.current.getText(); }  
	 EOF 
;

// Rule order_by_clause
ruleorder_by_clause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
    { 
        newCompositeNode(grammarAccess.getOrder_by_clauseAccess().getSTARParserRuleCall_0_0()); 
    }
    this_STAR_0=ruleSTAR    {
		$current.merge(this_STAR_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_41 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrder_by_clauseAccess().getASCKeyword_0_1_0()); 
    }

    |
	kw=KEYWORD_48 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrder_by_clauseAccess().getDESCKeyword_0_1_1()); 
    }
)?)
    |
    { 
        newCompositeNode(grammarAccess.getOrder_by_clauseAccess().getOrder_col_listParserRuleCall_1()); 
    }
    this_order_col_list_3=ruleorder_col_list    {
		$current.merge(this_order_col_list_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleorder_col_list
entryRuleorder_col_list returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOrder_col_listRule()); } 
	 iv_ruleorder_col_list=ruleorder_col_list 
	 { $current=$iv_ruleorder_col_list.current.getText(); }  
	 EOF 
;

// Rule order_col_list
ruleorder_col_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getOrder_col_listAccess().getOrder_colParserRuleCall_0()); 
    }
    this_order_col_0=ruleorder_col    {
		$current.merge(this_order_col_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_8 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrder_col_listAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getOrder_col_listAccess().getOrder_colParserRuleCall_1_1()); 
    }
    this_order_col_2=ruleorder_col    {
		$current.merge(this_order_col_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleorder_col
entryRuleorder_col returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOrder_colRule()); } 
	 iv_ruleorder_col=ruleorder_col 
	 { $current=$iv_ruleorder_col.current.getText(); }  
	 EOF 
;

// Rule order_col
ruleorder_col returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
    { 
        newCompositeNode(grammarAccess.getOrder_colAccess().getCol_refParserRuleCall_0_0()); 
    }
    this_col_ref_0=rulecol_ref    {
		$current.merge(this_col_ref_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_41 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrder_colAccess().getASCKeyword_0_1_0()); 
    }

    |
	kw=KEYWORD_48 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrder_colAccess().getDESCKeyword_0_1_1()); 
    }
)?)
    |(
	kw=KEYWORD_4 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrder_colAccess().getLeftParenthesisKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getOrder_colAccess().getCol_refParserRuleCall_1_1()); 
    }
    this_col_ref_4=rulecol_ref    {
		$current.merge(this_col_ref_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=KEYWORD_41 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrder_colAccess().getASCKeyword_1_2_0()); 
    }

    |
	kw=KEYWORD_48 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrder_colAccess().getDESCKeyword_1_2_1()); 
    }
)?
	kw=KEYWORD_5 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOrder_colAccess().getRightParenthesisKeyword_1_3()); 
    }
))
    ;





// Entry rule entryRulepartition_clause
entryRulepartition_clause returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPartition_clauseRule()); } 
	 iv_rulepartition_clause=rulepartition_clause 
	 { $current=$iv_rulepartition_clause.current.getText(); }  
	 EOF 
;

// Rule partition_clause
rulepartition_clause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_91 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPartition_clauseAccess().getPARTITIONKeyword_0()); 
    }

	kw=KEYWORD_29 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPartition_clauseAccess().getBYKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getPartition_clauseAccess().getFuncNameParserRuleCall_2()); 
    }
    this_FuncName_2=ruleFuncName    {
		$current.merge(this_FuncName_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulerel_list
entryRulerel_list returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRel_listRule()); }
	 iv_rulerel_list=rulerel_list 
	 { $current=$iv_rulerel_list.current; } 
	 EOF 
;

// Rule rel_list
rulerel_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRel_listAccess().getTypeAliasTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRel_listRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=KEYWORD_8
    {
    	newLeafNode(otherlv_1, grammarAccess.getRel_listAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRel_listAccess().getTypeAliasTypeParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRel_listRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulejoin_type
entryRulejoin_type returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getJoin_typeRule()); } 
	 iv_rulejoin_type=rulejoin_type 
	 { $current=$iv_rulejoin_type.current.getText(); }  
	 EOF 
;

// Rule join_type
rulejoin_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getJoin_typeAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRulejoin_sub_clause
entryRulejoin_sub_clause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJoin_sub_clauseRule()); }
	 iv_rulejoin_sub_clause=rulejoin_sub_clause 
	 { $current=$iv_rulejoin_sub_clause.current; } 
	 EOF 
;

// Rule join_sub_clause
rulejoin_sub_clause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJoin_sub_clauseAccess().getJoin_itemParserRuleCall_0()); 
    }
    this_join_item_0=rulejoin_item
    {
        $current = $this_join_item_0.current;
        afterParserOrEnumRuleCall();
    }
(
	otherlv_1=KEYWORD_53
    {
    	newLeafNode(otherlv_1, grammarAccess.getJoin_sub_clauseAccess().getLEFTKeyword_1_0());
    }

    |
	otherlv_2=KEYWORD_65
    {
    	newLeafNode(otherlv_2, grammarAccess.getJoin_sub_clauseAccess().getRIGHTKeyword_1_1());
    }

    |
	otherlv_3=KEYWORD_50
    {
    	newLeafNode(otherlv_3, grammarAccess.getJoin_sub_clauseAccess().getFULLKeyword_1_2());
    }
)?(
	otherlv_4=KEYWORD_64
    {
    	newLeafNode(otherlv_4, grammarAccess.getJoin_sub_clauseAccess().getOUTERKeyword_2());
    }
)?(
	otherlv_5=KEYWORD_8
    {
    	newLeafNode(otherlv_5, grammarAccess.getJoin_sub_clauseAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoin_sub_clauseAccess().getOthersJoin_itemParserRuleCall_3_1_0()); 
	    }
		lv_others_6_0=rulejoin_item		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoin_sub_clauseRule());
	        }
       		set(
       			$current, 
       			"others",
        		lv_others_6_0, 
        		"join_item");
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRulejoin_item
entryRulejoin_item returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJoin_itemRule()); }
	 iv_rulejoin_item=rulejoin_item 
	 { $current=$iv_rulejoin_item.current; } 
	 EOF 
;

// Rule join_item
rulejoin_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJoin_itemAccess().getTypeAliasTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleAliasType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoin_itemRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"AliasType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJoin_itemAccess().getExpressionsJoin_group_by_clauseParserRuleCall_1_0()); 
	    }
		lv_expressions_1_0=rulejoin_group_by_clause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoin_itemRule());
	        }
       		set(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"join_group_by_clause");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulegroup_item
entryRulegroup_item returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroup_itemRule()); }
	 iv_rulegroup_item=rulegroup_item 
	 { $current=$iv_rulegroup_item.current; } 
	 EOF 
;

// Rule group_item
rulegroup_item returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	otherlv_0=KEYWORD_29
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroup_itemAccess().getBYKeyword_0_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getGroup_itemAccess().getJoin_group_by_expr_listParserRuleCall_0_0_1()); 
    }
    this_join_group_by_expr_list_1=rulejoin_group_by_expr_list
    {
        $current = $this_join_group_by_expr_list_1.current;
        afterParserOrEnumRuleCall();
    }
)
    |
	otherlv_2=KEYWORD_38
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroup_itemAccess().getALLKeyword_0_1());
    }

    |
	otherlv_3=KEYWORD_40
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroup_itemAccess().getANYKeyword_0_2());
    }
)(
	otherlv_4=KEYWORD_60
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroup_itemAccess().getINNERKeyword_1_0());
    }

    |
	otherlv_5=KEYWORD_64
    {
    	newLeafNode(otherlv_5, grammarAccess.getGroup_itemAccess().getOUTERKeyword_1_1());
    }
)?)
;





// Entry rule entryRulejoin_group_by_clause
entryRulejoin_group_by_clause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJoin_group_by_clauseRule()); }
	 iv_rulejoin_group_by_clause=rulejoin_group_by_clause 
	 { $current=$iv_rulejoin_group_by_clause.current; } 
	 EOF 
;

// Rule join_group_by_clause
rulejoin_group_by_clause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_29
    {
    	newLeafNode(otherlv_0, grammarAccess.getJoin_group_by_clauseAccess().getBYKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getJoin_group_by_clauseAccess().getJoin_group_by_expr_listParserRuleCall_1()); 
    }
    this_join_group_by_expr_list_1=rulejoin_group_by_expr_list
    {
        $current = $this_join_group_by_expr_list_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulejoin_group_by_expr_list
entryRulejoin_group_by_expr_list returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJoin_group_by_expr_listRule()); }
	 iv_rulejoin_group_by_expr_list=rulejoin_group_by_expr_list 
	 { $current=$iv_rulejoin_group_by_expr_list.current; } 
	 EOF 
;

// Rule join_group_by_expr_list
rulejoin_group_by_expr_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJoin_group_by_expr_listAccess().getJoin_group_by_exprParserRuleCall_0()); 
    }
    this_join_group_by_expr_0=rulejoin_group_by_expr
    {
        $current = $this_join_group_by_expr_0.current;
        afterParserOrEnumRuleCall();
    }

    |(
	otherlv_1=KEYWORD_4
    {
    	newLeafNode(otherlv_1, grammarAccess.getJoin_group_by_expr_listAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoin_group_by_expr_listAccess().getLeftJoin_group_by_exprParserRuleCall_1_1_0()); 
	    }
		lv_left_2_0=rulejoin_group_by_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoin_group_by_expr_listRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"join_group_by_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=KEYWORD_8
    {
    	newLeafNode(otherlv_3, grammarAccess.getJoin_group_by_expr_listAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJoin_group_by_expr_listAccess().getExpressionsJoin_group_by_exprParserRuleCall_1_2_1_0()); 
	    }
		lv_expressions_4_0=rulejoin_group_by_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJoin_group_by_expr_listRule());
	        }
       		set(
       			$current, 
       			"expressions",
        		lv_expressions_4_0, 
        		"join_group_by_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=KEYWORD_5
    {
    	newLeafNode(otherlv_5, grammarAccess.getJoin_group_by_expr_listAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRulejoin_group_by_expr
entryRulejoin_group_by_expr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJoin_group_by_exprRule()); }
	 iv_rulejoin_group_by_expr=rulejoin_group_by_expr 
	 { $current=$iv_rulejoin_group_by_expr.current; } 
	 EOF 
;

// Rule join_group_by_expr
rulejoin_group_by_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJoin_group_by_exprAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    {
        $current = $this_Expression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJoin_group_by_exprAccess().getSTARParserRuleCall_1()); 
    }
ruleSTAR
    {
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulenested_blk
entryRulenested_blk returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNested_blkRule()); }
	 iv_rulenested_blk=rulenested_blk 
	 { $current=$iv_rulenested_blk.current; } 
	 EOF 
;

// Rule nested_blk
rulenested_blk returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_21
    {
    	newLeafNode(otherlv_0, grammarAccess.getNested_blkAccess().getLeftCurlyBracketKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getNested_blkAccess().getNested_command_listParserRuleCall_1()); 
    }
    this_nested_command_list_1=rulenested_command_list
    {
        $current = $this_nested_command_list_1.current;
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNested_blkAccess().getClausesGenerate_clauseParserRuleCall_2_0()); 
	    }
		lv_clauses_2_0=rulegenerate_clause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNested_blkRule());
	        }
       		set(
       			$current, 
       			"clauses",
        		lv_clauses_2_0, 
        		"generate_clause");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=KEYWORD_13
    {
    	newLeafNode(otherlv_3, grammarAccess.getNested_blkAccess().getSemicolonKeyword_3());
    }

	otherlv_4=KEYWORD_22
    {
    	newLeafNode(otherlv_4, grammarAccess.getNested_blkAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRulegenerate_clause
entryRulegenerate_clause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGenerate_clauseRule()); }
	 iv_rulegenerate_clause=rulegenerate_clause 
	 { $current=$iv_rulegenerate_clause.current; } 
	 EOF 
;

// Rule generate_clause
rulegenerate_clause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_85
    {
    	newLeafNode(otherlv_0, grammarAccess.getGenerate_clauseAccess().getGENERATEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenerate_clauseAccess().getItemsFlattenGeneratedItemParserRuleCall_1_0()); 
	    }
		lv_items_1_0=ruleFlattenGeneratedItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenerate_clauseRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_1_0, 
        		"FlattenGeneratedItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=KEYWORD_8
    {
    	newLeafNode(otherlv_2, grammarAccess.getGenerate_clauseAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenerate_clauseAccess().getItemsFlattenGeneratedItemParserRuleCall_2_1_0()); 
	    }
		lv_items_3_0=ruleFlattenGeneratedItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenerate_clauseRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_3_0, 
        		"FlattenGeneratedItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulenested_command_list
entryRulenested_command_list returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNested_command_listRule()); }
	 iv_rulenested_command_list=rulenested_command_list 
	 { $current=$iv_rulenested_command_list.current; } 
	 EOF 
;

// Rule nested_command_list
rulenested_command_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNested_command_listAccess().getNested_command_listAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getNested_command_listAccess().getCmdsNested_commandParserRuleCall_1_0_0()); 
	    }
		lv_cmds_1_0=rulenested_command		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNested_command_listRule());
	        }
       		add(
       			$current, 
       			"cmds",
        		lv_cmds_1_0, 
        		"nested_command");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getNested_command_listAccess().getSEMI_COLONParserRuleCall_1_1()); 
    }
ruleSEMI_COLON
    {
        afterParserOrEnumRuleCall();
    }
)*)
;





// Entry rule entryRulenested_command
entryRulenested_command returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNested_commandRule()); }
	 iv_rulenested_command=rulenested_command 
	 { $current=$iv_rulenested_command.current; } 
	 EOF 
;

// Rule nested_command
rulenested_command returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNested_commandAccess().getAliasParserRuleCall_0()); 
    }
ruleAlias
    {
        afterParserOrEnumRuleCall();
    }

	otherlv_1=KEYWORD_15
    {
    	newLeafNode(otherlv_1, grammarAccess.getNested_commandAccess().getEqualsSignKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getNested_commandAccess().getNested_opParserRuleCall_2()); 
    }
    this_nested_op_2=rulenested_op
    {
        $current = $this_nested_op_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulenested_op
entryRulenested_op returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNested_opRule()); }
	 iv_rulenested_op=rulenested_op 
	 { $current=$iv_rulenested_op.current; } 
	 EOF 
;

// Rule nested_op
rulenested_op returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNested_opAccess().getNestedFilterParserRuleCall_0()); 
    }
    this_NestedFilter_0=ruleNestedFilter
    {
        $current = $this_NestedFilter_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNested_opAccess().getNested_sortParserRuleCall_1()); 
    }
    this_nested_sort_1=rulenested_sort
    {
        $current = $this_nested_sort_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNested_opAccess().getNested_distinctParserRuleCall_2()); 
    }
    this_nested_distinct_2=rulenested_distinct
    {
        $current = $this_nested_distinct_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNested_opAccess().getNested_limitParserRuleCall_3()); 
    }
    this_nested_limit_3=rulenested_limit
    {
        $current = $this_nested_limit_3.current;
        afterParserOrEnumRuleCall();
    }

    |((
	otherlv_4=KEYWORD_4
    {
    	newLeafNode(otherlv_4, grammarAccess.getNested_opAccess().getLeftParenthesisKeyword_4_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getNested_opAccess().getTypeParserRuleCall_4_0_1()); 
    }
ruleType
    {
        afterParserOrEnumRuleCall();
    }

	otherlv_6=KEYWORD_5
    {
    	newLeafNode(otherlv_6, grammarAccess.getNested_opAccess().getRightParenthesisKeyword_4_0_2());
    }
)?
    { 
        newCompositeNode(grammarAccess.getNested_opAccess().getAddExpressionParserRuleCall_4_1()); 
    }
    this_AddExpression_7=ruleAddExpression
    {
        $current = $this_AddExpression_7.current;
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleNestedFilter
entryRuleNestedFilter returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNestedFilterRule()); }
	 iv_ruleNestedFilter=ruleNestedFilter 
	 { $current=$iv_ruleNestedFilter.current; } 
	 EOF 
;

// Rule NestedFilter
ruleNestedFilter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_73
    {
    	newLeafNode(otherlv_0, grammarAccess.getNestedFilterAccess().getFILTERKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedFilterAccess().getExpVar_exprParserRuleCall_1_0()); 
	    }
		lv_exp_1_0=rulevar_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedFilterRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_1_0, 
        		"var_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=KEYWORD_29
    {
    	newLeafNode(otherlv_2, grammarAccess.getNestedFilterAccess().getBYKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedFilterAccess().getCondConditionParserRuleCall_3_0()); 
	    }
		lv_cond_3_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedFilterRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_3_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulenested_sort
entryRulenested_sort returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNested_sortRule()); }
	 iv_rulenested_sort=rulenested_sort 
	 { $current=$iv_rulenested_sort.current; } 
	 EOF 
;

// Rule nested_sort
rulenested_sort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_63
    {
    	newLeafNode(otherlv_0, grammarAccess.getNested_sortAccess().getORDERKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getNested_sortAccess().getVar_exprParserRuleCall_1()); 
    }
    this_var_expr_1=rulevar_expr
    {
        $current = $this_var_expr_1.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_2=KEYWORD_29
    {
    	newLeafNode(otherlv_2, grammarAccess.getNested_sortAccess().getBYKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getNested_sortAccess().getOrder_by_clauseParserRuleCall_3()); 
    }
ruleorder_by_clause
    {
        afterParserOrEnumRuleCall();
    }
(
	otherlv_4=KEYWORD_70
    {
    	newLeafNode(otherlv_4, grammarAccess.getNested_sortAccess().getUSINGKeyword_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getNested_sortAccess().getFuncClauseParserRuleCall_4_1()); 
    }
ruleFuncClause
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRulenested_distinct
entryRulenested_distinct returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNested_distinctRule()); }
	 iv_rulenested_distinct=rulenested_distinct 
	 { $current=$iv_rulenested_distinct.current; } 
	 EOF 
;

// Rule nested_distinct
rulenested_distinct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_84
    {
    	newLeafNode(otherlv_0, grammarAccess.getNested_distinctAccess().getDISTINCTKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getNested_distinctAccess().getVar_exprParserRuleCall_1()); 
    }
    this_var_expr_1=rulevar_expr
    {
        $current = $this_var_expr_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulenested_limit
entryRulenested_limit returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNested_limitRule()); }
	 iv_rulenested_limit=rulenested_limit 
	 { $current=$iv_rulenested_limit.current; } 
	 EOF 
;

// Rule nested_limit
rulenested_limit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=KEYWORD_61
    {
    	newLeafNode(otherlv_0, grammarAccess.getNested_limitAccess().getLIMITKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getNested_limitAccess().getVar_exprParserRuleCall_1()); 
    }
    this_var_expr_1=rulevar_expr
    {
        $current = $this_var_expr_1.current;
        afterParserOrEnumRuleCall();
    }
(this_INT_2=RULE_INT
    { 
    newLeafNode(this_INT_2, grammarAccess.getNested_limitAccess().getINTTerminalRuleCall_2_0()); 
    }

    |this_LONGINTEGER_3=RULE_LONGINTEGER
    { 
    newLeafNode(this_LONGINTEGER_3, grammarAccess.getNested_limitAccess().getLONGINTEGERTerminalRuleCall_2_1()); 
    }
))
;





// Entry rule entryRulesplit_branch
entryRulesplit_branch returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSplit_branchRule()); }
	 iv_rulesplit_branch=rulesplit_branch 
	 { $current=$iv_rulesplit_branch.current; } 
	 EOF 
;

// Rule split_branch
rulesplit_branch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSplit_branchAccess().getIDENTIFIERParserRuleCall_0()); 
    }
ruleIDENTIFIER
    {
        afterParserOrEnumRuleCall();
    }

	otherlv_1=KEYWORD_32
    {
    	newLeafNode(otherlv_1, grammarAccess.getSplit_branchAccess().getIFKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getSplit_branchAccess().getConditionParserRuleCall_2()); 
    }
    this_Condition_2=ruleCondition
    {
        $current = $this_Condition_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulecol_ref
entryRulecol_ref returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getCol_refRule()); } 
	 iv_rulecol_ref=rulecol_ref 
	 { $current=$iv_rulecol_ref.current.getText(); }  
	 EOF 
;

// Rule col_ref
rulecol_ref returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getCol_refAccess().getAlias_col_refParserRuleCall_0()); 
    }
    this_alias_col_ref_0=rulealias_col_ref    {
		$current.merge(this_alias_col_ref_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCol_refAccess().getDollar_col_refParserRuleCall_1()); 
    }
    this_dollar_col_ref_1=ruledollar_col_ref    {
		$current.merge(this_dollar_col_ref_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulealias_col_ref
entryRulealias_col_ref returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAlias_col_refRule()); } 
	 iv_rulealias_col_ref=rulealias_col_ref 
	 { $current=$iv_rulealias_col_ref.current.getText(); }  
	 EOF 
;

// Rule alias_col_ref
rulealias_col_ref returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=KEYWORD_59 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAlias_col_refAccess().getGROUPKeyword_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getAlias_col_refAccess().getIDENTIFIERParserRuleCall_1()); 
    }
    this_IDENTIFIER_1=ruleIDENTIFIER    {
		$current.merge(this_IDENTIFIER_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuledollar_col_ref
entryRuledollar_col_ref returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDollar_col_refRule()); } 
	 iv_ruledollar_col_ref=ruledollar_col_ref 
	 { $current=$iv_ruledollar_col_ref.current.getText(); }  
	 EOF 
;

// Rule dollar_col_ref
ruledollar_col_ref returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getDollar_col_refAccess().getDOLLARParserRuleCall_0()); 
    }
    this_DOLLAR_0=ruleDOLLAR    {
		$current.merge(this_DOLLAR_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getDollar_col_refAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleconst_expr
entryRuleconst_expr returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getConst_exprRule()); } 
	 iv_ruleconst_expr=ruleconst_expr 
	 { $current=$iv_ruleconst_expr.current.getText(); }  
	 EOF 
;

// Rule const_expr
ruleconst_expr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

    { 
        newCompositeNode(grammarAccess.getConst_exprAccess().getLiteralParserRuleCall()); 
    }
    this_literal_0=ruleliteral    {
		$current.merge(this_literal_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleliteral
entryRuleliteral returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleliteral=ruleliteral 
	 { $current=$iv_ruleliteral.current.getText(); }  
	 EOF 
;

// Rule literal
ruleliteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getScalarParserRuleCall_0()); 
    }
    this_scalar_0=rulescalar    {
		$current.merge(this_scalar_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1()); 
    }

    |
	kw=KEYWORD_37 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getUKeyword_2()); 
    }

    |
	kw=KEYWORD_56 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getNULLKeyword_3()); 
    }
)
    ;





// Entry rule entryRulescalar
entryRulescalar returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getScalarRule()); } 
	 iv_rulescalar=rulescalar 
	 { $current=$iv_rulescalar.current.getText(); }  
	 EOF 
;

// Rule scalar
rulescalar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_FLOATINGPOINT_0=RULE_FLOATINGPOINT    {
		$current.merge(this_FLOATINGPOINT_0);
    }

    { 
    newLeafNode(this_FLOATINGPOINT_0, grammarAccess.getScalarAccess().getFLOATINGPOINTTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getScalarAccess().getScalarIntParserRuleCall_1()); 
    }
    this_scalarInt_1=rulescalarInt    {
		$current.merge(this_scalarInt_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulescalarInt
entryRulescalarInt returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getScalarIntRule()); } 
	 iv_rulescalarInt=rulescalarInt 
	 { $current=$iv_rulescalarInt.current.getText(); }  
	 EOF 
;

// Rule scalarInt
rulescalarInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_DIGIT_0=RULE_DIGIT    {
		$current.merge(this_DIGIT_0);
    }

    { 
    newLeafNode(this_DIGIT_0, grammarAccess.getScalarIntAccess().getDIGITTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getScalarIntAccess().getINTTerminalRuleCall_1()); 
    }

    |    this_LONGINTEGER_2=RULE_LONGINTEGER    {
		$current.merge(this_LONGINTEGER_2);
    }

    { 
    newLeafNode(this_LONGINTEGER_2, grammarAccess.getScalarIntAccess().getLONGINTEGERTerminalRuleCall_2()); 
    }

    |(
	kw=KEYWORD_2 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getScalarIntAccess().getDollarSignKeyword_3_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getScalarIntAccess().getIDTerminalRuleCall_3_1()); 
    }
))
    ;





