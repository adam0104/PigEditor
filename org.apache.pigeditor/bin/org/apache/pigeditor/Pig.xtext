grammar org.apache.pigeditor.Pig with org.eclipse.xtext.common.Terminals

generate pig "http://www.apache.org/pigeditor/Pig"


Query :
    (elements+=Statement)*;

Statement : 
    (DefineStatement |
     LoadStatement |
	 (ForeachStatement |
	  FilterStatement |
	  GroupByStatement |
	  OrderStatement |
	  LimitStatement |
	  DistinctStatement |
	  CrossStatement |
	  JoinStatement |
	  CoGroupByStatement |
	  StreamStatement ) ParallelClause? |
     MrStatement |
     SplitStatement |
     UnionStatement |
     SampleStatement |
     StoreStatement |
     DumpStatement |
     DescribeStatement |
     ExplainStatement) ';' |
     CommentStatement
;


DefineStatement :
    RegisterClause | 
    DefineClause |
    DefaultClause |
    DeclareClause
;

LoadStatement :
    name=Alias '=' 'LOAD' STRING LoadUsing? AsClause?
;

ForeachStatement :
    name=Alias '=' 'FOREACH' type=AliasType 
                    (items+=nested_blk ';'? | items+=generate_clause) 
;

FilterStatement :
    name=Alias '=' 'FILTER' type=AliasType 
                   'BY' cond=Condition 
;

GroupByStatement :
    name=Alias '=' 'GROUP' type=AliasType 
                   items=group_item_list ( 'USING' group_type )? partition_clause? 
;

CoGroupByStatement :
    name=Alias '=' 'COGROUP' aliases=join_sub_clause ( 'USING' COGROUP_TYPE )? partition_clause? 
;

terminal COGROUP_TYPE :
    "'" ( ('merge') ) "'"
;

OrderStatement : 
    name=Alias '=' 'ORDER' type=AliasType  'BY' order_by_clause ( 'USING' FuncClause )?
;

CrossStatement : 
    name=Alias '=' 'CROSS' aliases=rel_list partition_clause?
;

UnionStatement : 
    name=Alias '=' 'UNION' 'ON' aliases=rel_list
;

JoinStatement : 
     name=Alias '=' 'JOIN' aliases=join_sub_clause ( 'USING' join_type )? partition_clause?
;

LimitStatement : 
    name=Alias '=' 'LIMIT' type=AliasType scalarInt
;

SampleStatement : 
    name=Alias '=' 'SAMPLE' type=AliasType DOUBLENUMBER
;

DistinctStatement : 
    name=Alias '=' 'DISTINCT' type=AliasType partition_clause?
;

StreamStatement : 
    name=Alias '=' 'STREAM' type=AliasType 'THROUGH' ( EXECCOMMAND | IDENTIFIER ) AsClause?
;

MrStatement : 
    name=Alias '=' 'MAPREDUCE' STRING StoreStatement load=LoadStatement EXECCOMMAND?
;

SplitStatement : 
    name=Alias '=' 'SPLIT' type=AliasType  'INTO' branches+=split_branch ( ',' branches+=split_branch )+
;

StoreStatement :
    'STORE' type=AliasType 'INTO' STRING ( 'USING' FuncClause )?
;

DescribeStatement : 
    'DESCRIBE' type=AliasType
;

ExplainStatement : 
    'EXPLAIN' type=AliasType
;

DumpStatement : 
    'DUMP' type=AliasType
;



Condition returns Condition: 
    ( '(' Type ')' )? OrCondition
;

OrCondition returns Condition: 
    AndCondition ({OrCondition.left=current} 'OR' right=AndCondition )*
;

AndCondition returns Condition: 
    UnaryCondition ({AndCondition.left=current} 'AND' right=UnaryCondition )*
;

UnaryCondition returns Condition: 
    // - / % + 0.0
    '(' Condition ('?' leftExp=Condition ':' rightExp=Condition)? ')' ({UnaryCondition.left=current} '+' right=Condition)? |    
    //null_check_cond | // to LL refactor
    TE ({UnaryCondition.left=current} rel_op right=TE)? 
;

TE returns Condition:
    Expression ('IS' 'NOT'? 'NULL')?
;

func_eval: 
    FuncName {func_eval} '(' arg_list=real_arg_list? ')'
;

real_arg_list : 
    args+=real_arg ( ',' args+=real_arg )* 
;

real_arg : 
    Condition | STAR
;

Expression returns Expression: 
    'NOT'? AddExpression
;

AddExpression returns Expression: 
    multi_expr ( ( PLUS | MINUS ) mul_exp=multi_expr )*
;

multi_expr returns Expression: 
    cast_expr ( ( STAR | DIV | PERCENT ) mul_cast=cast_expr )*
;

cast_expr returns Expression:
    unary_expr    
;

unary_expr returns Expression:  
     expr_eval | neg_expr
;

expr_eval returns Expression: 
    const_expr | var_expr
;

var_expr : 
    projectable_expr ( dot_proj | pound_proj )*
;

projectable_expr : 
   func_eval | 
    col_ref
;

dot_proj : 
    ('.' | '::') (  col_alias_or_index )
;

col_alias_or_index : 
    col_alias | col_index
;

col_alias : 
    IDENTIFIER
;

col_index : DOLLAR (DIGIT | INT)
;

pound_proj : POUND ( STRING | 'NULL' )
;

bin_expr: 
    '(' Condition '?' leftExp=Expression ':' rightExp=Expression ')'
;

neg_expr returns Expression : 
    '-' cast_expr
;

rel_op :   
rel_op_eq
       | rel_op_ne
       | rel_op_gt
       | rel_op_gte
       | rel_op_lt
       | rel_op_lte
       | 'MATCHES'
;

rel_op_eq : STR_OP_EQ | NUM_OP_EQ
;

rel_op_ne : STR_OP_NE | NUM_OP_NE
;

rel_op_gt : STR_OP_GT | NUM_OP_GT
;

rel_op_gte : STR_OP_GTE | NUM_OP_GTE
;

rel_op_lt : STR_OP_LT | NUM_OP_LT
;

rel_op_lte : STR_OP_LTE | NUM_OP_LTE
;

AliasType :
    referenced=[Statement]
;

FlattenGeneratedItem : 
   (Condition | '*') ( 'AS' ( FieldDef | FieldFefList ) )?
;

CommentStatement :
    SL_COMMENT
;

Alias : 
    ID
;

ParallelClause : 
     'PARALLEL' scalarInt;


RegisterClause : 
    'REGISTER' PathClause
;

DefaultClause : 
    '%DEFAULT' name=Alias STRING
;

DeclareClause : 
    '%DECLARE' name=Alias STRING
;

DefineClause : 
    'DEFINE' name=Alias FuncClause
;

LoadUsing : 
    'USING' FuncClause
;

FuncClause : 
    FuncName '(' STRING? (',' STRING)* ')'
;

FuncName :
    (ID | '.' | '$')+ 
;

PathClause :
    ('ALL' | scalar | ID | '.' | '$' | '/' | '\\' | '-')+
;

AsClause:
    'AS' (AliasDef | AliasDefList)
;

AliasDef:
    Alias (':' Type)?
;

AliasDefList:
    '(' AliasDef ( ',' AliasDef )* ')'
;     

IDENTIFIER: 
    ID //LETTER ( DIGIT | LETTER | SPECIALCHAR )*
;

FieldDef :
    IDENTIFIER ( ':' Type )?
;

FieldFefList : 
    '(' FieldDef ( ',' FieldDef )* ')'
;    

Type : 
    SimpleType | TupleType | MapType | bag_type 
;

SimpleType : 
    'INT' |
    'LONG' | 
    'FLOAT' | 
    'DOUBLE' | 
    'CHARARRAY' | 
    'BYTEARRAY'
;

TupleType : 
    'TUPLE'? AliasDefList
;

bag_type : 
    'BAG'? '{' ( ( IDENTIFIER ':' )? TupleType )? '}'
;

MapType : 
    'MAP[]'
;

Cmd : 
    EXECCOMMAND //( ship_clause | cache_caluse | input_clause | output_clause | error_clause )*
;

terminal SL_COMMENT  : '--' ! ('\n' | '\r')* ('\r'? '\n')?;


STR_OP_EQ : 'EQ'
;

STR_OP_GT : 'GT'
;

STR_OP_LT : 'LT'
;

STR_OP_GTE : 'GTE'
;

STR_OP_LTE : 'LTE'
;

STR_OP_NE : 'NEQ'
;

STR_OP_MATCHES : 'MATCHES'
;
    
NUM_OP_EQ : '=='
;

NUM_OP_LT : '<'
;

NUM_OP_LTE : '<='
;

NUM_OP_GT : '>'
;

NUM_OP_GTE : '>=' 
;

NUM_OP_NE : '!='
;


SEMI_COLON : ';'
;
    
LEFT_PAREN : '('
;
    
RIGHT_PAREN : ')'
;

LEFT_CURLY : '{'
;

RIGHT_CURLY : '}'
;

LEFT_BRACKET : '['
;
    
RIGHT_BRACKET : ']'
;

POUND : '#'
;

EQUAL : '=';

COMMA : ','
;

PERIOD : '.'
;

DIV : '/'
;

PERCENT : '%'
;

PLUS : '+'
;

MINUS : '-'
;
    
terminal DIGIT : '0'..'9'
;

terminal  LETTER : 'A'..'Z'
;
    
terminal  SPECIALCHAR : '_'
;

terminal FLOATINGPOINT : 
    DIGIT+ '.' DIGIT+
;
    
terminal LONGINTEGER: 
    INT ( 'L' )//? INT with > N digits
;
    
terminal DOUBLENUMBER : 
    FLOATINGPOINT ( 'E' ( '-' | '+' )? INT )?
;

terminal EXECCOMMAND : '`' ( !( '`' ) )* '`';

    
STAR : 
    '*'
;

COLON : 
    ':'
;

DOLLAR : 
    '$'
;

group_type :
    STRING
;

group_item_list : 
    group_item ( COMMA items=group_item )*
;

order_by_clause : 
    STAR ( 'ASC' | 'DESC' )? |
    order_col_list
;

order_col_list : 
    order_col ( ',' order_col )*
;

order_col : 
     col_ref ( 'ASC' | 'DESC' )? | 
     '(' col_ref ( 'ASC' | 'DESC' )? ')'
;

partition_clause : 
    'PARTITION' 'BY' FuncName
;

rel_list : 
    type=AliasType ( ',' type=AliasType )*
;

join_type :
    STRING
;

join_sub_clause : 
    join_item ( 'LEFT' | 'RIGHT' | 'FULL' )? 'OUTER'? ( ',' others=join_item )+
;

join_item : 
    type=AliasType expressions=join_group_by_clause    
;

group_item : 
    ('BY' join_group_by_expr_list | 'ALL' | 'ANY' ) ( 'INNER' | 'OUTER' )?
;

join_group_by_clause : 'BY' join_group_by_expr_list
;

join_group_by_expr_list : 
       join_group_by_expr |
      '(' left=join_group_by_expr ( ',' expressions=join_group_by_expr )* ')'
;

join_group_by_expr : 
    Expression | STAR
;

nested_blk : 
    '{' nested_command_list clauses=generate_clause ';' '}'
;

generate_clause : 
    'GENERATE' items+=FlattenGeneratedItem ( ',' items+=FlattenGeneratedItem )* 
;

nested_command_list : 
    {nested_command_list} (cmds+=nested_command SEMI_COLON)* 
;

nested_command : 
    Alias '=' nested_op
;

nested_op : // TODO some warning comes from here          
          NestedFilter | 
          nested_sort | 
          nested_distinct | 
          nested_limit | 
          ( '(' Type ')' )? AddExpression
;

NestedFilter : 
    'FILTER' exp=var_expr 'BY' cond=Condition
;

nested_sort : 
    'ORDER' var_expr 'BY' order_by_clause ( 'USING' FuncClause )?
;

nested_distinct : 
    'DISTINCT' var_expr
;

nested_limit : 
    'LIMIT' var_expr (INT | LONGINTEGER)
;

split_branch : 
    IDENTIFIER 'IF' Condition
;

col_ref : 
    alias_col_ref | dollar_col_ref
;

alias_col_ref : 
    'GROUP' | IDENTIFIER
;

dollar_col_ref : 
    DOLLAR INT
;

const_expr : 
    literal
;

literal : 
    scalar | STRING | '\\u' | 'NULL' //| map | bag | tuple // const type?
;

scalar : 
    FLOATINGPOINT | scalarInt //INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | MYQUOTEDSTRING | NULL
;

scalarInt : 
    DIGIT | INT | LONGINTEGER | ('$' ID) // TODO warning
;

