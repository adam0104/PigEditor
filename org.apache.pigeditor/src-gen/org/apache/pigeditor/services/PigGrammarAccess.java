/*
* generated by Xtext
*/

package org.apache.pigeditor.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PigGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsStatementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		/// *
		// * Grammar heavily borrowed from Pig and adapted to Xtext. 
		// * 
		// * There are a few conflicts to solve.
		// * / Query:
		//	elements+=Statement*;
		public ParserRule getRule() { return rule; }

		//elements+=Statement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Statement
		public RuleCall getElementsStatementParserRuleCall_0() { return cElementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cDefineStatementParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cLoadStatementParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cAlternatives_0_0.eContents().get(2);
		private final Alternatives cAlternatives_0_0_2_0 = (Alternatives)cGroup_0_0_2.eContents().get(0);
		private final RuleCall cForeachStatementParserRuleCall_0_0_2_0_0 = (RuleCall)cAlternatives_0_0_2_0.eContents().get(0);
		private final RuleCall cFilterStatementParserRuleCall_0_0_2_0_1 = (RuleCall)cAlternatives_0_0_2_0.eContents().get(1);
		private final RuleCall cGroupByStatementParserRuleCall_0_0_2_0_2 = (RuleCall)cAlternatives_0_0_2_0.eContents().get(2);
		private final RuleCall cOrderStatementParserRuleCall_0_0_2_0_3 = (RuleCall)cAlternatives_0_0_2_0.eContents().get(3);
		private final RuleCall cLimitStatementParserRuleCall_0_0_2_0_4 = (RuleCall)cAlternatives_0_0_2_0.eContents().get(4);
		private final RuleCall cDistinctStatementParserRuleCall_0_0_2_0_5 = (RuleCall)cAlternatives_0_0_2_0.eContents().get(5);
		private final RuleCall cCrossStatementParserRuleCall_0_0_2_0_6 = (RuleCall)cAlternatives_0_0_2_0.eContents().get(6);
		private final RuleCall cJoinStatementParserRuleCall_0_0_2_0_7 = (RuleCall)cAlternatives_0_0_2_0.eContents().get(7);
		private final RuleCall cCoGroupByStatementParserRuleCall_0_0_2_0_8 = (RuleCall)cAlternatives_0_0_2_0.eContents().get(8);
		private final RuleCall cStreamStatementParserRuleCall_0_0_2_0_9 = (RuleCall)cAlternatives_0_0_2_0.eContents().get(9);
		private final RuleCall cParallelClauseParserRuleCall_0_0_2_1 = (RuleCall)cGroup_0_0_2.eContents().get(1);
		private final RuleCall cMrStatementParserRuleCall_0_0_3 = (RuleCall)cAlternatives_0_0.eContents().get(3);
		private final RuleCall cSplitStatementParserRuleCall_0_0_4 = (RuleCall)cAlternatives_0_0.eContents().get(4);
		private final RuleCall cUnionStatementParserRuleCall_0_0_5 = (RuleCall)cAlternatives_0_0.eContents().get(5);
		private final RuleCall cSampleStatementParserRuleCall_0_0_6 = (RuleCall)cAlternatives_0_0.eContents().get(6);
		private final RuleCall cStoreStatementParserRuleCall_0_0_7 = (RuleCall)cAlternatives_0_0.eContents().get(7);
		private final RuleCall cDumpStatementParserRuleCall_0_0_8 = (RuleCall)cAlternatives_0_0.eContents().get(8);
		private final RuleCall cDescribeStatementParserRuleCall_0_0_9 = (RuleCall)cAlternatives_0_0.eContents().get(9);
		private final RuleCall cExplainStatementParserRuleCall_0_0_10 = (RuleCall)cAlternatives_0_0.eContents().get(10);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cDeclareClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommentStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	(DefineStatement | LoadStatement | (ForeachStatement | FilterStatement | GroupByStatement | OrderStatement |
		//	LimitStatement | DistinctStatement | CrossStatement | JoinStatement | CoGroupByStatement | StreamStatement)
		//	ParallelClause? | MrStatement | SplitStatement | UnionStatement | SampleStatement | StoreStatement | DumpStatement |
		//	DescribeStatement | ExplainStatement) ";" | DeclareClause | CommentStatement;
		public ParserRule getRule() { return rule; }

		//(DefineStatement | LoadStatement | (ForeachStatement | FilterStatement | GroupByStatement | OrderStatement |
		//LimitStatement | DistinctStatement | CrossStatement | JoinStatement | CoGroupByStatement | StreamStatement)
		//ParallelClause? | MrStatement | SplitStatement | UnionStatement | SampleStatement | StoreStatement | DumpStatement |
		//DescribeStatement | ExplainStatement) ";" | DeclareClause | CommentStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//(DefineStatement | LoadStatement | (ForeachStatement | FilterStatement | GroupByStatement | OrderStatement |
		//LimitStatement | DistinctStatement | CrossStatement | JoinStatement | CoGroupByStatement | StreamStatement)
		//ParallelClause? | MrStatement | SplitStatement | UnionStatement | SampleStatement | StoreStatement | DumpStatement |
		//DescribeStatement | ExplainStatement) ";"
		public Group getGroup_0() { return cGroup_0; }

		//DefineStatement | LoadStatement | (ForeachStatement | FilterStatement | GroupByStatement | OrderStatement |
		//LimitStatement | DistinctStatement | CrossStatement | JoinStatement | CoGroupByStatement | StreamStatement)
		//ParallelClause? | MrStatement | SplitStatement | UnionStatement | SampleStatement | StoreStatement | DumpStatement |
		//DescribeStatement | ExplainStatement
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//DefineStatement
		public RuleCall getDefineStatementParserRuleCall_0_0_0() { return cDefineStatementParserRuleCall_0_0_0; }

		//LoadStatement
		public RuleCall getLoadStatementParserRuleCall_0_0_1() { return cLoadStatementParserRuleCall_0_0_1; }

		//(ForeachStatement | FilterStatement | GroupByStatement | OrderStatement | LimitStatement | DistinctStatement |
		//CrossStatement | JoinStatement | CoGroupByStatement | StreamStatement) ParallelClause?
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }

		//ForeachStatement | FilterStatement | GroupByStatement | OrderStatement | LimitStatement | DistinctStatement |
		//CrossStatement | JoinStatement | CoGroupByStatement | StreamStatement
		public Alternatives getAlternatives_0_0_2_0() { return cAlternatives_0_0_2_0; }

		//ForeachStatement
		public RuleCall getForeachStatementParserRuleCall_0_0_2_0_0() { return cForeachStatementParserRuleCall_0_0_2_0_0; }

		//FilterStatement
		public RuleCall getFilterStatementParserRuleCall_0_0_2_0_1() { return cFilterStatementParserRuleCall_0_0_2_0_1; }

		//GroupByStatement
		public RuleCall getGroupByStatementParserRuleCall_0_0_2_0_2() { return cGroupByStatementParserRuleCall_0_0_2_0_2; }

		//OrderStatement
		public RuleCall getOrderStatementParserRuleCall_0_0_2_0_3() { return cOrderStatementParserRuleCall_0_0_2_0_3; }

		//LimitStatement
		public RuleCall getLimitStatementParserRuleCall_0_0_2_0_4() { return cLimitStatementParserRuleCall_0_0_2_0_4; }

		//DistinctStatement
		public RuleCall getDistinctStatementParserRuleCall_0_0_2_0_5() { return cDistinctStatementParserRuleCall_0_0_2_0_5; }

		//CrossStatement
		public RuleCall getCrossStatementParserRuleCall_0_0_2_0_6() { return cCrossStatementParserRuleCall_0_0_2_0_6; }

		//JoinStatement
		public RuleCall getJoinStatementParserRuleCall_0_0_2_0_7() { return cJoinStatementParserRuleCall_0_0_2_0_7; }

		//CoGroupByStatement
		public RuleCall getCoGroupByStatementParserRuleCall_0_0_2_0_8() { return cCoGroupByStatementParserRuleCall_0_0_2_0_8; }

		//StreamStatement
		public RuleCall getStreamStatementParserRuleCall_0_0_2_0_9() { return cStreamStatementParserRuleCall_0_0_2_0_9; }

		//ParallelClause?
		public RuleCall getParallelClauseParserRuleCall_0_0_2_1() { return cParallelClauseParserRuleCall_0_0_2_1; }

		//MrStatement
		public RuleCall getMrStatementParserRuleCall_0_0_3() { return cMrStatementParserRuleCall_0_0_3; }

		//SplitStatement
		public RuleCall getSplitStatementParserRuleCall_0_0_4() { return cSplitStatementParserRuleCall_0_0_4; }

		//UnionStatement
		public RuleCall getUnionStatementParserRuleCall_0_0_5() { return cUnionStatementParserRuleCall_0_0_5; }

		//SampleStatement
		public RuleCall getSampleStatementParserRuleCall_0_0_6() { return cSampleStatementParserRuleCall_0_0_6; }

		//StoreStatement
		public RuleCall getStoreStatementParserRuleCall_0_0_7() { return cStoreStatementParserRuleCall_0_0_7; }

		//DumpStatement
		public RuleCall getDumpStatementParserRuleCall_0_0_8() { return cDumpStatementParserRuleCall_0_0_8; }

		//DescribeStatement
		public RuleCall getDescribeStatementParserRuleCall_0_0_9() { return cDescribeStatementParserRuleCall_0_0_9; }

		//ExplainStatement
		public RuleCall getExplainStatementParserRuleCall_0_0_10() { return cExplainStatementParserRuleCall_0_0_10; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//DeclareClause
		public RuleCall getDeclareClauseParserRuleCall_1() { return cDeclareClauseParserRuleCall_1; }

		//CommentStatement
		public RuleCall getCommentStatementParserRuleCall_2() { return cCommentStatementParserRuleCall_2; }
	}

	public class DefineStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefineStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegisterClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefineClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefaultClauseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DefineStatement:
		//	RegisterClause | DefineClause | DefaultClause;
		public ParserRule getRule() { return rule; }

		//RegisterClause | DefineClause | DefaultClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//RegisterClause
		public RuleCall getRegisterClauseParserRuleCall_0() { return cRegisterClauseParserRuleCall_0; }

		//DefineClause
		public RuleCall getDefineClauseParserRuleCall_1() { return cDefineClauseParserRuleCall_1; }

		//DefaultClause
		public RuleCall getDefaultClauseParserRuleCall_2() { return cDefaultClauseParserRuleCall_2; }
	}

	public class LoadStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoadStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLOADKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cLoadUsingParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cAsClauseParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//LoadStatement:
		//	name=Alias "=" "LOAD" STRING LoadUsing? AsClause?;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "LOAD" STRING LoadUsing? AsClause?
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"LOAD"
		public Keyword getLOADKeyword_2() { return cLOADKeyword_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//LoadUsing?
		public RuleCall getLoadUsingParserRuleCall_4() { return cLoadUsingParserRuleCall_4; }

		//AsClause?
		public RuleCall getAsClauseParserRuleCall_5() { return cAsClauseParserRuleCall_5; }
	}

	public class ForeachStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForeachStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFOREACHKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAliasTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cItemsAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cItemsNested_blkParserRuleCall_4_0_0_0 = (RuleCall)cItemsAssignment_4_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cItemsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cItemsGenerate_clauseParserRuleCall_4_1_0 = (RuleCall)cItemsAssignment_4_1.eContents().get(0);
		
		//ForeachStatement:
		//	name=Alias "=" "FOREACH" type=AliasType (items+=nested_blk ";"? | items+=generate_clause);
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "FOREACH" type=AliasType (items+=nested_blk ";"? | items+=generate_clause)
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"FOREACH"
		public Keyword getFOREACHKeyword_2() { return cFOREACHKeyword_2; }

		//type=AliasType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_3_0() { return cTypeAliasTypeParserRuleCall_3_0; }

		//items+=nested_blk ";"? | items+=generate_clause
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//items+=nested_blk ";"?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//items+=nested_blk
		public Assignment getItemsAssignment_4_0_0() { return cItemsAssignment_4_0_0; }

		//nested_blk
		public RuleCall getItemsNested_blkParserRuleCall_4_0_0_0() { return cItemsNested_blkParserRuleCall_4_0_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_4_0_1() { return cSemicolonKeyword_4_0_1; }

		//items+=generate_clause
		public Assignment getItemsAssignment_4_1() { return cItemsAssignment_4_1; }

		//generate_clause
		public RuleCall getItemsGenerate_clauseParserRuleCall_4_1_0() { return cItemsGenerate_clauseParserRuleCall_4_1_0; }
	}

	public class FilterStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFILTERKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAliasTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cBYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCondAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCondConditionParserRuleCall_5_0 = (RuleCall)cCondAssignment_5.eContents().get(0);
		
		//FilterStatement:
		//	name=Alias "=" "FILTER" type=AliasType "BY" cond=Condition;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "FILTER" type=AliasType "BY" cond=Condition
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"FILTER"
		public Keyword getFILTERKeyword_2() { return cFILTERKeyword_2; }

		//type=AliasType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_3_0() { return cTypeAliasTypeParserRuleCall_3_0; }

		//"BY"
		public Keyword getBYKeyword_4() { return cBYKeyword_4; }

		//cond=Condition
		public Assignment getCondAssignment_5() { return cCondAssignment_5; }

		//Condition
		public RuleCall getCondConditionParserRuleCall_5_0() { return cCondConditionParserRuleCall_5_0; }
	}

	public class GroupByStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupByStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGROUPKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAliasTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cItemsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cItemsGroup_item_listParserRuleCall_4_0 = (RuleCall)cItemsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUSINGKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cGroup_typeParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final RuleCall cPartition_clauseParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//GroupByStatement:
		//	name=Alias "=" "GROUP" type=AliasType items=group_item_list ("USING" group_type)? partition_clause?;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "GROUP" type=AliasType items=group_item_list ("USING" group_type)? partition_clause?
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"GROUP"
		public Keyword getGROUPKeyword_2() { return cGROUPKeyword_2; }

		//type=AliasType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_3_0() { return cTypeAliasTypeParserRuleCall_3_0; }

		//items=group_item_list
		public Assignment getItemsAssignment_4() { return cItemsAssignment_4; }

		//group_item_list
		public RuleCall getItemsGroup_item_listParserRuleCall_4_0() { return cItemsGroup_item_listParserRuleCall_4_0; }

		//("USING" group_type)?
		public Group getGroup_5() { return cGroup_5; }

		//"USING"
		public Keyword getUSINGKeyword_5_0() { return cUSINGKeyword_5_0; }

		//group_type
		public RuleCall getGroup_typeParserRuleCall_5_1() { return cGroup_typeParserRuleCall_5_1; }

		//partition_clause?
		public RuleCall getPartition_clauseParserRuleCall_6() { return cPartition_clauseParserRuleCall_6; }
	}

	public class CoGroupByStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CoGroupByStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCOGROUPKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAliasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasesJoin_sub_clauseParserRuleCall_3_0 = (RuleCall)cAliasesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUSINGKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cCOGROUP_TYPETerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cPartition_clauseParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//CoGroupByStatement:
		//	name=Alias "=" "COGROUP" aliases=join_sub_clause ("USING" COGROUP_TYPE)? partition_clause?;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "COGROUP" aliases=join_sub_clause ("USING" COGROUP_TYPE)? partition_clause?
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"COGROUP"
		public Keyword getCOGROUPKeyword_2() { return cCOGROUPKeyword_2; }

		//aliases=join_sub_clause
		public Assignment getAliasesAssignment_3() { return cAliasesAssignment_3; }

		//join_sub_clause
		public RuleCall getAliasesJoin_sub_clauseParserRuleCall_3_0() { return cAliasesJoin_sub_clauseParserRuleCall_3_0; }

		//("USING" COGROUP_TYPE)?
		public Group getGroup_4() { return cGroup_4; }

		//"USING"
		public Keyword getUSINGKeyword_4_0() { return cUSINGKeyword_4_0; }

		//COGROUP_TYPE
		public RuleCall getCOGROUP_TYPETerminalRuleCall_4_1() { return cCOGROUP_TYPETerminalRuleCall_4_1; }

		//partition_clause?
		public RuleCall getPartition_clauseParserRuleCall_5() { return cPartition_clauseParserRuleCall_5; }
	}

	public class OrderStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cORDERKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAliasTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cBYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cOrder_by_clauseParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cUSINGKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cFuncClauseParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		
		//OrderStatement:
		//	name=Alias "=" "ORDER" type=AliasType "BY" order_by_clause ("USING" FuncClause)?;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "ORDER" type=AliasType "BY" order_by_clause ("USING" FuncClause)?
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"ORDER"
		public Keyword getORDERKeyword_2() { return cORDERKeyword_2; }

		//type=AliasType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_3_0() { return cTypeAliasTypeParserRuleCall_3_0; }

		//"BY"
		public Keyword getBYKeyword_4() { return cBYKeyword_4; }

		//order_by_clause
		public RuleCall getOrder_by_clauseParserRuleCall_5() { return cOrder_by_clauseParserRuleCall_5; }

		//("USING" FuncClause)?
		public Group getGroup_6() { return cGroup_6; }

		//"USING"
		public Keyword getUSINGKeyword_6_0() { return cUSINGKeyword_6_0; }

		//FuncClause
		public RuleCall getFuncClauseParserRuleCall_6_1() { return cFuncClauseParserRuleCall_6_1; }
	}

	public class CrossStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CrossStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCROSSKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAliasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasesRel_listParserRuleCall_3_0 = (RuleCall)cAliasesAssignment_3.eContents().get(0);
		private final RuleCall cPartition_clauseParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//CrossStatement:
		//	name=Alias "=" "CROSS" aliases=rel_list partition_clause?;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "CROSS" aliases=rel_list partition_clause?
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"CROSS"
		public Keyword getCROSSKeyword_2() { return cCROSSKeyword_2; }

		//aliases=rel_list
		public Assignment getAliasesAssignment_3() { return cAliasesAssignment_3; }

		//rel_list
		public RuleCall getAliasesRel_listParserRuleCall_3_0() { return cAliasesRel_listParserRuleCall_3_0; }

		//partition_clause?
		public RuleCall getPartition_clauseParserRuleCall_4() { return cPartition_clauseParserRuleCall_4; }
	}

	public class UnionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cUNIONKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cONKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAliasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAliasesRel_listParserRuleCall_4_0 = (RuleCall)cAliasesAssignment_4.eContents().get(0);
		
		//UnionStatement:
		//	name=Alias "=" "UNION" "ON" aliases=rel_list;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "UNION" "ON" aliases=rel_list
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"UNION"
		public Keyword getUNIONKeyword_2() { return cUNIONKeyword_2; }

		//"ON"
		public Keyword getONKeyword_3() { return cONKeyword_3; }

		//aliases=rel_list
		public Assignment getAliasesAssignment_4() { return cAliasesAssignment_4; }

		//rel_list
		public RuleCall getAliasesRel_listParserRuleCall_4_0() { return cAliasesRel_listParserRuleCall_4_0; }
	}

	public class JoinStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JoinStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cJOINKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAliasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasesJoin_sub_clauseParserRuleCall_3_0 = (RuleCall)cAliasesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUSINGKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cJoin_typeParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cPartition_clauseParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//JoinStatement:
		//	name=Alias "=" "JOIN" aliases=join_sub_clause ("USING" join_type)? partition_clause?;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "JOIN" aliases=join_sub_clause ("USING" join_type)? partition_clause?
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"JOIN"
		public Keyword getJOINKeyword_2() { return cJOINKeyword_2; }

		//aliases=join_sub_clause
		public Assignment getAliasesAssignment_3() { return cAliasesAssignment_3; }

		//join_sub_clause
		public RuleCall getAliasesJoin_sub_clauseParserRuleCall_3_0() { return cAliasesJoin_sub_clauseParserRuleCall_3_0; }

		//("USING" join_type)?
		public Group getGroup_4() { return cGroup_4; }

		//"USING"
		public Keyword getUSINGKeyword_4_0() { return cUSINGKeyword_4_0; }

		//join_type
		public RuleCall getJoin_typeParserRuleCall_4_1() { return cJoin_typeParserRuleCall_4_1; }

		//partition_clause?
		public RuleCall getPartition_clauseParserRuleCall_5() { return cPartition_clauseParserRuleCall_5; }
	}

	public class LimitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLIMITKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAliasTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cScalarIntParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//LimitStatement:
		//	name=Alias "=" "LIMIT" type=AliasType scalarInt;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "LIMIT" type=AliasType scalarInt
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"LIMIT"
		public Keyword getLIMITKeyword_2() { return cLIMITKeyword_2; }

		//type=AliasType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_3_0() { return cTypeAliasTypeParserRuleCall_3_0; }

		//scalarInt
		public RuleCall getScalarIntParserRuleCall_4() { return cScalarIntParserRuleCall_4; }
	}

	public class SampleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SampleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSAMPLEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAliasTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cDOUBLENUMBERTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//SampleStatement:
		//	name=Alias "=" "SAMPLE" type=AliasType DOUBLENUMBER;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "SAMPLE" type=AliasType DOUBLENUMBER
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"SAMPLE"
		public Keyword getSAMPLEKeyword_2() { return cSAMPLEKeyword_2; }

		//type=AliasType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_3_0() { return cTypeAliasTypeParserRuleCall_3_0; }

		//DOUBLENUMBER
		public RuleCall getDOUBLENUMBERTerminalRuleCall_4() { return cDOUBLENUMBERTerminalRuleCall_4; }
	}

	public class DistinctStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DistinctStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDISTINCTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAliasTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cPartition_clauseParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//DistinctStatement:
		//	name=Alias "=" "DISTINCT" type=AliasType partition_clause?;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "DISTINCT" type=AliasType partition_clause?
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"DISTINCT"
		public Keyword getDISTINCTKeyword_2() { return cDISTINCTKeyword_2; }

		//type=AliasType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_3_0() { return cTypeAliasTypeParserRuleCall_3_0; }

		//partition_clause?
		public RuleCall getPartition_clauseParserRuleCall_4() { return cPartition_clauseParserRuleCall_4; }
	}

	public class StreamStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StreamStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSTREAMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAliasTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cTHROUGHKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final RuleCall cEXECCOMMANDTerminalRuleCall_5_0 = (RuleCall)cAlternatives_5.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		private final RuleCall cAsClauseParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//StreamStatement:
		//	name=Alias "=" "STREAM" type=AliasType "THROUGH" (EXECCOMMAND | IDENTIFIER) AsClause?;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "STREAM" type=AliasType "THROUGH" (EXECCOMMAND | IDENTIFIER) AsClause?
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"STREAM"
		public Keyword getSTREAMKeyword_2() { return cSTREAMKeyword_2; }

		//type=AliasType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_3_0() { return cTypeAliasTypeParserRuleCall_3_0; }

		//"THROUGH"
		public Keyword getTHROUGHKeyword_4() { return cTHROUGHKeyword_4; }

		//EXECCOMMAND | IDENTIFIER
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//EXECCOMMAND
		public RuleCall getEXECCOMMANDTerminalRuleCall_5_0() { return cEXECCOMMANDTerminalRuleCall_5_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_5_1() { return cIDENTIFIERParserRuleCall_5_1; }

		//AsClause?
		public RuleCall getAsClauseParserRuleCall_6() { return cAsClauseParserRuleCall_6; }
	}

	public class MrStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MrStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMAPREDUCEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cStoreStatementParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cLoadAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLoadLoadStatementParserRuleCall_5_0 = (RuleCall)cLoadAssignment_5.eContents().get(0);
		private final RuleCall cEXECCOMMANDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//MrStatement:
		//	name=Alias "=" "MAPREDUCE" STRING StoreStatement load=LoadStatement EXECCOMMAND?;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "MAPREDUCE" STRING StoreStatement load=LoadStatement EXECCOMMAND?
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"MAPREDUCE"
		public Keyword getMAPREDUCEKeyword_2() { return cMAPREDUCEKeyword_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//StoreStatement
		public RuleCall getStoreStatementParserRuleCall_4() { return cStoreStatementParserRuleCall_4; }

		//load=LoadStatement
		public Assignment getLoadAssignment_5() { return cLoadAssignment_5; }

		//LoadStatement
		public RuleCall getLoadLoadStatementParserRuleCall_5_0() { return cLoadLoadStatementParserRuleCall_5_0; }

		//EXECCOMMAND?
		public RuleCall getEXECCOMMANDTerminalRuleCall_6() { return cEXECCOMMANDTerminalRuleCall_6; }
	}

	public class SplitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SplitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAliasParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSPLITKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAliasTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cINTOKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBranchesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBranchesSplit_branchParserRuleCall_5_0 = (RuleCall)cBranchesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cBranchesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cBranchesSplit_branchParserRuleCall_6_1_0 = (RuleCall)cBranchesAssignment_6_1.eContents().get(0);
		
		//SplitStatement:
		//	name=Alias "=" "SPLIT" type=AliasType "INTO" branches+=split_branch ("," branches+=split_branch)+;
		public ParserRule getRule() { return rule; }

		//name=Alias "=" "SPLIT" type=AliasType "INTO" branches+=split_branch ("," branches+=split_branch)+
		public Group getGroup() { return cGroup; }

		//name=Alias
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_0_0() { return cNameAliasParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"SPLIT"
		public Keyword getSPLITKeyword_2() { return cSPLITKeyword_2; }

		//type=AliasType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_3_0() { return cTypeAliasTypeParserRuleCall_3_0; }

		//"INTO"
		public Keyword getINTOKeyword_4() { return cINTOKeyword_4; }

		//branches+=split_branch
		public Assignment getBranchesAssignment_5() { return cBranchesAssignment_5; }

		//split_branch
		public RuleCall getBranchesSplit_branchParserRuleCall_5_0() { return cBranchesSplit_branchParserRuleCall_5_0; }

		//("," branches+=split_branch)+
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//branches+=split_branch
		public Assignment getBranchesAssignment_6_1() { return cBranchesAssignment_6_1; }

		//split_branch
		public RuleCall getBranchesSplit_branchParserRuleCall_6_1_0() { return cBranchesSplit_branchParserRuleCall_6_1_0; }
	}

	public class StoreStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StoreStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTOREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAliasTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cINTOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUSINGKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cFuncClauseParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//StoreStatement:
		//	"STORE" type=AliasType "INTO" STRING ("USING" FuncClause)?;
		public ParserRule getRule() { return rule; }

		//"STORE" type=AliasType "INTO" STRING ("USING" FuncClause)?
		public Group getGroup() { return cGroup; }

		//"STORE"
		public Keyword getSTOREKeyword_0() { return cSTOREKeyword_0; }

		//type=AliasType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_1_0() { return cTypeAliasTypeParserRuleCall_1_0; }

		//"INTO"
		public Keyword getINTOKeyword_2() { return cINTOKeyword_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//("USING" FuncClause)?
		public Group getGroup_4() { return cGroup_4; }

		//"USING"
		public Keyword getUSINGKeyword_4_0() { return cUSINGKeyword_4_0; }

		//FuncClause
		public RuleCall getFuncClauseParserRuleCall_4_1() { return cFuncClauseParserRuleCall_4_1; }
	}

	public class DescribeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescribeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDESCRIBEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAliasTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//DescribeStatement:
		//	"DESCRIBE" type=AliasType;
		public ParserRule getRule() { return rule; }

		//"DESCRIBE" type=AliasType
		public Group getGroup() { return cGroup; }

		//"DESCRIBE"
		public Keyword getDESCRIBEKeyword_0() { return cDESCRIBEKeyword_0; }

		//type=AliasType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_1_0() { return cTypeAliasTypeParserRuleCall_1_0; }
	}

	public class ExplainStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExplainStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEXPLAINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAliasTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//ExplainStatement:
		//	"EXPLAIN" type=AliasType;
		public ParserRule getRule() { return rule; }

		//"EXPLAIN" type=AliasType
		public Group getGroup() { return cGroup; }

		//"EXPLAIN"
		public Keyword getEXPLAINKeyword_0() { return cEXPLAINKeyword_0; }

		//type=AliasType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_1_0() { return cTypeAliasTypeParserRuleCall_1_0; }
	}

	public class DumpStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DumpStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDUMPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAliasTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//DumpStatement:
		//	"DUMP" type=AliasType;
		public ParserRule getRule() { return rule; }

		//"DUMP" type=AliasType
		public Group getGroup() { return cGroup; }

		//"DUMP"
		public Keyword getDUMPKeyword_0() { return cDUMPKeyword_0; }

		//type=AliasType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_1_0() { return cTypeAliasTypeParserRuleCall_1_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cOrConditionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Condition:
		//	("(" Type ")")? OrCondition;
		public ParserRule getRule() { return rule; }

		//("(" Type ")")? OrCondition
		public Group getGroup() { return cGroup; }

		//("(" Type ")")?
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Type
		public RuleCall getTypeParserRuleCall_0_1() { return cTypeParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//OrCondition
		public RuleCall getOrConditionParserRuleCall_1() { return cOrConditionParserRuleCall_1; }
	}

	public class OrConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrConditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndConditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrCondition returns Condition:
		//	AndCondition ({OrCondition.left=current} "OR" right=AndCondition)*;
		public ParserRule getRule() { return rule; }

		//AndCondition ({OrCondition.left=current} "OR" right=AndCondition)*
		public Group getGroup() { return cGroup; }

		//AndCondition
		public RuleCall getAndConditionParserRuleCall_0() { return cAndConditionParserRuleCall_0; }

		//({OrCondition.left=current} "OR" right=AndCondition)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrCondition.left=current}
		public Action getOrConditionLeftAction_1_0() { return cOrConditionLeftAction_1_0; }

		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }

		//right=AndCondition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndCondition
		public RuleCall getRightAndConditionParserRuleCall_1_2_0() { return cRightAndConditionParserRuleCall_1_2_0; }
	}

	public class AndConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndConditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryConditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndCondition returns Condition:
		//	UnaryCondition ({AndCondition.left=current} "AND" right=UnaryCondition)*;
		public ParserRule getRule() { return rule; }

		//UnaryCondition ({AndCondition.left=current} "AND" right=UnaryCondition)*
		public Group getGroup() { return cGroup; }

		//UnaryCondition
		public RuleCall getUnaryConditionParserRuleCall_0() { return cUnaryConditionParserRuleCall_0; }

		//({AndCondition.left=current} "AND" right=UnaryCondition)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndCondition.left=current}
		public Action getAndConditionLeftAction_1_0() { return cAndConditionLeftAction_1_0; }

		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }

		//right=UnaryCondition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//UnaryCondition
		public RuleCall getRightUnaryConditionParserRuleCall_1_2_0() { return cRightUnaryConditionParserRuleCall_1_2_0; }
	}

	public class UnaryConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cQuestionMarkKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cLeftExpAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cLeftExpConditionParserRuleCall_0_2_1_0 = (RuleCall)cLeftExpAssignment_0_2_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Assignment cRightExpAssignment_0_2_3 = (Assignment)cGroup_0_2.eContents().get(3);
		private final RuleCall cRightExpConditionParserRuleCall_0_2_3_0 = (RuleCall)cRightExpAssignment_0_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Action cUnaryConditionLeftAction_0_4_0 = (Action)cGroup_0_4.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cRightAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cRightConditionParserRuleCall_0_4_2_0 = (RuleCall)cRightAssignment_0_4_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTEParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cUnaryConditionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final RuleCall cRel_opParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightTEParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//UnaryCondition returns Condition: // - / % + 0.0
		//	"(" Condition ("?" leftExp=Condition ":" rightExp=Condition)? ")" ({UnaryCondition.left=current} "+" right=Condition)?
		//	| //null_check_cond | // to LL refactor
		//	TE ({UnaryCondition.left=current} rel_op right=TE)?;
		public ParserRule getRule() { return rule; }

		//// - / % + 0.0
		//"(" Condition ("?" leftExp=Condition ":" rightExp=Condition)? ")" ({UnaryCondition.left=current} "+" right=Condition)? | //null_check_cond | // to LL refactor
		//TE ({UnaryCondition.left=current} rel_op right=TE)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//// - / % + 0.0
		//"(" Condition ("?" leftExp=Condition ":" rightExp=Condition)? ")" ({UnaryCondition.left=current} "+" right=Condition)?
		public Group getGroup_0() { return cGroup_0; }

		//// - / % + 0.0
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Condition
		public RuleCall getConditionParserRuleCall_0_1() { return cConditionParserRuleCall_0_1; }

		//("?" leftExp=Condition ":" rightExp=Condition)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"?"
		public Keyword getQuestionMarkKeyword_0_2_0() { return cQuestionMarkKeyword_0_2_0; }

		//leftExp=Condition
		public Assignment getLeftExpAssignment_0_2_1() { return cLeftExpAssignment_0_2_1; }

		//Condition
		public RuleCall getLeftExpConditionParserRuleCall_0_2_1_0() { return cLeftExpConditionParserRuleCall_0_2_1_0; }

		//":"
		public Keyword getColonKeyword_0_2_2() { return cColonKeyword_0_2_2; }

		//rightExp=Condition
		public Assignment getRightExpAssignment_0_2_3() { return cRightExpAssignment_0_2_3; }

		//Condition
		public RuleCall getRightExpConditionParserRuleCall_0_2_3_0() { return cRightExpConditionParserRuleCall_0_2_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//({UnaryCondition.left=current} "+" right=Condition)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//{UnaryCondition.left=current}
		public Action getUnaryConditionLeftAction_0_4_0() { return cUnaryConditionLeftAction_0_4_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_4_1() { return cPlusSignKeyword_0_4_1; }

		//right=Condition
		public Assignment getRightAssignment_0_4_2() { return cRightAssignment_0_4_2; }

		//Condition
		public RuleCall getRightConditionParserRuleCall_0_4_2_0() { return cRightConditionParserRuleCall_0_4_2_0; }

		////null_check_cond | // to LL refactor
		//TE ({UnaryCondition.left=current} rel_op right=TE)?
		public Group getGroup_1() { return cGroup_1; }

		////null_check_cond | // to LL refactor
		//TE
		public RuleCall getTEParserRuleCall_1_0() { return cTEParserRuleCall_1_0; }

		//({UnaryCondition.left=current} rel_op right=TE)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{UnaryCondition.left=current}
		public Action getUnaryConditionLeftAction_1_1_0() { return cUnaryConditionLeftAction_1_1_0; }

		//rel_op
		public RuleCall getRel_opParserRuleCall_1_1_1() { return cRel_opParserRuleCall_1_1_1; }

		//right=TE
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//TE
		public RuleCall getRightTEParserRuleCall_1_1_2_0() { return cRightTEParserRuleCall_1_1_2_0; }
	}

	public class TEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cISKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cNOTKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cNULLKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TE returns Condition:
		//	Expression ("IS" "NOT"? "NULL")?;
		public ParserRule getRule() { return rule; }

		//Expression ("IS" "NOT"? "NULL")?
		public Group getGroup() { return cGroup; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//("IS" "NOT"? "NULL")?
		public Group getGroup_1() { return cGroup_1; }

		//"IS"
		public Keyword getISKeyword_1_0() { return cISKeyword_1_0; }

		//"NOT"?
		public Keyword getNOTKeyword_1_1() { return cNOTKeyword_1_1; }

		//"NULL"
		public Keyword getNULLKeyword_1_2() { return cNULLKeyword_1_2; }
	}

	public class Func_evalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "func_eval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFuncNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cFunc_evalAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg_listAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg_listReal_arg_listParserRuleCall_3_0 = (RuleCall)cArg_listAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//func_eval:
		//	FuncName {func_eval} "(" arg_list=real_arg_list? ")";
		public ParserRule getRule() { return rule; }

		//FuncName {func_eval} "(" arg_list=real_arg_list? ")"
		public Group getGroup() { return cGroup; }

		//FuncName
		public RuleCall getFuncNameParserRuleCall_0() { return cFuncNameParserRuleCall_0; }

		//{func_eval}
		public Action getFunc_evalAction_1() { return cFunc_evalAction_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//arg_list=real_arg_list?
		public Assignment getArg_listAssignment_3() { return cArg_listAssignment_3; }

		//real_arg_list
		public RuleCall getArg_listReal_arg_listParserRuleCall_3_0() { return cArg_listReal_arg_listParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class Real_arg_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "real_arg_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsReal_argParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsReal_argParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//real_arg_list:
		//	args+=real_arg ("," args+=real_arg)*;
		public ParserRule getRule() { return rule; }

		//args+=real_arg ("," args+=real_arg)*
		public Group getGroup() { return cGroup; }

		//args+=real_arg
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }

		//real_arg
		public RuleCall getArgsReal_argParserRuleCall_0_0() { return cArgsReal_argParserRuleCall_0_0; }

		//("," args+=real_arg)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//args+=real_arg
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//real_arg
		public RuleCall getArgsReal_argParserRuleCall_1_1_0() { return cArgsReal_argParserRuleCall_1_1_0; }
	}

	public class Real_argElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "real_arg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTARParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//real_arg:
		//	Condition | STAR;
		public ParserRule getRule() { return rule; }

		//Condition | STAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//Condition
		public RuleCall getConditionParserRuleCall_0() { return cConditionParserRuleCall_0; }

		//STAR
		public RuleCall getSTARParserRuleCall_1() { return cSTARParserRuleCall_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAddExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Expression:
		//	"NOT"? AddExpression;
		public ParserRule getRule() { return rule; }

		//"NOT"? AddExpression
		public Group getGroup() { return cGroup; }

		//"NOT"?
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }

		//AddExpression
		public RuleCall getAddExpressionParserRuleCall_1() { return cAddExpressionParserRuleCall_1; }
	}

	public class AddExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulti_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cPLUSParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cMINUSParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Assignment cMul_expAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMul_expMulti_exprParserRuleCall_1_1_0 = (RuleCall)cMul_expAssignment_1_1.eContents().get(0);
		
		//AddExpression returns Expression:
		//	multi_expr ((PLUS | MINUS) mul_exp=multi_expr)*;
		public ParserRule getRule() { return rule; }

		//multi_expr ((PLUS | MINUS) mul_exp=multi_expr)*
		public Group getGroup() { return cGroup; }

		//multi_expr
		public RuleCall getMulti_exprParserRuleCall_0() { return cMulti_exprParserRuleCall_0; }

		//((PLUS | MINUS) mul_exp=multi_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//PLUS | MINUS
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//PLUS
		public RuleCall getPLUSParserRuleCall_1_0_0() { return cPLUSParserRuleCall_1_0_0; }

		//MINUS
		public RuleCall getMINUSParserRuleCall_1_0_1() { return cMINUSParserRuleCall_1_0_1; }

		//mul_exp=multi_expr
		public Assignment getMul_expAssignment_1_1() { return cMul_expAssignment_1_1; }

		//multi_expr
		public RuleCall getMul_expMulti_exprParserRuleCall_1_1_0() { return cMul_expMulti_exprParserRuleCall_1_1_0; }
	}

	public class Multi_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "multi_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCast_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cSTARParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDIVParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cPERCENTParserRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final Assignment cMul_castAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMul_castCast_exprParserRuleCall_1_1_0 = (RuleCall)cMul_castAssignment_1_1.eContents().get(0);
		
		//multi_expr returns Expression:
		//	cast_expr ((STAR | DIV | PERCENT) mul_cast=cast_expr)*;
		public ParserRule getRule() { return rule; }

		//cast_expr ((STAR | DIV | PERCENT) mul_cast=cast_expr)*
		public Group getGroup() { return cGroup; }

		//cast_expr
		public RuleCall getCast_exprParserRuleCall_0() { return cCast_exprParserRuleCall_0; }

		//((STAR | DIV | PERCENT) mul_cast=cast_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//STAR | DIV | PERCENT
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//STAR
		public RuleCall getSTARParserRuleCall_1_0_0() { return cSTARParserRuleCall_1_0_0; }

		//DIV
		public RuleCall getDIVParserRuleCall_1_0_1() { return cDIVParserRuleCall_1_0_1; }

		//PERCENT
		public RuleCall getPERCENTParserRuleCall_1_0_2() { return cPERCENTParserRuleCall_1_0_2; }

		//mul_cast=cast_expr
		public Assignment getMul_castAssignment_1_1() { return cMul_castAssignment_1_1; }

		//cast_expr
		public RuleCall getMul_castCast_exprParserRuleCall_1_1_0() { return cMul_castCast_exprParserRuleCall_1_1_0; }
	}

	public class Cast_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cast_expr");
		private final RuleCall cUnary_exprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//cast_expr returns Expression:
		//	unary_expr;
		public ParserRule getRule() { return rule; }

		//unary_expr
		public RuleCall getUnary_exprParserRuleCall() { return cUnary_exprParserRuleCall; }
	}

	public class Unary_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unary_expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpr_evalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNeg_exprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//unary_expr returns Expression:
		//	expr_eval | neg_expr;
		public ParserRule getRule() { return rule; }

		//expr_eval | neg_expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//expr_eval
		public RuleCall getExpr_evalParserRuleCall_0() { return cExpr_evalParserRuleCall_0; }

		//neg_expr
		public RuleCall getNeg_exprParserRuleCall_1() { return cNeg_exprParserRuleCall_1; }
	}

	public class Expr_evalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expr_eval");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConst_exprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVar_exprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//expr_eval returns Expression:
		//	const_expr | var_expr;
		public ParserRule getRule() { return rule; }

		//const_expr | var_expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//const_expr
		public RuleCall getConst_exprParserRuleCall_0() { return cConst_exprParserRuleCall_0; }

		//var_expr
		public RuleCall getVar_exprParserRuleCall_1() { return cVar_exprParserRuleCall_1; }
	}

	public class Var_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "var_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProjectable_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cDot_projParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cPound_projParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//var_expr:
		//	projectable_expr (dot_proj | pound_proj)*;
		public ParserRule getRule() { return rule; }

		//projectable_expr (dot_proj | pound_proj)*
		public Group getGroup() { return cGroup; }

		//projectable_expr
		public RuleCall getProjectable_exprParserRuleCall_0() { return cProjectable_exprParserRuleCall_0; }

		//(dot_proj | pound_proj)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//dot_proj
		public RuleCall getDot_projParserRuleCall_1_0() { return cDot_projParserRuleCall_1_0; }

		//pound_proj
		public RuleCall getPound_projParserRuleCall_1_1() { return cPound_projParserRuleCall_1_1; }
	}

	public class Projectable_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "projectable_expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunc_evalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCol_refParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//projectable_expr:
		//	func_eval | col_ref;
		public ParserRule getRule() { return rule; }

		//func_eval | col_ref
		public Alternatives getAlternatives() { return cAlternatives; }

		//func_eval
		public RuleCall getFunc_evalParserRuleCall_0() { return cFunc_evalParserRuleCall_0; }

		//col_ref
		public RuleCall getCol_refParserRuleCall_1() { return cCol_refParserRuleCall_1; }
	}

	public class Dot_projElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dot_proj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cCol_alias_or_indexParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//dot_proj:
		//	("." | "::") col_alias_or_index;
		public ParserRule getRule() { return rule; }

		//("." | "::") col_alias_or_index
		public Group getGroup() { return cGroup; }

		//"." | "::"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//col_alias_or_index
		public RuleCall getCol_alias_or_indexParserRuleCall_1() { return cCol_alias_or_indexParserRuleCall_1; }
	}

	public class Col_alias_or_indexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "col_alias_or_index");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCol_aliasParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCol_indexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//col_alias_or_index:
		//	col_alias | col_index;
		public ParserRule getRule() { return rule; }

		//col_alias | col_index
		public Alternatives getAlternatives() { return cAlternatives; }

		//col_alias
		public RuleCall getCol_aliasParserRuleCall_0() { return cCol_aliasParserRuleCall_0; }

		//col_index
		public RuleCall getCol_indexParserRuleCall_1() { return cCol_indexParserRuleCall_1; }
	}

	public class Col_aliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "col_alias");
		private final RuleCall cIDENTIFIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//col_alias:
		//	IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall() { return cIDENTIFIERParserRuleCall; }
	}

	public class Col_indexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "col_index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDOLLARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cDIGITTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//col_index:
		//	DOLLAR (DIGIT | INT);
		public ParserRule getRule() { return rule; }

		//DOLLAR (DIGIT | INT)
		public Group getGroup() { return cGroup; }

		//DOLLAR
		public RuleCall getDOLLARParserRuleCall_0() { return cDOLLARParserRuleCall_0; }

		//DIGIT | INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_1_0() { return cDIGITTerminalRuleCall_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class Pound_projElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pound_proj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPOUNDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cNULLKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//pound_proj:
		//	POUND (STRING | "NULL");
		public ParserRule getRule() { return rule; }

		//POUND (STRING | "NULL")
		public Group getGroup() { return cGroup; }

		//POUND
		public RuleCall getPOUNDParserRuleCall_0() { return cPOUNDParserRuleCall_0; }

		//STRING | "NULL"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_0() { return cSTRINGTerminalRuleCall_1_0; }

		//"NULL"
		public Keyword getNULLKeyword_1_1() { return cNULLKeyword_1_1; }
	}

	public class Bin_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bin_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftExpExpressionParserRuleCall_3_0 = (RuleCall)cLeftExpAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightExpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightExpExpressionParserRuleCall_5_0 = (RuleCall)cRightExpAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//bin_expr:
		//	"(" Condition "?" leftExp=Expression ":" rightExp=Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Condition "?" leftExp=Expression ":" rightExp=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Condition
		public RuleCall getConditionParserRuleCall_1() { return cConditionParserRuleCall_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_2() { return cQuestionMarkKeyword_2; }

		//leftExp=Expression
		public Assignment getLeftExpAssignment_3() { return cLeftExpAssignment_3; }

		//Expression
		public RuleCall getLeftExpExpressionParserRuleCall_3_0() { return cLeftExpExpressionParserRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//rightExp=Expression
		public Assignment getRightExpAssignment_5() { return cRightExpAssignment_5; }

		//Expression
		public RuleCall getRightExpExpressionParserRuleCall_5_0() { return cRightExpExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class Neg_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "neg_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCast_exprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//neg_expr returns Expression:
		//	"-" cast_expr;
		public ParserRule getRule() { return rule; }

		//"-" cast_expr
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//cast_expr
		public RuleCall getCast_exprParserRuleCall_1() { return cCast_exprParserRuleCall_1; }
	}

	public class Rel_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rel_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRel_op_eqParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRel_op_neParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRel_op_gtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRel_op_gteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRel_op_ltParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRel_op_lteParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Keyword cMATCHESKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//rel_op:
		//	rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | "MATCHES";
		public ParserRule getRule() { return rule; }

		//rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | "MATCHES"
		public Alternatives getAlternatives() { return cAlternatives; }

		//rel_op_eq
		public RuleCall getRel_op_eqParserRuleCall_0() { return cRel_op_eqParserRuleCall_0; }

		//rel_op_ne
		public RuleCall getRel_op_neParserRuleCall_1() { return cRel_op_neParserRuleCall_1; }

		//rel_op_gt
		public RuleCall getRel_op_gtParserRuleCall_2() { return cRel_op_gtParserRuleCall_2; }

		//rel_op_gte
		public RuleCall getRel_op_gteParserRuleCall_3() { return cRel_op_gteParserRuleCall_3; }

		//rel_op_lt
		public RuleCall getRel_op_ltParserRuleCall_4() { return cRel_op_ltParserRuleCall_4; }

		//rel_op_lte
		public RuleCall getRel_op_lteParserRuleCall_5() { return cRel_op_lteParserRuleCall_5; }

		//"MATCHES"
		public Keyword getMATCHESKeyword_6() { return cMATCHESKeyword_6; }
	}

	public class Rel_op_eqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rel_op_eq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTR_OP_EQParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUM_OP_EQParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//rel_op_eq:
		//	STR_OP_EQ | NUM_OP_EQ;
		public ParserRule getRule() { return rule; }

		//STR_OP_EQ | NUM_OP_EQ
		public Alternatives getAlternatives() { return cAlternatives; }

		//STR_OP_EQ
		public RuleCall getSTR_OP_EQParserRuleCall_0() { return cSTR_OP_EQParserRuleCall_0; }

		//NUM_OP_EQ
		public RuleCall getNUM_OP_EQParserRuleCall_1() { return cNUM_OP_EQParserRuleCall_1; }
	}

	public class Rel_op_neElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rel_op_ne");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTR_OP_NEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUM_OP_NEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//rel_op_ne:
		//	STR_OP_NE | NUM_OP_NE;
		public ParserRule getRule() { return rule; }

		//STR_OP_NE | NUM_OP_NE
		public Alternatives getAlternatives() { return cAlternatives; }

		//STR_OP_NE
		public RuleCall getSTR_OP_NEParserRuleCall_0() { return cSTR_OP_NEParserRuleCall_0; }

		//NUM_OP_NE
		public RuleCall getNUM_OP_NEParserRuleCall_1() { return cNUM_OP_NEParserRuleCall_1; }
	}

	public class Rel_op_gtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rel_op_gt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTR_OP_GTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUM_OP_GTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//rel_op_gt:
		//	STR_OP_GT | NUM_OP_GT;
		public ParserRule getRule() { return rule; }

		//STR_OP_GT | NUM_OP_GT
		public Alternatives getAlternatives() { return cAlternatives; }

		//STR_OP_GT
		public RuleCall getSTR_OP_GTParserRuleCall_0() { return cSTR_OP_GTParserRuleCall_0; }

		//NUM_OP_GT
		public RuleCall getNUM_OP_GTParserRuleCall_1() { return cNUM_OP_GTParserRuleCall_1; }
	}

	public class Rel_op_gteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rel_op_gte");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTR_OP_GTEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUM_OP_GTEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//rel_op_gte:
		//	STR_OP_GTE | NUM_OP_GTE;
		public ParserRule getRule() { return rule; }

		//STR_OP_GTE | NUM_OP_GTE
		public Alternatives getAlternatives() { return cAlternatives; }

		//STR_OP_GTE
		public RuleCall getSTR_OP_GTEParserRuleCall_0() { return cSTR_OP_GTEParserRuleCall_0; }

		//NUM_OP_GTE
		public RuleCall getNUM_OP_GTEParserRuleCall_1() { return cNUM_OP_GTEParserRuleCall_1; }
	}

	public class Rel_op_ltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rel_op_lt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTR_OP_LTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUM_OP_LTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//rel_op_lt:
		//	STR_OP_LT | NUM_OP_LT;
		public ParserRule getRule() { return rule; }

		//STR_OP_LT | NUM_OP_LT
		public Alternatives getAlternatives() { return cAlternatives; }

		//STR_OP_LT
		public RuleCall getSTR_OP_LTParserRuleCall_0() { return cSTR_OP_LTParserRuleCall_0; }

		//NUM_OP_LT
		public RuleCall getNUM_OP_LTParserRuleCall_1() { return cNUM_OP_LTParserRuleCall_1; }
	}

	public class Rel_op_lteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rel_op_lte");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTR_OP_LTEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUM_OP_LTEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//rel_op_lte:
		//	STR_OP_LTE | NUM_OP_LTE;
		public ParserRule getRule() { return rule; }

		//STR_OP_LTE | NUM_OP_LTE
		public Alternatives getAlternatives() { return cAlternatives; }

		//STR_OP_LTE
		public RuleCall getSTR_OP_LTEParserRuleCall_0() { return cSTR_OP_LTEParserRuleCall_0; }

		//NUM_OP_LTE
		public RuleCall getNUM_OP_LTEParserRuleCall_1() { return cNUM_OP_LTEParserRuleCall_1; }
	}

	public class AliasTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasType");
		private final Assignment cReferencedAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferencedStatementCrossReference_0 = (CrossReference)cReferencedAssignment.eContents().get(0);
		private final RuleCall cReferencedStatementIDTerminalRuleCall_0_1 = (RuleCall)cReferencedStatementCrossReference_0.eContents().get(1);
		
		//AliasType:
		//	referenced=[Statement];
		public ParserRule getRule() { return rule; }

		//referenced=[Statement]
		public Assignment getReferencedAssignment() { return cReferencedAssignment; }

		//[Statement]
		public CrossReference getReferencedStatementCrossReference_0() { return cReferencedStatementCrossReference_0; }

		//ID
		public RuleCall getReferencedStatementIDTerminalRuleCall_0_1() { return cReferencedStatementIDTerminalRuleCall_0_1; }
	}

	public class FlattenGeneratedItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlattenGeneratedItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cASKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cFieldDefParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cFieldFefListParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//FlattenGeneratedItem:
		//	(Condition | "*") ("AS" (FieldDef | FieldFefList))?;
		public ParserRule getRule() { return rule; }

		//(Condition | "*") ("AS" (FieldDef | FieldFefList))?
		public Group getGroup() { return cGroup; }

		//Condition | "*"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Condition
		public RuleCall getConditionParserRuleCall_0_0() { return cConditionParserRuleCall_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }

		//("AS" (FieldDef | FieldFefList))?
		public Group getGroup_1() { return cGroup_1; }

		//"AS"
		public Keyword getASKeyword_1_0() { return cASKeyword_1_0; }

		//FieldDef | FieldFefList
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//FieldDef
		public RuleCall getFieldDefParserRuleCall_1_1_0() { return cFieldDefParserRuleCall_1_1_0; }

		//FieldFefList
		public RuleCall getFieldFefListParserRuleCall_1_1_1() { return cFieldFefListParserRuleCall_1_1_1; }
	}

	public class CommentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommentStatement");
		private final RuleCall cSL_COMMENTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CommentStatement:
		//	SL_COMMENT;
		public ParserRule getRule() { return rule; }

		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall() { return cSL_COMMENTTerminalRuleCall; }
	}

	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alias");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Alias:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class ParallelClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParallelClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPARALLELKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cScalarIntParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ParallelClause:
		//	"PARALLEL" scalarInt;
		public ParserRule getRule() { return rule; }

		//"PARALLEL" scalarInt
		public Group getGroup() { return cGroup; }

		//"PARALLEL"
		public Keyword getPARALLELKeyword_0() { return cPARALLELKeyword_0; }

		//scalarInt
		public RuleCall getScalarIntParserRuleCall_1() { return cScalarIntParserRuleCall_1; }
	}

	public class RegisterClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegisterClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREGISTERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPathClauseParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RegisterClause:
		//	"REGISTER" PathClause;
		public ParserRule getRule() { return rule; }

		//"REGISTER" PathClause
		public Group getGroup() { return cGroup; }

		//"REGISTER"
		public Keyword getREGISTERKeyword_0() { return cREGISTERKeyword_0; }

		//PathClause
		public RuleCall getPathClauseParserRuleCall_1() { return cPathClauseParserRuleCall_1; }
	}

	public class DefaultClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFAULTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAliasParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DefaultClause:
		//	"%DEFAULT" name=Alias STRING;
		public ParserRule getRule() { return rule; }

		//"%DEFAULT" name=Alias STRING
		public Group getGroup() { return cGroup; }

		//"%DEFAULT"
		public Keyword getDEFAULTKeyword_0() { return cDEFAULTKeyword_0; }

		//name=Alias
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_1_0() { return cNameAliasParserRuleCall_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class DeclareClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclareClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDECLAREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAliasParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cEXECCOMMANDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//DeclareClause:
		//	"%DECLARE" name=Alias (STRING | EXECCOMMAND);
		public ParserRule getRule() { return rule; }

		//"%DECLARE" name=Alias (STRING | EXECCOMMAND)
		public Group getGroup() { return cGroup; }

		//"%DECLARE"
		public Keyword getDECLAREKeyword_0() { return cDECLAREKeyword_0; }

		//name=Alias
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_1_0() { return cNameAliasParserRuleCall_1_0; }

		//STRING | EXECCOMMAND
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_0() { return cSTRINGTerminalRuleCall_2_0; }

		//EXECCOMMAND
		public RuleCall getEXECCOMMANDTerminalRuleCall_2_1() { return cEXECCOMMANDTerminalRuleCall_2_1; }
	}

	public class DefineClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefineClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFINEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAliasParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cFuncClauseParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DefineClause:
		//	"DEFINE" name=Alias FuncClause;
		public ParserRule getRule() { return rule; }

		//"DEFINE" name=Alias FuncClause
		public Group getGroup() { return cGroup; }

		//"DEFINE"
		public Keyword getDEFINEKeyword_0() { return cDEFINEKeyword_0; }

		//name=Alias
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Alias
		public RuleCall getNameAliasParserRuleCall_1_0() { return cNameAliasParserRuleCall_1_0; }

		//FuncClause
		public RuleCall getFuncClauseParserRuleCall_2() { return cFuncClauseParserRuleCall_2; }
	}

	public class LoadUsingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoadUsing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUSINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFuncClauseParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//LoadUsing:
		//	"USING" FuncClause;
		public ParserRule getRule() { return rule; }

		//"USING" FuncClause
		public Group getGroup() { return cGroup; }

		//"USING"
		public Keyword getUSINGKeyword_0() { return cUSINGKeyword_0; }

		//FuncClause
		public RuleCall getFuncClauseParserRuleCall_1() { return cFuncClauseParserRuleCall_1; }
	}

	public class FuncClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFuncNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FuncClause:
		//	FuncName "(" STRING? ("," STRING)* ")";
		public ParserRule getRule() { return rule; }

		//FuncName "(" STRING? ("," STRING)* ")"
		public Group getGroup() { return cGroup; }

		//FuncName
		public RuleCall getFuncNameParserRuleCall_0() { return cFuncNameParserRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//STRING?
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//("," STRING)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3_1() { return cSTRINGTerminalRuleCall_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class FuncNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDollarSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//FuncName:
		//	(ID | "." | "$")+;
		public ParserRule getRule() { return rule; }

		//(ID | "." | "$")+
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//"$"
		public Keyword getDollarSignKeyword_2() { return cDollarSignKeyword_2; }
	}

	public class PathClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PathClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cALLKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cScalarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDollarSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSolidusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cReverseSolidusKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cHyphenMinusKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//PathClause:
		//	("ALL" | scalar | ID | "." | "$" | "/" | "\\" | "-")+;
		public ParserRule getRule() { return rule; }

		//("ALL" | scalar | ID | "." | "$" | "/" | "\\" | "-")+
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ALL"
		public Keyword getALLKeyword_0() { return cALLKeyword_0; }

		//scalar
		public RuleCall getScalarParserRuleCall_1() { return cScalarParserRuleCall_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//"$"
		public Keyword getDollarSignKeyword_4() { return cDollarSignKeyword_4; }

		//"/"
		public Keyword getSolidusKeyword_5() { return cSolidusKeyword_5; }

		//"\\"
		public Keyword getReverseSolidusKeyword_6() { return cReverseSolidusKeyword_6; }

		//"-"
		public Keyword getHyphenMinusKeyword_7() { return cHyphenMinusKeyword_7; }
	}

	public class AsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AsClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cASKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cAliasDefParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cAliasDefListParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//AsClause:
		//	"AS" (AliasDef | AliasDefList);
		public ParserRule getRule() { return rule; }

		//"AS" (AliasDef | AliasDefList)
		public Group getGroup() { return cGroup; }

		//"AS"
		public Keyword getASKeyword_0() { return cASKeyword_0; }

		//AliasDef | AliasDefList
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//AliasDef
		public RuleCall getAliasDefParserRuleCall_1_0() { return cAliasDefParserRuleCall_1_0; }

		//AliasDefList
		public RuleCall getAliasDefListParserRuleCall_1_1() { return cAliasDefListParserRuleCall_1_1; }
	}

	public class AliasDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAliasParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AliasDef:
		//	Alias (":" Type)?;
		public ParserRule getRule() { return rule; }

		//Alias (":" Type)?
		public Group getGroup() { return cGroup; }

		//Alias
		public RuleCall getAliasParserRuleCall_0() { return cAliasParserRuleCall_0; }

		//(":" Type)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1_1() { return cTypeParserRuleCall_1_1; }
	}

	public class AliasDefListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AliasDefList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAliasDefParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAliasDefParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AliasDefList:
		//	"(" AliasDef ("," AliasDef)* ")";
		public ParserRule getRule() { return rule; }

		//"(" AliasDef ("," AliasDef)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//AliasDef
		public RuleCall getAliasDefParserRuleCall_1() { return cAliasDefParserRuleCall_1; }

		//("," AliasDef)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//AliasDef
		public RuleCall getAliasDefParserRuleCall_2_1() { return cAliasDefParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class IDENTIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IDENTIFIER: //LETTER ( DIGIT | LETTER | SPECIALCHAR )*
		//	ID;
		public ParserRule getRule() { return rule; }

		////LETTER ( DIGIT | LETTER | SPECIALCHAR )*
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class FieldDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FieldDef:
		//	IDENTIFIER (":" Type)?;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER (":" Type)?
		public Group getGroup() { return cGroup; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }

		//(":" Type)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1_1() { return cTypeParserRuleCall_1_1; }
	}

	public class FieldFefListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldFefList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFieldDefParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cFieldDefParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FieldFefList:
		//	"(" FieldDef ("," FieldDef)* ")";
		public ParserRule getRule() { return rule; }

		//"(" FieldDef ("," FieldDef)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//FieldDef
		public RuleCall getFieldDefParserRuleCall_1() { return cFieldDefParserRuleCall_1; }

		//("," FieldDef)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//FieldDef
		public RuleCall getFieldDefParserRuleCall_2_1() { return cFieldDefParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTupleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMapTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBag_typeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//	SimpleType | TupleType | MapType | bag_type;
		public ParserRule getRule() { return rule; }

		//SimpleType | TupleType | MapType | bag_type
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_0() { return cSimpleTypeParserRuleCall_0; }

		//TupleType
		public RuleCall getTupleTypeParserRuleCall_1() { return cTupleTypeParserRuleCall_1; }

		//MapType
		public RuleCall getMapTypeParserRuleCall_2() { return cMapTypeParserRuleCall_2; }

		//bag_type
		public RuleCall getBag_typeParserRuleCall_3() { return cBag_typeParserRuleCall_3; }
	}

	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cINTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLONGKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFLOATKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDOUBLEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCHARARRAYKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBYTEARRAYKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//SimpleType:
		//	"INT" | "LONG" | "FLOAT" | "DOUBLE" | "CHARARRAY" | "BYTEARRAY";
		public ParserRule getRule() { return rule; }

		//"INT" | "LONG" | "FLOAT" | "DOUBLE" | "CHARARRAY" | "BYTEARRAY"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"INT"
		public Keyword getINTKeyword_0() { return cINTKeyword_0; }

		//"LONG"
		public Keyword getLONGKeyword_1() { return cLONGKeyword_1; }

		//"FLOAT"
		public Keyword getFLOATKeyword_2() { return cFLOATKeyword_2; }

		//"DOUBLE"
		public Keyword getDOUBLEKeyword_3() { return cDOUBLEKeyword_3; }

		//"CHARARRAY"
		public Keyword getCHARARRAYKeyword_4() { return cCHARARRAYKeyword_4; }

		//"BYTEARRAY"
		public Keyword getBYTEARRAYKeyword_5() { return cBYTEARRAYKeyword_5; }
	}

	public class TupleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TupleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTUPLEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAliasDefListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TupleType:
		//	"TUPLE"? AliasDefList;
		public ParserRule getRule() { return rule; }

		//"TUPLE"? AliasDefList
		public Group getGroup() { return cGroup; }

		//"TUPLE"?
		public Keyword getTUPLEKeyword_0() { return cTUPLEKeyword_0; }

		//AliasDefList
		public RuleCall getAliasDefListParserRuleCall_1() { return cAliasDefListParserRuleCall_1; }
	}

	public class Bag_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bag_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBAGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final RuleCall cTupleTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//bag_type:
		//	"BAG"? "{" ((IDENTIFIER ":")? TupleType)? "}";
		public ParserRule getRule() { return rule; }

		//"BAG"? "{" ((IDENTIFIER ":")? TupleType)? "}"
		public Group getGroup() { return cGroup; }

		//"BAG"?
		public Keyword getBAGKeyword_0() { return cBAGKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//((IDENTIFIER ":")? TupleType)?
		public Group getGroup_2() { return cGroup_2; }

		//(IDENTIFIER ":")?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_2_0_0() { return cIDENTIFIERParserRuleCall_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_0_1() { return cColonKeyword_2_0_1; }

		//TupleType
		public RuleCall getTupleTypeParserRuleCall_2_1() { return cTupleTypeParserRuleCall_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapType");
		private final Keyword cMAPKeyword = (Keyword)rule.eContents().get(1);
		
		//MapType:
		//	"MAP[]";
		public ParserRule getRule() { return rule; }

		//"MAP[]"
		public Keyword getMAPKeyword() { return cMAPKeyword; }
	}

	public class CmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cmd");
		private final RuleCall cEXECCOMMANDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Cmd: //( ship_clause | cache_caluse | input_clause | output_clause | error_clause )*
		//	EXECCOMMAND;
		public ParserRule getRule() { return rule; }

		////( ship_clause | cache_caluse | input_clause | output_clause | error_clause )*
		//EXECCOMMAND
		public RuleCall getEXECCOMMANDTerminalRuleCall() { return cEXECCOMMANDTerminalRuleCall; }
	}

	public class STR_OP_EQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STR_OP_EQ");
		private final Keyword cEQKeyword = (Keyword)rule.eContents().get(1);
		
		//STR_OP_EQ:
		//	"EQ";
		public ParserRule getRule() { return rule; }

		//"EQ"
		public Keyword getEQKeyword() { return cEQKeyword; }
	}

	public class STR_OP_GTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STR_OP_GT");
		private final Keyword cGTKeyword = (Keyword)rule.eContents().get(1);
		
		//STR_OP_GT:
		//	"GT";
		public ParserRule getRule() { return rule; }

		//"GT"
		public Keyword getGTKeyword() { return cGTKeyword; }
	}

	public class STR_OP_LTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STR_OP_LT");
		private final Keyword cLTKeyword = (Keyword)rule.eContents().get(1);
		
		//STR_OP_LT:
		//	"LT";
		public ParserRule getRule() { return rule; }

		//"LT"
		public Keyword getLTKeyword() { return cLTKeyword; }
	}

	public class STR_OP_GTEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STR_OP_GTE");
		private final Keyword cGTEKeyword = (Keyword)rule.eContents().get(1);
		
		//STR_OP_GTE:
		//	"GTE";
		public ParserRule getRule() { return rule; }

		//"GTE"
		public Keyword getGTEKeyword() { return cGTEKeyword; }
	}

	public class STR_OP_LTEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STR_OP_LTE");
		private final Keyword cLTEKeyword = (Keyword)rule.eContents().get(1);
		
		//STR_OP_LTE:
		//	"LTE";
		public ParserRule getRule() { return rule; }

		//"LTE"
		public Keyword getLTEKeyword() { return cLTEKeyword; }
	}

	public class STR_OP_NEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STR_OP_NE");
		private final Keyword cNEQKeyword = (Keyword)rule.eContents().get(1);
		
		//STR_OP_NE:
		//	"NEQ";
		public ParserRule getRule() { return rule; }

		//"NEQ"
		public Keyword getNEQKeyword() { return cNEQKeyword; }
	}

	public class STR_OP_MATCHESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STR_OP_MATCHES");
		private final Keyword cMATCHESKeyword = (Keyword)rule.eContents().get(1);
		
		//STR_OP_MATCHES:
		//	"MATCHES";
		public ParserRule getRule() { return rule; }

		//"MATCHES"
		public Keyword getMATCHESKeyword() { return cMATCHESKeyword; }
	}

	public class NUM_OP_EQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUM_OP_EQ");
		private final Keyword cEqualsSignEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//NUM_OP_EQ:
		//	"==";
		public ParserRule getRule() { return rule; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword() { return cEqualsSignEqualsSignKeyword; }
	}

	public class NUM_OP_LTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUM_OP_LT");
		private final Keyword cLessThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//NUM_OP_LT:
		//	"<";
		public ParserRule getRule() { return rule; }

		//"<"
		public Keyword getLessThanSignKeyword() { return cLessThanSignKeyword; }
	}

	public class NUM_OP_LTEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUM_OP_LTE");
		private final Keyword cLessThanSignEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//NUM_OP_LTE:
		//	"<=";
		public ParserRule getRule() { return rule; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword() { return cLessThanSignEqualsSignKeyword; }
	}

	public class NUM_OP_GTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUM_OP_GT");
		private final Keyword cGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//NUM_OP_GT:
		//	">";
		public ParserRule getRule() { return rule; }

		//">"
		public Keyword getGreaterThanSignKeyword() { return cGreaterThanSignKeyword; }
	}

	public class NUM_OP_GTEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUM_OP_GTE");
		private final Keyword cGreaterThanSignEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//NUM_OP_GTE:
		//	">=";
		public ParserRule getRule() { return rule; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword() { return cGreaterThanSignEqualsSignKeyword; }
	}

	public class NUM_OP_NEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUM_OP_NE");
		private final Keyword cExclamationMarkEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//NUM_OP_NE:
		//	"!=";
		public ParserRule getRule() { return rule; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword() { return cExclamationMarkEqualsSignKeyword; }
	}

	public class SEMI_COLONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SEMI_COLON");
		private final Keyword cSemicolonKeyword = (Keyword)rule.eContents().get(1);
		
		//SEMI_COLON:
		//	";";
		public ParserRule getRule() { return rule; }

		//";"
		public Keyword getSemicolonKeyword() { return cSemicolonKeyword; }
	}

	public class LEFT_PARENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT_PAREN");
		private final Keyword cLeftParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//LEFT_PAREN:
		//	"(";
		public ParserRule getRule() { return rule; }

		//"("
		public Keyword getLeftParenthesisKeyword() { return cLeftParenthesisKeyword; }
	}

	public class RIGHT_PARENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT_PAREN");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//RIGHT_PAREN:
		//	")";
		public ParserRule getRule() { return rule; }

		//")"
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}

	public class LEFT_CURLYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT_CURLY");
		private final Keyword cLeftCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//LEFT_CURLY:
		//	"{";
		public ParserRule getRule() { return rule; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword() { return cLeftCurlyBracketKeyword; }
	}

	public class RIGHT_CURLYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT_CURLY");
		private final Keyword cRightCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//RIGHT_CURLY:
		//	"}";
		public ParserRule getRule() { return rule; }

		//"}"
		public Keyword getRightCurlyBracketKeyword() { return cRightCurlyBracketKeyword; }
	}

	public class LEFT_BRACKETElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT_BRACKET");
		private final Keyword cLeftSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//LEFT_BRACKET:
		//	"[";
		public ParserRule getRule() { return rule; }

		//"["
		public Keyword getLeftSquareBracketKeyword() { return cLeftSquareBracketKeyword; }
	}

	public class RIGHT_BRACKETElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT_BRACKET");
		private final Keyword cRightSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//RIGHT_BRACKET:
		//	"]";
		public ParserRule getRule() { return rule; }

		//"]"
		public Keyword getRightSquareBracketKeyword() { return cRightSquareBracketKeyword; }
	}

	public class POUNDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "POUND");
		private final Keyword cNumberSignKeyword = (Keyword)rule.eContents().get(1);
		
		//POUND:
		//	"#";
		public ParserRule getRule() { return rule; }

		//"#"
		public Keyword getNumberSignKeyword() { return cNumberSignKeyword; }
	}

	public class EQUALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EQUAL");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//EQUAL:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class COMMAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//COMMA:
		//	",";
		public ParserRule getRule() { return rule; }

		//","
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}

	public class PERIODElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PERIOD");
		private final Keyword cFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//PERIOD:
		//	".";
		public ParserRule getRule() { return rule; }

		//"."
		public Keyword getFullStopKeyword() { return cFullStopKeyword; }
	}

	public class DIVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DIV");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//DIV:
		//	"/";
		public ParserRule getRule() { return rule; }

		//"/"
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}

	public class PERCENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PERCENT");
		private final Keyword cPercentSignKeyword = (Keyword)rule.eContents().get(1);
		
		//PERCENT:
		//	"%";
		public ParserRule getRule() { return rule; }

		//"%"
		public Keyword getPercentSignKeyword() { return cPercentSignKeyword; }
	}

	public class PLUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//PLUS:
		//	"+";
		public ParserRule getRule() { return rule; }

		//"+"
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class MINUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//MINUS:
		//	"-";
		public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class STARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STAR");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//STAR:
		//	"*";
		public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class COLONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COLON");
		private final Keyword cColonKeyword = (Keyword)rule.eContents().get(1);
		
		//COLON:
		//	":";
		public ParserRule getRule() { return rule; }

		//":"
		public Keyword getColonKeyword() { return cColonKeyword; }
	}

	public class DOLLARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOLLAR");
		private final Keyword cDollarSignKeyword = (Keyword)rule.eContents().get(1);
		
		//DOLLAR:
		//	"$";
		public ParserRule getRule() { return rule; }

		//"$"
		public Keyword getDollarSignKeyword() { return cDollarSignKeyword; }
	}

	public class Group_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "group_type");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//group_type:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class Group_item_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "group_item_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGroup_itemParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMAParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cItemsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cItemsGroup_itemParserRuleCall_1_1_0 = (RuleCall)cItemsAssignment_1_1.eContents().get(0);
		
		//group_item_list:
		//	group_item (COMMA items=group_item)*;
		public ParserRule getRule() { return rule; }

		//group_item (COMMA items=group_item)*
		public Group getGroup() { return cGroup; }

		//group_item
		public RuleCall getGroup_itemParserRuleCall_0() { return cGroup_itemParserRuleCall_0; }

		//(COMMA items=group_item)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMAParserRuleCall_1_0() { return cCOMMAParserRuleCall_1_0; }

		//items=group_item
		public Assignment getItemsAssignment_1_1() { return cItemsAssignment_1_1; }

		//group_item
		public RuleCall getItemsGroup_itemParserRuleCall_1_1_0() { return cItemsGroup_itemParserRuleCall_1_1_0; }
	}

	public class Order_by_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "order_by_clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSTARParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cASCKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cDESCKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cOrder_col_listParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//order_by_clause:
		//	STAR ("ASC" | "DESC")? | order_col_list;
		public ParserRule getRule() { return rule; }

		//STAR ("ASC" | "DESC")? | order_col_list
		public Alternatives getAlternatives() { return cAlternatives; }

		//STAR ("ASC" | "DESC")?
		public Group getGroup_0() { return cGroup_0; }

		//STAR
		public RuleCall getSTARParserRuleCall_0_0() { return cSTARParserRuleCall_0_0; }

		//("ASC" | "DESC")?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//"ASC"
		public Keyword getASCKeyword_0_1_0() { return cASCKeyword_0_1_0; }

		//"DESC"
		public Keyword getDESCKeyword_0_1_1() { return cDESCKeyword_0_1_1; }

		//order_col_list
		public RuleCall getOrder_col_listParserRuleCall_1() { return cOrder_col_listParserRuleCall_1; }
	}

	public class Order_col_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "order_col_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrder_colParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOrder_colParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//order_col_list:
		//	order_col ("," order_col)*;
		public ParserRule getRule() { return rule; }

		//order_col ("," order_col)*
		public Group getGroup() { return cGroup; }

		//order_col
		public RuleCall getOrder_colParserRuleCall_0() { return cOrder_colParserRuleCall_0; }

		//("," order_col)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//order_col
		public RuleCall getOrder_colParserRuleCall_1_1() { return cOrder_colParserRuleCall_1_1; }
	}

	public class Order_colElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "order_col");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCol_refParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cASCKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cDESCKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCol_refParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Keyword cASCKeyword_1_2_0 = (Keyword)cAlternatives_1_2.eContents().get(0);
		private final Keyword cDESCKeyword_1_2_1 = (Keyword)cAlternatives_1_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//order_col:
		//	col_ref ("ASC" | "DESC")? | "(" col_ref ("ASC" | "DESC")? ")";
		public ParserRule getRule() { return rule; }

		//col_ref ("ASC" | "DESC")? | "(" col_ref ("ASC" | "DESC")? ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//col_ref ("ASC" | "DESC")?
		public Group getGroup_0() { return cGroup_0; }

		//col_ref
		public RuleCall getCol_refParserRuleCall_0_0() { return cCol_refParserRuleCall_0_0; }

		//("ASC" | "DESC")?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//"ASC"
		public Keyword getASCKeyword_0_1_0() { return cASCKeyword_0_1_0; }

		//"DESC"
		public Keyword getDESCKeyword_0_1_1() { return cDESCKeyword_0_1_1; }

		//"(" col_ref ("ASC" | "DESC")? ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//col_ref
		public RuleCall getCol_refParserRuleCall_1_1() { return cCol_refParserRuleCall_1_1; }

		//("ASC" | "DESC")?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//"ASC"
		public Keyword getASCKeyword_1_2_0() { return cASCKeyword_1_2_0; }

		//"DESC"
		public Keyword getDESCKeyword_1_2_1() { return cDESCKeyword_1_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class Partition_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "partition_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPARTITIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cFuncNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//partition_clause:
		//	"PARTITION" "BY" FuncName;
		public ParserRule getRule() { return rule; }

		//"PARTITION" "BY" FuncName
		public Group getGroup() { return cGroup; }

		//"PARTITION"
		public Keyword getPARTITIONKeyword_0() { return cPARTITIONKeyword_0; }

		//"BY"
		public Keyword getBYKeyword_1() { return cBYKeyword_1; }

		//FuncName
		public RuleCall getFuncNameParserRuleCall_2() { return cFuncNameParserRuleCall_2; }
	}

	public class Rel_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rel_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAliasTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeAliasTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//rel_list:
		//	type=AliasType ("," type=AliasType)*;
		public ParserRule getRule() { return rule; }

		//type=AliasType ("," type=AliasType)*
		public Group getGroup() { return cGroup; }

		//type=AliasType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_0_0() { return cTypeAliasTypeParserRuleCall_0_0; }

		//("," type=AliasType)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//type=AliasType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_1_1_0() { return cTypeAliasTypeParserRuleCall_1_1_0; }
	}

	public class Join_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "join_type");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//join_type:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class Join_sub_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "join_sub_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cJoin_itemParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLEFTKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cRIGHTKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cFULLKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cOUTERKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOthersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOthersJoin_itemParserRuleCall_3_1_0 = (RuleCall)cOthersAssignment_3_1.eContents().get(0);
		
		//join_sub_clause:
		//	join_item ("LEFT" | "RIGHT" | "FULL")? "OUTER"? ("," others=join_item)+;
		public ParserRule getRule() { return rule; }

		//join_item ("LEFT" | "RIGHT" | "FULL")? "OUTER"? ("," others=join_item)+
		public Group getGroup() { return cGroup; }

		//join_item
		public RuleCall getJoin_itemParserRuleCall_0() { return cJoin_itemParserRuleCall_0; }

		//("LEFT" | "RIGHT" | "FULL")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"LEFT"
		public Keyword getLEFTKeyword_1_0() { return cLEFTKeyword_1_0; }

		//"RIGHT"
		public Keyword getRIGHTKeyword_1_1() { return cRIGHTKeyword_1_1; }

		//"FULL"
		public Keyword getFULLKeyword_1_2() { return cFULLKeyword_1_2; }

		//"OUTER"?
		public Keyword getOUTERKeyword_2() { return cOUTERKeyword_2; }

		//("," others=join_item)+
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//others=join_item
		public Assignment getOthersAssignment_3_1() { return cOthersAssignment_3_1; }

		//join_item
		public RuleCall getOthersJoin_itemParserRuleCall_3_1_0() { return cOthersJoin_itemParserRuleCall_3_1_0; }
	}

	public class Join_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "join_item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAliasTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsJoin_group_by_clauseParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		
		//join_item:
		//	type=AliasType expressions=join_group_by_clause;
		public ParserRule getRule() { return rule; }

		//type=AliasType expressions=join_group_by_clause
		public Group getGroup() { return cGroup; }

		//type=AliasType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AliasType
		public RuleCall getTypeAliasTypeParserRuleCall_0_0() { return cTypeAliasTypeParserRuleCall_0_0; }

		//expressions=join_group_by_clause
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }

		//join_group_by_clause
		public RuleCall getExpressionsJoin_group_by_clauseParserRuleCall_1_0() { return cExpressionsJoin_group_by_clauseParserRuleCall_1_0; }
	}

	public class Group_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "group_item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cBYKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final RuleCall cJoin_group_by_expr_listParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Keyword cALLKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cANYKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cINNERKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cOUTERKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//group_item:
		//	("BY" join_group_by_expr_list | "ALL" | "ANY") ("INNER" | "OUTER")?;
		public ParserRule getRule() { return rule; }

		//("BY" join_group_by_expr_list | "ALL" | "ANY") ("INNER" | "OUTER")?
		public Group getGroup() { return cGroup; }

		//"BY" join_group_by_expr_list | "ALL" | "ANY"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"BY" join_group_by_expr_list
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"BY"
		public Keyword getBYKeyword_0_0_0() { return cBYKeyword_0_0_0; }

		//join_group_by_expr_list
		public RuleCall getJoin_group_by_expr_listParserRuleCall_0_0_1() { return cJoin_group_by_expr_listParserRuleCall_0_0_1; }

		//"ALL"
		public Keyword getALLKeyword_0_1() { return cALLKeyword_0_1; }

		//"ANY"
		public Keyword getANYKeyword_0_2() { return cANYKeyword_0_2; }

		//("INNER" | "OUTER")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"INNER"
		public Keyword getINNERKeyword_1_0() { return cINNERKeyword_1_0; }

		//"OUTER"
		public Keyword getOUTERKeyword_1_1() { return cOUTERKeyword_1_1; }
	}

	public class Join_group_by_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "join_group_by_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cJoin_group_by_expr_listParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//join_group_by_clause:
		//	"BY" join_group_by_expr_list;
		public ParserRule getRule() { return rule; }

		//"BY" join_group_by_expr_list
		public Group getGroup() { return cGroup; }

		//"BY"
		public Keyword getBYKeyword_0() { return cBYKeyword_0; }

		//join_group_by_expr_list
		public RuleCall getJoin_group_by_expr_listParserRuleCall_1() { return cJoin_group_by_expr_listParserRuleCall_1; }
	}

	public class Join_group_by_expr_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "join_group_by_expr_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJoin_group_by_exprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftJoin_group_by_exprParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExpressionsJoin_group_by_exprParserRuleCall_1_2_1_0 = (RuleCall)cExpressionsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//join_group_by_expr_list:
		//	join_group_by_expr | "(" left=join_group_by_expr ("," expressions=join_group_by_expr)* ")";
		public ParserRule getRule() { return rule; }

		//join_group_by_expr | "(" left=join_group_by_expr ("," expressions=join_group_by_expr)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//join_group_by_expr
		public RuleCall getJoin_group_by_exprParserRuleCall_0() { return cJoin_group_by_exprParserRuleCall_0; }

		//"(" left=join_group_by_expr ("," expressions=join_group_by_expr)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//left=join_group_by_expr
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }

		//join_group_by_expr
		public RuleCall getLeftJoin_group_by_exprParserRuleCall_1_1_0() { return cLeftJoin_group_by_exprParserRuleCall_1_1_0; }

		//("," expressions=join_group_by_expr)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//expressions=join_group_by_expr
		public Assignment getExpressionsAssignment_1_2_1() { return cExpressionsAssignment_1_2_1; }

		//join_group_by_expr
		public RuleCall getExpressionsJoin_group_by_exprParserRuleCall_1_2_1_0() { return cExpressionsJoin_group_by_exprParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class Join_group_by_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "join_group_by_expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTARParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//join_group_by_expr:
		//	Expression | STAR;
		public ParserRule getRule() { return rule; }

		//Expression | STAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//STAR
		public RuleCall getSTARParserRuleCall_1() { return cSTARParserRuleCall_1; }
	}

	public class Nested_blkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nested_blk");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNested_command_listParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cClausesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClausesGenerate_clauseParserRuleCall_2_0 = (RuleCall)cClausesAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//nested_blk:
		//	"{" nested_command_list clauses=generate_clause ";" "}";
		public ParserRule getRule() { return rule; }

		//"{" nested_command_list clauses=generate_clause ";" "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//nested_command_list
		public RuleCall getNested_command_listParserRuleCall_1() { return cNested_command_listParserRuleCall_1; }

		//clauses=generate_clause
		public Assignment getClausesAssignment_2() { return cClausesAssignment_2; }

		//generate_clause
		public RuleCall getClausesGenerate_clauseParserRuleCall_2_0() { return cClausesGenerate_clauseParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Generate_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "generate_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGENERATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsFlattenGeneratedItemParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cItemsFlattenGeneratedItemParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		
		//generate_clause:
		//	"GENERATE" items+=FlattenGeneratedItem ("," items+=FlattenGeneratedItem)*;
		public ParserRule getRule() { return rule; }

		//"GENERATE" items+=FlattenGeneratedItem ("," items+=FlattenGeneratedItem)*
		public Group getGroup() { return cGroup; }

		//"GENERATE"
		public Keyword getGENERATEKeyword_0() { return cGENERATEKeyword_0; }

		//items+=FlattenGeneratedItem
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }

		//FlattenGeneratedItem
		public RuleCall getItemsFlattenGeneratedItemParserRuleCall_1_0() { return cItemsFlattenGeneratedItemParserRuleCall_1_0; }

		//("," items+=FlattenGeneratedItem)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//items+=FlattenGeneratedItem
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }

		//FlattenGeneratedItem
		public RuleCall getItemsFlattenGeneratedItemParserRuleCall_2_1_0() { return cItemsFlattenGeneratedItemParserRuleCall_2_1_0; }
	}

	public class Nested_command_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nested_command_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNested_command_listAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCmdsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCmdsNested_commandParserRuleCall_1_0_0 = (RuleCall)cCmdsAssignment_1_0.eContents().get(0);
		private final RuleCall cSEMI_COLONParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//nested_command_list:
		//	{nested_command_list} (cmds+=nested_command SEMI_COLON)*;
		public ParserRule getRule() { return rule; }

		//{nested_command_list} (cmds+=nested_command SEMI_COLON)*
		public Group getGroup() { return cGroup; }

		//{nested_command_list}
		public Action getNested_command_listAction_0() { return cNested_command_listAction_0; }

		//(cmds+=nested_command SEMI_COLON)*
		public Group getGroup_1() { return cGroup_1; }

		//cmds+=nested_command
		public Assignment getCmdsAssignment_1_0() { return cCmdsAssignment_1_0; }

		//nested_command
		public RuleCall getCmdsNested_commandParserRuleCall_1_0_0() { return cCmdsNested_commandParserRuleCall_1_0_0; }

		//SEMI_COLON
		public RuleCall getSEMI_COLONParserRuleCall_1_1() { return cSEMI_COLONParserRuleCall_1_1; }
	}

	public class Nested_commandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nested_command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAliasParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNested_opParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//nested_command:
		//	Alias "=" nested_op;
		public ParserRule getRule() { return rule; }

		//Alias "=" nested_op
		public Group getGroup() { return cGroup; }

		//Alias
		public RuleCall getAliasParserRuleCall_0() { return cAliasParserRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//nested_op
		public RuleCall getNested_opParserRuleCall_2() { return cNested_opParserRuleCall_2; }
	}

	public class Nested_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nested_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNestedFilterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNested_sortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNested_distinctParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNested_limitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_4_0_1 = (RuleCall)cGroup_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final RuleCall cAddExpressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//// TODO some warning comes from here          
		//nested_op:
		//	NestedFilter | nested_sort | nested_distinct | nested_limit | ("(" Type ")")? AddExpression;
		public ParserRule getRule() { return rule; }

		//NestedFilter | nested_sort | nested_distinct | nested_limit | ("(" Type ")")? AddExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//NestedFilter
		public RuleCall getNestedFilterParserRuleCall_0() { return cNestedFilterParserRuleCall_0; }

		//nested_sort
		public RuleCall getNested_sortParserRuleCall_1() { return cNested_sortParserRuleCall_1; }

		//nested_distinct
		public RuleCall getNested_distinctParserRuleCall_2() { return cNested_distinctParserRuleCall_2; }

		//nested_limit
		public RuleCall getNested_limitParserRuleCall_3() { return cNested_limitParserRuleCall_3; }

		//("(" Type ")")? AddExpression
		public Group getGroup_4() { return cGroup_4; }

		//("(" Type ")")?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0_0() { return cLeftParenthesisKeyword_4_0_0; }

		//Type
		public RuleCall getTypeParserRuleCall_4_0_1() { return cTypeParserRuleCall_4_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_0_2() { return cRightParenthesisKeyword_4_0_2; }

		//AddExpression
		public RuleCall getAddExpressionParserRuleCall_4_1() { return cAddExpressionParserRuleCall_4_1; }
	}

	public class NestedFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFILTERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpVar_exprParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cBYKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondConditionParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		
		//NestedFilter:
		//	"FILTER" exp=var_expr "BY" cond=Condition;
		public ParserRule getRule() { return rule; }

		//"FILTER" exp=var_expr "BY" cond=Condition
		public Group getGroup() { return cGroup; }

		//"FILTER"
		public Keyword getFILTERKeyword_0() { return cFILTERKeyword_0; }

		//exp=var_expr
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//var_expr
		public RuleCall getExpVar_exprParserRuleCall_1_0() { return cExpVar_exprParserRuleCall_1_0; }

		//"BY"
		public Keyword getBYKeyword_2() { return cBYKeyword_2; }

		//cond=Condition
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }

		//Condition
		public RuleCall getCondConditionParserRuleCall_3_0() { return cCondConditionParserRuleCall_3_0; }
	}

	public class Nested_sortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nested_sort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cORDERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVar_exprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cBYKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cOrder_by_clauseParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUSINGKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cFuncClauseParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//nested_sort:
		//	"ORDER" var_expr "BY" order_by_clause ("USING" FuncClause)?;
		public ParserRule getRule() { return rule; }

		//"ORDER" var_expr "BY" order_by_clause ("USING" FuncClause)?
		public Group getGroup() { return cGroup; }

		//"ORDER"
		public Keyword getORDERKeyword_0() { return cORDERKeyword_0; }

		//var_expr
		public RuleCall getVar_exprParserRuleCall_1() { return cVar_exprParserRuleCall_1; }

		//"BY"
		public Keyword getBYKeyword_2() { return cBYKeyword_2; }

		//order_by_clause
		public RuleCall getOrder_by_clauseParserRuleCall_3() { return cOrder_by_clauseParserRuleCall_3; }

		//("USING" FuncClause)?
		public Group getGroup_4() { return cGroup_4; }

		//"USING"
		public Keyword getUSINGKeyword_4_0() { return cUSINGKeyword_4_0; }

		//FuncClause
		public RuleCall getFuncClauseParserRuleCall_4_1() { return cFuncClauseParserRuleCall_4_1; }
	}

	public class Nested_distinctElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nested_distinct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDISTINCTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVar_exprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//nested_distinct:
		//	"DISTINCT" var_expr;
		public ParserRule getRule() { return rule; }

		//"DISTINCT" var_expr
		public Group getGroup() { return cGroup; }

		//"DISTINCT"
		public Keyword getDISTINCTKeyword_0() { return cDISTINCTKeyword_0; }

		//var_expr
		public RuleCall getVar_exprParserRuleCall_1() { return cVar_exprParserRuleCall_1; }
	}

	public class Nested_limitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nested_limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLIMITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVar_exprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cLONGINTEGERTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//nested_limit:
		//	"LIMIT" var_expr (INT | LONGINTEGER);
		public ParserRule getRule() { return rule; }

		//"LIMIT" var_expr (INT | LONGINTEGER)
		public Group getGroup() { return cGroup; }

		//"LIMIT"
		public Keyword getLIMITKeyword_0() { return cLIMITKeyword_0; }

		//var_expr
		public RuleCall getVar_exprParserRuleCall_1() { return cVar_exprParserRuleCall_1; }

		//INT | LONGINTEGER
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_0() { return cINTTerminalRuleCall_2_0; }

		//LONGINTEGER
		public RuleCall getLONGINTEGERTerminalRuleCall_2_1() { return cLONGINTEGERTerminalRuleCall_2_1; }
	}

	public class Split_branchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "split_branch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cIFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//split_branch:
		//	IDENTIFIER "IF" Condition;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER "IF" Condition
		public Group getGroup() { return cGroup; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }

		//"IF"
		public Keyword getIFKeyword_1() { return cIFKeyword_1; }

		//Condition
		public RuleCall getConditionParserRuleCall_2() { return cConditionParserRuleCall_2; }
	}

	public class Col_refElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "col_ref");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlias_col_refParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDollar_col_refParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//col_ref:
		//	alias_col_ref | dollar_col_ref;
		public ParserRule getRule() { return rule; }

		//alias_col_ref | dollar_col_ref
		public Alternatives getAlternatives() { return cAlternatives; }

		//alias_col_ref
		public RuleCall getAlias_col_refParserRuleCall_0() { return cAlias_col_refParserRuleCall_0; }

		//dollar_col_ref
		public RuleCall getDollar_col_refParserRuleCall_1() { return cDollar_col_refParserRuleCall_1; }
	}

	public class Alias_col_refElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alias_col_ref");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGROUPKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//alias_col_ref:
		//	"GROUP" | IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//"GROUP" | IDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }

		//"GROUP"
		public Keyword getGROUPKeyword_0() { return cGROUPKeyword_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_1() { return cIDENTIFIERParserRuleCall_1; }
	}

	public class Dollar_col_refElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dollar_col_ref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDOLLARParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//dollar_col_ref:
		//	DOLLAR INT;
		public ParserRule getRule() { return rule; }

		//DOLLAR INT
		public Group getGroup() { return cGroup; }

		//DOLLAR
		public RuleCall getDOLLARParserRuleCall_0() { return cDOLLARParserRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class Const_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "const_expr");
		private final RuleCall cLiteralParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//const_expr:
		//	literal;
		public ParserRule getRule() { return rule; }

		//literal
		public RuleCall getLiteralParserRuleCall() { return cLiteralParserRuleCall; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScalarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cUKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNULLKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//literal:
		//	scalar | STRING | "\\u" | //| map | bag | tuple // const type?
		//	"NULL";
		public ParserRule getRule() { return rule; }

		//scalar | STRING | "\\u" | //| map | bag | tuple // const type?
		//"NULL"
		public Alternatives getAlternatives() { return cAlternatives; }

		//scalar
		public RuleCall getScalarParserRuleCall_0() { return cScalarParserRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//"\\u"
		public Keyword getUKeyword_2() { return cUKeyword_2; }

		////| map | bag | tuple // const type?
		//"NULL"
		public Keyword getNULLKeyword_3() { return cNULLKeyword_3; }
	}

	public class ScalarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scalar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLOATINGPOINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScalarIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//scalar:
		//	FLOATINGPOINT | //INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | MYQUOTEDSTRING | NULL
		//	scalarInt;
		public ParserRule getRule() { return rule; }

		//FLOATINGPOINT | //INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | MYQUOTEDSTRING | NULL
		//scalarInt
		public Alternatives getAlternatives() { return cAlternatives; }

		//FLOATINGPOINT
		public RuleCall getFLOATINGPOINTTerminalRuleCall_0() { return cFLOATINGPOINTTerminalRuleCall_0; }

		////INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | MYQUOTEDSTRING | NULL
		//scalarInt
		public RuleCall getScalarIntParserRuleCall_1() { return cScalarIntParserRuleCall_1; }
	}

	public class ScalarIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scalarInt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDIGITTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLONGINTEGERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cDollarSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//scalarInt:
		//	DIGIT // TODO warning
		//	| INT | LONGINTEGER | "$" ID;
		public ParserRule getRule() { return rule; }

		//DIGIT // TODO warning
		//| INT | LONGINTEGER | "$" ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_0() { return cDIGITTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//LONGINTEGER
		public RuleCall getLONGINTEGERTerminalRuleCall_2() { return cLONGINTEGERTerminalRuleCall_2; }

		//"$" ID
		public Group getGroup_3() { return cGroup_3; }

		//"$"
		public Keyword getDollarSignKeyword_3_0() { return cDollarSignKeyword_3_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }
	}
	
	
	private QueryElements pQuery;
	private StatementElements pStatement;
	private DefineStatementElements pDefineStatement;
	private LoadStatementElements pLoadStatement;
	private ForeachStatementElements pForeachStatement;
	private FilterStatementElements pFilterStatement;
	private GroupByStatementElements pGroupByStatement;
	private CoGroupByStatementElements pCoGroupByStatement;
	private TerminalRule tCOGROUP_TYPE;
	private OrderStatementElements pOrderStatement;
	private CrossStatementElements pCrossStatement;
	private UnionStatementElements pUnionStatement;
	private JoinStatementElements pJoinStatement;
	private LimitStatementElements pLimitStatement;
	private SampleStatementElements pSampleStatement;
	private DistinctStatementElements pDistinctStatement;
	private StreamStatementElements pStreamStatement;
	private MrStatementElements pMrStatement;
	private SplitStatementElements pSplitStatement;
	private StoreStatementElements pStoreStatement;
	private DescribeStatementElements pDescribeStatement;
	private ExplainStatementElements pExplainStatement;
	private DumpStatementElements pDumpStatement;
	private ConditionElements pCondition;
	private OrConditionElements pOrCondition;
	private AndConditionElements pAndCondition;
	private UnaryConditionElements pUnaryCondition;
	private TEElements pTE;
	private Func_evalElements pFunc_eval;
	private Real_arg_listElements pReal_arg_list;
	private Real_argElements pReal_arg;
	private ExpressionElements pExpression;
	private AddExpressionElements pAddExpression;
	private Multi_exprElements pMulti_expr;
	private Cast_exprElements pCast_expr;
	private Unary_exprElements pUnary_expr;
	private Expr_evalElements pExpr_eval;
	private Var_exprElements pVar_expr;
	private Projectable_exprElements pProjectable_expr;
	private Dot_projElements pDot_proj;
	private Col_alias_or_indexElements pCol_alias_or_index;
	private Col_aliasElements pCol_alias;
	private Col_indexElements pCol_index;
	private Pound_projElements pPound_proj;
	private Bin_exprElements pBin_expr;
	private Neg_exprElements pNeg_expr;
	private Rel_opElements pRel_op;
	private Rel_op_eqElements pRel_op_eq;
	private Rel_op_neElements pRel_op_ne;
	private Rel_op_gtElements pRel_op_gt;
	private Rel_op_gteElements pRel_op_gte;
	private Rel_op_ltElements pRel_op_lt;
	private Rel_op_lteElements pRel_op_lte;
	private AliasTypeElements pAliasType;
	private FlattenGeneratedItemElements pFlattenGeneratedItem;
	private CommentStatementElements pCommentStatement;
	private AliasElements pAlias;
	private ParallelClauseElements pParallelClause;
	private RegisterClauseElements pRegisterClause;
	private DefaultClauseElements pDefaultClause;
	private DeclareClauseElements pDeclareClause;
	private DefineClauseElements pDefineClause;
	private LoadUsingElements pLoadUsing;
	private FuncClauseElements pFuncClause;
	private FuncNameElements pFuncName;
	private PathClauseElements pPathClause;
	private AsClauseElements pAsClause;
	private AliasDefElements pAliasDef;
	private AliasDefListElements pAliasDefList;
	private IDENTIFIERElements pIDENTIFIER;
	private FieldDefElements pFieldDef;
	private FieldFefListElements pFieldFefList;
	private TypeElements pType;
	private SimpleTypeElements pSimpleType;
	private TupleTypeElements pTupleType;
	private Bag_typeElements pBag_type;
	private MapTypeElements pMapType;
	private CmdElements pCmd;
	private TerminalRule tSL_COMMENT;
	private STR_OP_EQElements pSTR_OP_EQ;
	private STR_OP_GTElements pSTR_OP_GT;
	private STR_OP_LTElements pSTR_OP_LT;
	private STR_OP_GTEElements pSTR_OP_GTE;
	private STR_OP_LTEElements pSTR_OP_LTE;
	private STR_OP_NEElements pSTR_OP_NE;
	private STR_OP_MATCHESElements pSTR_OP_MATCHES;
	private NUM_OP_EQElements pNUM_OP_EQ;
	private NUM_OP_LTElements pNUM_OP_LT;
	private NUM_OP_LTEElements pNUM_OP_LTE;
	private NUM_OP_GTElements pNUM_OP_GT;
	private NUM_OP_GTEElements pNUM_OP_GTE;
	private NUM_OP_NEElements pNUM_OP_NE;
	private SEMI_COLONElements pSEMI_COLON;
	private LEFT_PARENElements pLEFT_PAREN;
	private RIGHT_PARENElements pRIGHT_PAREN;
	private LEFT_CURLYElements pLEFT_CURLY;
	private RIGHT_CURLYElements pRIGHT_CURLY;
	private LEFT_BRACKETElements pLEFT_BRACKET;
	private RIGHT_BRACKETElements pRIGHT_BRACKET;
	private POUNDElements pPOUND;
	private EQUALElements pEQUAL;
	private COMMAElements pCOMMA;
	private PERIODElements pPERIOD;
	private DIVElements pDIV;
	private PERCENTElements pPERCENT;
	private PLUSElements pPLUS;
	private MINUSElements pMINUS;
	private TerminalRule tDIGIT;
	private TerminalRule tLETTER;
	private TerminalRule tSPECIALCHAR;
	private TerminalRule tFLOATINGPOINT;
	private TerminalRule tLONGINTEGER;
	private TerminalRule tDOUBLENUMBER;
	private TerminalRule tEXECCOMMAND;
	private STARElements pSTAR;
	private COLONElements pCOLON;
	private DOLLARElements pDOLLAR;
	private Group_typeElements pGroup_type;
	private Group_item_listElements pGroup_item_list;
	private Order_by_clauseElements pOrder_by_clause;
	private Order_col_listElements pOrder_col_list;
	private Order_colElements pOrder_col;
	private Partition_clauseElements pPartition_clause;
	private Rel_listElements pRel_list;
	private Join_typeElements pJoin_type;
	private Join_sub_clauseElements pJoin_sub_clause;
	private Join_itemElements pJoin_item;
	private Group_itemElements pGroup_item;
	private Join_group_by_clauseElements pJoin_group_by_clause;
	private Join_group_by_expr_listElements pJoin_group_by_expr_list;
	private Join_group_by_exprElements pJoin_group_by_expr;
	private Nested_blkElements pNested_blk;
	private Generate_clauseElements pGenerate_clause;
	private Nested_command_listElements pNested_command_list;
	private Nested_commandElements pNested_command;
	private Nested_opElements pNested_op;
	private NestedFilterElements pNestedFilter;
	private Nested_sortElements pNested_sort;
	private Nested_distinctElements pNested_distinct;
	private Nested_limitElements pNested_limit;
	private Split_branchElements pSplit_branch;
	private Col_refElements pCol_ref;
	private Alias_col_refElements pAlias_col_ref;
	private Dollar_col_refElements pDollar_col_ref;
	private Const_exprElements pConst_expr;
	private LiteralElements pLiteral;
	private ScalarElements pScalar;
	private ScalarIntElements pScalarInt;
	private TerminalRule tBACKQUOTE_STRING;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PigGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Grammar heavily borrowed from Pig and adapted to Xtext. 
	// * 
	// * There are a few conflicts to solve.
	// * / Query:
	//	elements+=Statement*;
	public QueryElements getQueryAccess() {
		return (pQuery != null) ? pQuery : (pQuery = new QueryElements());
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//Statement:
	//	(DefineStatement | LoadStatement | (ForeachStatement | FilterStatement | GroupByStatement | OrderStatement |
	//	LimitStatement | DistinctStatement | CrossStatement | JoinStatement | CoGroupByStatement | StreamStatement)
	//	ParallelClause? | MrStatement | SplitStatement | UnionStatement | SampleStatement | StoreStatement | DumpStatement |
	//	DescribeStatement | ExplainStatement) ";" | DeclareClause | CommentStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//DefineStatement:
	//	RegisterClause | DefineClause | DefaultClause;
	public DefineStatementElements getDefineStatementAccess() {
		return (pDefineStatement != null) ? pDefineStatement : (pDefineStatement = new DefineStatementElements());
	}
	
	public ParserRule getDefineStatementRule() {
		return getDefineStatementAccess().getRule();
	}

	//LoadStatement:
	//	name=Alias "=" "LOAD" STRING LoadUsing? AsClause?;
	public LoadStatementElements getLoadStatementAccess() {
		return (pLoadStatement != null) ? pLoadStatement : (pLoadStatement = new LoadStatementElements());
	}
	
	public ParserRule getLoadStatementRule() {
		return getLoadStatementAccess().getRule();
	}

	//ForeachStatement:
	//	name=Alias "=" "FOREACH" type=AliasType (items+=nested_blk ";"? | items+=generate_clause);
	public ForeachStatementElements getForeachStatementAccess() {
		return (pForeachStatement != null) ? pForeachStatement : (pForeachStatement = new ForeachStatementElements());
	}
	
	public ParserRule getForeachStatementRule() {
		return getForeachStatementAccess().getRule();
	}

	//FilterStatement:
	//	name=Alias "=" "FILTER" type=AliasType "BY" cond=Condition;
	public FilterStatementElements getFilterStatementAccess() {
		return (pFilterStatement != null) ? pFilterStatement : (pFilterStatement = new FilterStatementElements());
	}
	
	public ParserRule getFilterStatementRule() {
		return getFilterStatementAccess().getRule();
	}

	//GroupByStatement:
	//	name=Alias "=" "GROUP" type=AliasType items=group_item_list ("USING" group_type)? partition_clause?;
	public GroupByStatementElements getGroupByStatementAccess() {
		return (pGroupByStatement != null) ? pGroupByStatement : (pGroupByStatement = new GroupByStatementElements());
	}
	
	public ParserRule getGroupByStatementRule() {
		return getGroupByStatementAccess().getRule();
	}

	//CoGroupByStatement:
	//	name=Alias "=" "COGROUP" aliases=join_sub_clause ("USING" COGROUP_TYPE)? partition_clause?;
	public CoGroupByStatementElements getCoGroupByStatementAccess() {
		return (pCoGroupByStatement != null) ? pCoGroupByStatement : (pCoGroupByStatement = new CoGroupByStatementElements());
	}
	
	public ParserRule getCoGroupByStatementRule() {
		return getCoGroupByStatementAccess().getRule();
	}

	//terminal COGROUP_TYPE:
	//	"\'" "merge" "\'";
	public TerminalRule getCOGROUP_TYPERule() {
		return (tCOGROUP_TYPE != null) ? tCOGROUP_TYPE : (tCOGROUP_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COGROUP_TYPE"));
	} 

	//OrderStatement:
	//	name=Alias "=" "ORDER" type=AliasType "BY" order_by_clause ("USING" FuncClause)?;
	public OrderStatementElements getOrderStatementAccess() {
		return (pOrderStatement != null) ? pOrderStatement : (pOrderStatement = new OrderStatementElements());
	}
	
	public ParserRule getOrderStatementRule() {
		return getOrderStatementAccess().getRule();
	}

	//CrossStatement:
	//	name=Alias "=" "CROSS" aliases=rel_list partition_clause?;
	public CrossStatementElements getCrossStatementAccess() {
		return (pCrossStatement != null) ? pCrossStatement : (pCrossStatement = new CrossStatementElements());
	}
	
	public ParserRule getCrossStatementRule() {
		return getCrossStatementAccess().getRule();
	}

	//UnionStatement:
	//	name=Alias "=" "UNION" "ON" aliases=rel_list;
	public UnionStatementElements getUnionStatementAccess() {
		return (pUnionStatement != null) ? pUnionStatement : (pUnionStatement = new UnionStatementElements());
	}
	
	public ParserRule getUnionStatementRule() {
		return getUnionStatementAccess().getRule();
	}

	//JoinStatement:
	//	name=Alias "=" "JOIN" aliases=join_sub_clause ("USING" join_type)? partition_clause?;
	public JoinStatementElements getJoinStatementAccess() {
		return (pJoinStatement != null) ? pJoinStatement : (pJoinStatement = new JoinStatementElements());
	}
	
	public ParserRule getJoinStatementRule() {
		return getJoinStatementAccess().getRule();
	}

	//LimitStatement:
	//	name=Alias "=" "LIMIT" type=AliasType scalarInt;
	public LimitStatementElements getLimitStatementAccess() {
		return (pLimitStatement != null) ? pLimitStatement : (pLimitStatement = new LimitStatementElements());
	}
	
	public ParserRule getLimitStatementRule() {
		return getLimitStatementAccess().getRule();
	}

	//SampleStatement:
	//	name=Alias "=" "SAMPLE" type=AliasType DOUBLENUMBER;
	public SampleStatementElements getSampleStatementAccess() {
		return (pSampleStatement != null) ? pSampleStatement : (pSampleStatement = new SampleStatementElements());
	}
	
	public ParserRule getSampleStatementRule() {
		return getSampleStatementAccess().getRule();
	}

	//DistinctStatement:
	//	name=Alias "=" "DISTINCT" type=AliasType partition_clause?;
	public DistinctStatementElements getDistinctStatementAccess() {
		return (pDistinctStatement != null) ? pDistinctStatement : (pDistinctStatement = new DistinctStatementElements());
	}
	
	public ParserRule getDistinctStatementRule() {
		return getDistinctStatementAccess().getRule();
	}

	//StreamStatement:
	//	name=Alias "=" "STREAM" type=AliasType "THROUGH" (EXECCOMMAND | IDENTIFIER) AsClause?;
	public StreamStatementElements getStreamStatementAccess() {
		return (pStreamStatement != null) ? pStreamStatement : (pStreamStatement = new StreamStatementElements());
	}
	
	public ParserRule getStreamStatementRule() {
		return getStreamStatementAccess().getRule();
	}

	//MrStatement:
	//	name=Alias "=" "MAPREDUCE" STRING StoreStatement load=LoadStatement EXECCOMMAND?;
	public MrStatementElements getMrStatementAccess() {
		return (pMrStatement != null) ? pMrStatement : (pMrStatement = new MrStatementElements());
	}
	
	public ParserRule getMrStatementRule() {
		return getMrStatementAccess().getRule();
	}

	//SplitStatement:
	//	name=Alias "=" "SPLIT" type=AliasType "INTO" branches+=split_branch ("," branches+=split_branch)+;
	public SplitStatementElements getSplitStatementAccess() {
		return (pSplitStatement != null) ? pSplitStatement : (pSplitStatement = new SplitStatementElements());
	}
	
	public ParserRule getSplitStatementRule() {
		return getSplitStatementAccess().getRule();
	}

	//StoreStatement:
	//	"STORE" type=AliasType "INTO" STRING ("USING" FuncClause)?;
	public StoreStatementElements getStoreStatementAccess() {
		return (pStoreStatement != null) ? pStoreStatement : (pStoreStatement = new StoreStatementElements());
	}
	
	public ParserRule getStoreStatementRule() {
		return getStoreStatementAccess().getRule();
	}

	//DescribeStatement:
	//	"DESCRIBE" type=AliasType;
	public DescribeStatementElements getDescribeStatementAccess() {
		return (pDescribeStatement != null) ? pDescribeStatement : (pDescribeStatement = new DescribeStatementElements());
	}
	
	public ParserRule getDescribeStatementRule() {
		return getDescribeStatementAccess().getRule();
	}

	//ExplainStatement:
	//	"EXPLAIN" type=AliasType;
	public ExplainStatementElements getExplainStatementAccess() {
		return (pExplainStatement != null) ? pExplainStatement : (pExplainStatement = new ExplainStatementElements());
	}
	
	public ParserRule getExplainStatementRule() {
		return getExplainStatementAccess().getRule();
	}

	//DumpStatement:
	//	"DUMP" type=AliasType;
	public DumpStatementElements getDumpStatementAccess() {
		return (pDumpStatement != null) ? pDumpStatement : (pDumpStatement = new DumpStatementElements());
	}
	
	public ParserRule getDumpStatementRule() {
		return getDumpStatementAccess().getRule();
	}

	//Condition:
	//	("(" Type ")")? OrCondition;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//OrCondition returns Condition:
	//	AndCondition ({OrCondition.left=current} "OR" right=AndCondition)*;
	public OrConditionElements getOrConditionAccess() {
		return (pOrCondition != null) ? pOrCondition : (pOrCondition = new OrConditionElements());
	}
	
	public ParserRule getOrConditionRule() {
		return getOrConditionAccess().getRule();
	}

	//AndCondition returns Condition:
	//	UnaryCondition ({AndCondition.left=current} "AND" right=UnaryCondition)*;
	public AndConditionElements getAndConditionAccess() {
		return (pAndCondition != null) ? pAndCondition : (pAndCondition = new AndConditionElements());
	}
	
	public ParserRule getAndConditionRule() {
		return getAndConditionAccess().getRule();
	}

	//UnaryCondition returns Condition: // - / % + 0.0
	//	"(" Condition ("?" leftExp=Condition ":" rightExp=Condition)? ")" ({UnaryCondition.left=current} "+" right=Condition)?
	//	| //null_check_cond | // to LL refactor
	//	TE ({UnaryCondition.left=current} rel_op right=TE)?;
	public UnaryConditionElements getUnaryConditionAccess() {
		return (pUnaryCondition != null) ? pUnaryCondition : (pUnaryCondition = new UnaryConditionElements());
	}
	
	public ParserRule getUnaryConditionRule() {
		return getUnaryConditionAccess().getRule();
	}

	//TE returns Condition:
	//	Expression ("IS" "NOT"? "NULL")?;
	public TEElements getTEAccess() {
		return (pTE != null) ? pTE : (pTE = new TEElements());
	}
	
	public ParserRule getTERule() {
		return getTEAccess().getRule();
	}

	//func_eval:
	//	FuncName {func_eval} "(" arg_list=real_arg_list? ")";
	public Func_evalElements getFunc_evalAccess() {
		return (pFunc_eval != null) ? pFunc_eval : (pFunc_eval = new Func_evalElements());
	}
	
	public ParserRule getFunc_evalRule() {
		return getFunc_evalAccess().getRule();
	}

	//real_arg_list:
	//	args+=real_arg ("," args+=real_arg)*;
	public Real_arg_listElements getReal_arg_listAccess() {
		return (pReal_arg_list != null) ? pReal_arg_list : (pReal_arg_list = new Real_arg_listElements());
	}
	
	public ParserRule getReal_arg_listRule() {
		return getReal_arg_listAccess().getRule();
	}

	//real_arg:
	//	Condition | STAR;
	public Real_argElements getReal_argAccess() {
		return (pReal_arg != null) ? pReal_arg : (pReal_arg = new Real_argElements());
	}
	
	public ParserRule getReal_argRule() {
		return getReal_argAccess().getRule();
	}

	//Expression:
	//	"NOT"? AddExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AddExpression returns Expression:
	//	multi_expr ((PLUS | MINUS) mul_exp=multi_expr)*;
	public AddExpressionElements getAddExpressionAccess() {
		return (pAddExpression != null) ? pAddExpression : (pAddExpression = new AddExpressionElements());
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//multi_expr returns Expression:
	//	cast_expr ((STAR | DIV | PERCENT) mul_cast=cast_expr)*;
	public Multi_exprElements getMulti_exprAccess() {
		return (pMulti_expr != null) ? pMulti_expr : (pMulti_expr = new Multi_exprElements());
	}
	
	public ParserRule getMulti_exprRule() {
		return getMulti_exprAccess().getRule();
	}

	//cast_expr returns Expression:
	//	unary_expr;
	public Cast_exprElements getCast_exprAccess() {
		return (pCast_expr != null) ? pCast_expr : (pCast_expr = new Cast_exprElements());
	}
	
	public ParserRule getCast_exprRule() {
		return getCast_exprAccess().getRule();
	}

	//unary_expr returns Expression:
	//	expr_eval | neg_expr;
	public Unary_exprElements getUnary_exprAccess() {
		return (pUnary_expr != null) ? pUnary_expr : (pUnary_expr = new Unary_exprElements());
	}
	
	public ParserRule getUnary_exprRule() {
		return getUnary_exprAccess().getRule();
	}

	//expr_eval returns Expression:
	//	const_expr | var_expr;
	public Expr_evalElements getExpr_evalAccess() {
		return (pExpr_eval != null) ? pExpr_eval : (pExpr_eval = new Expr_evalElements());
	}
	
	public ParserRule getExpr_evalRule() {
		return getExpr_evalAccess().getRule();
	}

	//var_expr:
	//	projectable_expr (dot_proj | pound_proj)*;
	public Var_exprElements getVar_exprAccess() {
		return (pVar_expr != null) ? pVar_expr : (pVar_expr = new Var_exprElements());
	}
	
	public ParserRule getVar_exprRule() {
		return getVar_exprAccess().getRule();
	}

	//projectable_expr:
	//	func_eval | col_ref;
	public Projectable_exprElements getProjectable_exprAccess() {
		return (pProjectable_expr != null) ? pProjectable_expr : (pProjectable_expr = new Projectable_exprElements());
	}
	
	public ParserRule getProjectable_exprRule() {
		return getProjectable_exprAccess().getRule();
	}

	//dot_proj:
	//	("." | "::") col_alias_or_index;
	public Dot_projElements getDot_projAccess() {
		return (pDot_proj != null) ? pDot_proj : (pDot_proj = new Dot_projElements());
	}
	
	public ParserRule getDot_projRule() {
		return getDot_projAccess().getRule();
	}

	//col_alias_or_index:
	//	col_alias | col_index;
	public Col_alias_or_indexElements getCol_alias_or_indexAccess() {
		return (pCol_alias_or_index != null) ? pCol_alias_or_index : (pCol_alias_or_index = new Col_alias_or_indexElements());
	}
	
	public ParserRule getCol_alias_or_indexRule() {
		return getCol_alias_or_indexAccess().getRule();
	}

	//col_alias:
	//	IDENTIFIER;
	public Col_aliasElements getCol_aliasAccess() {
		return (pCol_alias != null) ? pCol_alias : (pCol_alias = new Col_aliasElements());
	}
	
	public ParserRule getCol_aliasRule() {
		return getCol_aliasAccess().getRule();
	}

	//col_index:
	//	DOLLAR (DIGIT | INT);
	public Col_indexElements getCol_indexAccess() {
		return (pCol_index != null) ? pCol_index : (pCol_index = new Col_indexElements());
	}
	
	public ParserRule getCol_indexRule() {
		return getCol_indexAccess().getRule();
	}

	//pound_proj:
	//	POUND (STRING | "NULL");
	public Pound_projElements getPound_projAccess() {
		return (pPound_proj != null) ? pPound_proj : (pPound_proj = new Pound_projElements());
	}
	
	public ParserRule getPound_projRule() {
		return getPound_projAccess().getRule();
	}

	//bin_expr:
	//	"(" Condition "?" leftExp=Expression ":" rightExp=Expression ")";
	public Bin_exprElements getBin_exprAccess() {
		return (pBin_expr != null) ? pBin_expr : (pBin_expr = new Bin_exprElements());
	}
	
	public ParserRule getBin_exprRule() {
		return getBin_exprAccess().getRule();
	}

	//neg_expr returns Expression:
	//	"-" cast_expr;
	public Neg_exprElements getNeg_exprAccess() {
		return (pNeg_expr != null) ? pNeg_expr : (pNeg_expr = new Neg_exprElements());
	}
	
	public ParserRule getNeg_exprRule() {
		return getNeg_exprAccess().getRule();
	}

	//rel_op:
	//	rel_op_eq | rel_op_ne | rel_op_gt | rel_op_gte | rel_op_lt | rel_op_lte | "MATCHES";
	public Rel_opElements getRel_opAccess() {
		return (pRel_op != null) ? pRel_op : (pRel_op = new Rel_opElements());
	}
	
	public ParserRule getRel_opRule() {
		return getRel_opAccess().getRule();
	}

	//rel_op_eq:
	//	STR_OP_EQ | NUM_OP_EQ;
	public Rel_op_eqElements getRel_op_eqAccess() {
		return (pRel_op_eq != null) ? pRel_op_eq : (pRel_op_eq = new Rel_op_eqElements());
	}
	
	public ParserRule getRel_op_eqRule() {
		return getRel_op_eqAccess().getRule();
	}

	//rel_op_ne:
	//	STR_OP_NE | NUM_OP_NE;
	public Rel_op_neElements getRel_op_neAccess() {
		return (pRel_op_ne != null) ? pRel_op_ne : (pRel_op_ne = new Rel_op_neElements());
	}
	
	public ParserRule getRel_op_neRule() {
		return getRel_op_neAccess().getRule();
	}

	//rel_op_gt:
	//	STR_OP_GT | NUM_OP_GT;
	public Rel_op_gtElements getRel_op_gtAccess() {
		return (pRel_op_gt != null) ? pRel_op_gt : (pRel_op_gt = new Rel_op_gtElements());
	}
	
	public ParserRule getRel_op_gtRule() {
		return getRel_op_gtAccess().getRule();
	}

	//rel_op_gte:
	//	STR_OP_GTE | NUM_OP_GTE;
	public Rel_op_gteElements getRel_op_gteAccess() {
		return (pRel_op_gte != null) ? pRel_op_gte : (pRel_op_gte = new Rel_op_gteElements());
	}
	
	public ParserRule getRel_op_gteRule() {
		return getRel_op_gteAccess().getRule();
	}

	//rel_op_lt:
	//	STR_OP_LT | NUM_OP_LT;
	public Rel_op_ltElements getRel_op_ltAccess() {
		return (pRel_op_lt != null) ? pRel_op_lt : (pRel_op_lt = new Rel_op_ltElements());
	}
	
	public ParserRule getRel_op_ltRule() {
		return getRel_op_ltAccess().getRule();
	}

	//rel_op_lte:
	//	STR_OP_LTE | NUM_OP_LTE;
	public Rel_op_lteElements getRel_op_lteAccess() {
		return (pRel_op_lte != null) ? pRel_op_lte : (pRel_op_lte = new Rel_op_lteElements());
	}
	
	public ParserRule getRel_op_lteRule() {
		return getRel_op_lteAccess().getRule();
	}

	//AliasType:
	//	referenced=[Statement];
	public AliasTypeElements getAliasTypeAccess() {
		return (pAliasType != null) ? pAliasType : (pAliasType = new AliasTypeElements());
	}
	
	public ParserRule getAliasTypeRule() {
		return getAliasTypeAccess().getRule();
	}

	//FlattenGeneratedItem:
	//	(Condition | "*") ("AS" (FieldDef | FieldFefList))?;
	public FlattenGeneratedItemElements getFlattenGeneratedItemAccess() {
		return (pFlattenGeneratedItem != null) ? pFlattenGeneratedItem : (pFlattenGeneratedItem = new FlattenGeneratedItemElements());
	}
	
	public ParserRule getFlattenGeneratedItemRule() {
		return getFlattenGeneratedItemAccess().getRule();
	}

	//CommentStatement:
	//	SL_COMMENT;
	public CommentStatementElements getCommentStatementAccess() {
		return (pCommentStatement != null) ? pCommentStatement : (pCommentStatement = new CommentStatementElements());
	}
	
	public ParserRule getCommentStatementRule() {
		return getCommentStatementAccess().getRule();
	}

	//Alias:
	//	ID;
	public AliasElements getAliasAccess() {
		return (pAlias != null) ? pAlias : (pAlias = new AliasElements());
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}

	//ParallelClause:
	//	"PARALLEL" scalarInt;
	public ParallelClauseElements getParallelClauseAccess() {
		return (pParallelClause != null) ? pParallelClause : (pParallelClause = new ParallelClauseElements());
	}
	
	public ParserRule getParallelClauseRule() {
		return getParallelClauseAccess().getRule();
	}

	//RegisterClause:
	//	"REGISTER" PathClause;
	public RegisterClauseElements getRegisterClauseAccess() {
		return (pRegisterClause != null) ? pRegisterClause : (pRegisterClause = new RegisterClauseElements());
	}
	
	public ParserRule getRegisterClauseRule() {
		return getRegisterClauseAccess().getRule();
	}

	//DefaultClause:
	//	"%DEFAULT" name=Alias STRING;
	public DefaultClauseElements getDefaultClauseAccess() {
		return (pDefaultClause != null) ? pDefaultClause : (pDefaultClause = new DefaultClauseElements());
	}
	
	public ParserRule getDefaultClauseRule() {
		return getDefaultClauseAccess().getRule();
	}

	//DeclareClause:
	//	"%DECLARE" name=Alias (STRING | EXECCOMMAND);
	public DeclareClauseElements getDeclareClauseAccess() {
		return (pDeclareClause != null) ? pDeclareClause : (pDeclareClause = new DeclareClauseElements());
	}
	
	public ParserRule getDeclareClauseRule() {
		return getDeclareClauseAccess().getRule();
	}

	//DefineClause:
	//	"DEFINE" name=Alias FuncClause;
	public DefineClauseElements getDefineClauseAccess() {
		return (pDefineClause != null) ? pDefineClause : (pDefineClause = new DefineClauseElements());
	}
	
	public ParserRule getDefineClauseRule() {
		return getDefineClauseAccess().getRule();
	}

	//LoadUsing:
	//	"USING" FuncClause;
	public LoadUsingElements getLoadUsingAccess() {
		return (pLoadUsing != null) ? pLoadUsing : (pLoadUsing = new LoadUsingElements());
	}
	
	public ParserRule getLoadUsingRule() {
		return getLoadUsingAccess().getRule();
	}

	//FuncClause:
	//	FuncName "(" STRING? ("," STRING)* ")";
	public FuncClauseElements getFuncClauseAccess() {
		return (pFuncClause != null) ? pFuncClause : (pFuncClause = new FuncClauseElements());
	}
	
	public ParserRule getFuncClauseRule() {
		return getFuncClauseAccess().getRule();
	}

	//FuncName:
	//	(ID | "." | "$")+;
	public FuncNameElements getFuncNameAccess() {
		return (pFuncName != null) ? pFuncName : (pFuncName = new FuncNameElements());
	}
	
	public ParserRule getFuncNameRule() {
		return getFuncNameAccess().getRule();
	}

	//PathClause:
	//	("ALL" | scalar | ID | "." | "$" | "/" | "\\" | "-")+;
	public PathClauseElements getPathClauseAccess() {
		return (pPathClause != null) ? pPathClause : (pPathClause = new PathClauseElements());
	}
	
	public ParserRule getPathClauseRule() {
		return getPathClauseAccess().getRule();
	}

	//AsClause:
	//	"AS" (AliasDef | AliasDefList);
	public AsClauseElements getAsClauseAccess() {
		return (pAsClause != null) ? pAsClause : (pAsClause = new AsClauseElements());
	}
	
	public ParserRule getAsClauseRule() {
		return getAsClauseAccess().getRule();
	}

	//AliasDef:
	//	Alias (":" Type)?;
	public AliasDefElements getAliasDefAccess() {
		return (pAliasDef != null) ? pAliasDef : (pAliasDef = new AliasDefElements());
	}
	
	public ParserRule getAliasDefRule() {
		return getAliasDefAccess().getRule();
	}

	//AliasDefList:
	//	"(" AliasDef ("," AliasDef)* ")";
	public AliasDefListElements getAliasDefListAccess() {
		return (pAliasDefList != null) ? pAliasDefList : (pAliasDefList = new AliasDefListElements());
	}
	
	public ParserRule getAliasDefListRule() {
		return getAliasDefListAccess().getRule();
	}

	//IDENTIFIER: //LETTER ( DIGIT | LETTER | SPECIALCHAR )*
	//	ID;
	public IDENTIFIERElements getIDENTIFIERAccess() {
		return (pIDENTIFIER != null) ? pIDENTIFIER : (pIDENTIFIER = new IDENTIFIERElements());
	}
	
	public ParserRule getIDENTIFIERRule() {
		return getIDENTIFIERAccess().getRule();
	}

	//FieldDef:
	//	IDENTIFIER (":" Type)?;
	public FieldDefElements getFieldDefAccess() {
		return (pFieldDef != null) ? pFieldDef : (pFieldDef = new FieldDefElements());
	}
	
	public ParserRule getFieldDefRule() {
		return getFieldDefAccess().getRule();
	}

	//FieldFefList:
	//	"(" FieldDef ("," FieldDef)* ")";
	public FieldFefListElements getFieldFefListAccess() {
		return (pFieldFefList != null) ? pFieldFefList : (pFieldFefList = new FieldFefListElements());
	}
	
	public ParserRule getFieldFefListRule() {
		return getFieldFefListAccess().getRule();
	}

	//Type:
	//	SimpleType | TupleType | MapType | bag_type;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//SimpleType:
	//	"INT" | "LONG" | "FLOAT" | "DOUBLE" | "CHARARRAY" | "BYTEARRAY";
	public SimpleTypeElements getSimpleTypeAccess() {
		return (pSimpleType != null) ? pSimpleType : (pSimpleType = new SimpleTypeElements());
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//TupleType:
	//	"TUPLE"? AliasDefList;
	public TupleTypeElements getTupleTypeAccess() {
		return (pTupleType != null) ? pTupleType : (pTupleType = new TupleTypeElements());
	}
	
	public ParserRule getTupleTypeRule() {
		return getTupleTypeAccess().getRule();
	}

	//bag_type:
	//	"BAG"? "{" ((IDENTIFIER ":")? TupleType)? "}";
	public Bag_typeElements getBag_typeAccess() {
		return (pBag_type != null) ? pBag_type : (pBag_type = new Bag_typeElements());
	}
	
	public ParserRule getBag_typeRule() {
		return getBag_typeAccess().getRule();
	}

	//MapType:
	//	"MAP[]";
	public MapTypeElements getMapTypeAccess() {
		return (pMapType != null) ? pMapType : (pMapType = new MapTypeElements());
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}

	//Cmd: //( ship_clause | cache_caluse | input_clause | output_clause | error_clause )*
	//	EXECCOMMAND;
	public CmdElements getCmdAccess() {
		return (pCmd != null) ? pCmd : (pCmd = new CmdElements());
	}
	
	public ParserRule getCmdRule() {
		return getCmdAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//STR_OP_EQ:
	//	"EQ";
	public STR_OP_EQElements getSTR_OP_EQAccess() {
		return (pSTR_OP_EQ != null) ? pSTR_OP_EQ : (pSTR_OP_EQ = new STR_OP_EQElements());
	}
	
	public ParserRule getSTR_OP_EQRule() {
		return getSTR_OP_EQAccess().getRule();
	}

	//STR_OP_GT:
	//	"GT";
	public STR_OP_GTElements getSTR_OP_GTAccess() {
		return (pSTR_OP_GT != null) ? pSTR_OP_GT : (pSTR_OP_GT = new STR_OP_GTElements());
	}
	
	public ParserRule getSTR_OP_GTRule() {
		return getSTR_OP_GTAccess().getRule();
	}

	//STR_OP_LT:
	//	"LT";
	public STR_OP_LTElements getSTR_OP_LTAccess() {
		return (pSTR_OP_LT != null) ? pSTR_OP_LT : (pSTR_OP_LT = new STR_OP_LTElements());
	}
	
	public ParserRule getSTR_OP_LTRule() {
		return getSTR_OP_LTAccess().getRule();
	}

	//STR_OP_GTE:
	//	"GTE";
	public STR_OP_GTEElements getSTR_OP_GTEAccess() {
		return (pSTR_OP_GTE != null) ? pSTR_OP_GTE : (pSTR_OP_GTE = new STR_OP_GTEElements());
	}
	
	public ParserRule getSTR_OP_GTERule() {
		return getSTR_OP_GTEAccess().getRule();
	}

	//STR_OP_LTE:
	//	"LTE";
	public STR_OP_LTEElements getSTR_OP_LTEAccess() {
		return (pSTR_OP_LTE != null) ? pSTR_OP_LTE : (pSTR_OP_LTE = new STR_OP_LTEElements());
	}
	
	public ParserRule getSTR_OP_LTERule() {
		return getSTR_OP_LTEAccess().getRule();
	}

	//STR_OP_NE:
	//	"NEQ";
	public STR_OP_NEElements getSTR_OP_NEAccess() {
		return (pSTR_OP_NE != null) ? pSTR_OP_NE : (pSTR_OP_NE = new STR_OP_NEElements());
	}
	
	public ParserRule getSTR_OP_NERule() {
		return getSTR_OP_NEAccess().getRule();
	}

	//STR_OP_MATCHES:
	//	"MATCHES";
	public STR_OP_MATCHESElements getSTR_OP_MATCHESAccess() {
		return (pSTR_OP_MATCHES != null) ? pSTR_OP_MATCHES : (pSTR_OP_MATCHES = new STR_OP_MATCHESElements());
	}
	
	public ParserRule getSTR_OP_MATCHESRule() {
		return getSTR_OP_MATCHESAccess().getRule();
	}

	//NUM_OP_EQ:
	//	"==";
	public NUM_OP_EQElements getNUM_OP_EQAccess() {
		return (pNUM_OP_EQ != null) ? pNUM_OP_EQ : (pNUM_OP_EQ = new NUM_OP_EQElements());
	}
	
	public ParserRule getNUM_OP_EQRule() {
		return getNUM_OP_EQAccess().getRule();
	}

	//NUM_OP_LT:
	//	"<";
	public NUM_OP_LTElements getNUM_OP_LTAccess() {
		return (pNUM_OP_LT != null) ? pNUM_OP_LT : (pNUM_OP_LT = new NUM_OP_LTElements());
	}
	
	public ParserRule getNUM_OP_LTRule() {
		return getNUM_OP_LTAccess().getRule();
	}

	//NUM_OP_LTE:
	//	"<=";
	public NUM_OP_LTEElements getNUM_OP_LTEAccess() {
		return (pNUM_OP_LTE != null) ? pNUM_OP_LTE : (pNUM_OP_LTE = new NUM_OP_LTEElements());
	}
	
	public ParserRule getNUM_OP_LTERule() {
		return getNUM_OP_LTEAccess().getRule();
	}

	//NUM_OP_GT:
	//	">";
	public NUM_OP_GTElements getNUM_OP_GTAccess() {
		return (pNUM_OP_GT != null) ? pNUM_OP_GT : (pNUM_OP_GT = new NUM_OP_GTElements());
	}
	
	public ParserRule getNUM_OP_GTRule() {
		return getNUM_OP_GTAccess().getRule();
	}

	//NUM_OP_GTE:
	//	">=";
	public NUM_OP_GTEElements getNUM_OP_GTEAccess() {
		return (pNUM_OP_GTE != null) ? pNUM_OP_GTE : (pNUM_OP_GTE = new NUM_OP_GTEElements());
	}
	
	public ParserRule getNUM_OP_GTERule() {
		return getNUM_OP_GTEAccess().getRule();
	}

	//NUM_OP_NE:
	//	"!=";
	public NUM_OP_NEElements getNUM_OP_NEAccess() {
		return (pNUM_OP_NE != null) ? pNUM_OP_NE : (pNUM_OP_NE = new NUM_OP_NEElements());
	}
	
	public ParserRule getNUM_OP_NERule() {
		return getNUM_OP_NEAccess().getRule();
	}

	//SEMI_COLON:
	//	";";
	public SEMI_COLONElements getSEMI_COLONAccess() {
		return (pSEMI_COLON != null) ? pSEMI_COLON : (pSEMI_COLON = new SEMI_COLONElements());
	}
	
	public ParserRule getSEMI_COLONRule() {
		return getSEMI_COLONAccess().getRule();
	}

	//LEFT_PAREN:
	//	"(";
	public LEFT_PARENElements getLEFT_PARENAccess() {
		return (pLEFT_PAREN != null) ? pLEFT_PAREN : (pLEFT_PAREN = new LEFT_PARENElements());
	}
	
	public ParserRule getLEFT_PARENRule() {
		return getLEFT_PARENAccess().getRule();
	}

	//RIGHT_PAREN:
	//	")";
	public RIGHT_PARENElements getRIGHT_PARENAccess() {
		return (pRIGHT_PAREN != null) ? pRIGHT_PAREN : (pRIGHT_PAREN = new RIGHT_PARENElements());
	}
	
	public ParserRule getRIGHT_PARENRule() {
		return getRIGHT_PARENAccess().getRule();
	}

	//LEFT_CURLY:
	//	"{";
	public LEFT_CURLYElements getLEFT_CURLYAccess() {
		return (pLEFT_CURLY != null) ? pLEFT_CURLY : (pLEFT_CURLY = new LEFT_CURLYElements());
	}
	
	public ParserRule getLEFT_CURLYRule() {
		return getLEFT_CURLYAccess().getRule();
	}

	//RIGHT_CURLY:
	//	"}";
	public RIGHT_CURLYElements getRIGHT_CURLYAccess() {
		return (pRIGHT_CURLY != null) ? pRIGHT_CURLY : (pRIGHT_CURLY = new RIGHT_CURLYElements());
	}
	
	public ParserRule getRIGHT_CURLYRule() {
		return getRIGHT_CURLYAccess().getRule();
	}

	//LEFT_BRACKET:
	//	"[";
	public LEFT_BRACKETElements getLEFT_BRACKETAccess() {
		return (pLEFT_BRACKET != null) ? pLEFT_BRACKET : (pLEFT_BRACKET = new LEFT_BRACKETElements());
	}
	
	public ParserRule getLEFT_BRACKETRule() {
		return getLEFT_BRACKETAccess().getRule();
	}

	//RIGHT_BRACKET:
	//	"]";
	public RIGHT_BRACKETElements getRIGHT_BRACKETAccess() {
		return (pRIGHT_BRACKET != null) ? pRIGHT_BRACKET : (pRIGHT_BRACKET = new RIGHT_BRACKETElements());
	}
	
	public ParserRule getRIGHT_BRACKETRule() {
		return getRIGHT_BRACKETAccess().getRule();
	}

	//POUND:
	//	"#";
	public POUNDElements getPOUNDAccess() {
		return (pPOUND != null) ? pPOUND : (pPOUND = new POUNDElements());
	}
	
	public ParserRule getPOUNDRule() {
		return getPOUNDAccess().getRule();
	}

	//EQUAL:
	//	"=";
	public EQUALElements getEQUALAccess() {
		return (pEQUAL != null) ? pEQUAL : (pEQUAL = new EQUALElements());
	}
	
	public ParserRule getEQUALRule() {
		return getEQUALAccess().getRule();
	}

	//COMMA:
	//	",";
	public COMMAElements getCOMMAAccess() {
		return (pCOMMA != null) ? pCOMMA : (pCOMMA = new COMMAElements());
	}
	
	public ParserRule getCOMMARule() {
		return getCOMMAAccess().getRule();
	}

	//PERIOD:
	//	".";
	public PERIODElements getPERIODAccess() {
		return (pPERIOD != null) ? pPERIOD : (pPERIOD = new PERIODElements());
	}
	
	public ParserRule getPERIODRule() {
		return getPERIODAccess().getRule();
	}

	//DIV:
	//	"/";
	public DIVElements getDIVAccess() {
		return (pDIV != null) ? pDIV : (pDIV = new DIVElements());
	}
	
	public ParserRule getDIVRule() {
		return getDIVAccess().getRule();
	}

	//PERCENT:
	//	"%";
	public PERCENTElements getPERCENTAccess() {
		return (pPERCENT != null) ? pPERCENT : (pPERCENT = new PERCENTElements());
	}
	
	public ParserRule getPERCENTRule() {
		return getPERCENTAccess().getRule();
	}

	//PLUS:
	//	"+";
	public PLUSElements getPLUSAccess() {
		return (pPLUS != null) ? pPLUS : (pPLUS = new PLUSElements());
	}
	
	public ParserRule getPLUSRule() {
		return getPLUSAccess().getRule();
	}

	//MINUS:
	//	"-";
	public MINUSElements getMINUSAccess() {
		return (pMINUS != null) ? pMINUS : (pMINUS = new MINUSElements());
	}
	
	public ParserRule getMINUSRule() {
		return getMINUSAccess().getRule();
	}

	//terminal DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return (tDIGIT != null) ? tDIGIT : (tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT"));
	} 

	//terminal LETTER:
	//	"A".."Z";
	public TerminalRule getLETTERRule() {
		return (tLETTER != null) ? tLETTER : (tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LETTER"));
	} 

	//terminal SPECIALCHAR:
	//	"_";
	public TerminalRule getSPECIALCHARRule() {
		return (tSPECIALCHAR != null) ? tSPECIALCHAR : (tSPECIALCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SPECIALCHAR"));
	} 

	//terminal FLOATINGPOINT:
	//	DIGIT+ "." DIGIT+;
	public TerminalRule getFLOATINGPOINTRule() {
		return (tFLOATINGPOINT != null) ? tFLOATINGPOINT : (tFLOATINGPOINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOATINGPOINT"));
	} 

	//terminal LONGINTEGER:
	//	INT "L" //? INT with > N digits
	//;
	public TerminalRule getLONGINTEGERRule() {
		return (tLONGINTEGER != null) ? tLONGINTEGER : (tLONGINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LONGINTEGER"));
	} 

	//terminal DOUBLENUMBER:
	//	FLOATINGPOINT ("E" ("-" | "+")? INT)?;
	public TerminalRule getDOUBLENUMBERRule() {
		return (tDOUBLENUMBER != null) ? tDOUBLENUMBER : (tDOUBLENUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLENUMBER"));
	} 

	//terminal EXECCOMMAND:
	//	"`" !"`"* "`";
	public TerminalRule getEXECCOMMANDRule() {
		return (tEXECCOMMAND != null) ? tEXECCOMMAND : (tEXECCOMMAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXECCOMMAND"));
	} 

	//STAR:
	//	"*";
	public STARElements getSTARAccess() {
		return (pSTAR != null) ? pSTAR : (pSTAR = new STARElements());
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	//COLON:
	//	":";
	public COLONElements getCOLONAccess() {
		return (pCOLON != null) ? pCOLON : (pCOLON = new COLONElements());
	}
	
	public ParserRule getCOLONRule() {
		return getCOLONAccess().getRule();
	}

	//DOLLAR:
	//	"$";
	public DOLLARElements getDOLLARAccess() {
		return (pDOLLAR != null) ? pDOLLAR : (pDOLLAR = new DOLLARElements());
	}
	
	public ParserRule getDOLLARRule() {
		return getDOLLARAccess().getRule();
	}

	//group_type:
	//	STRING;
	public Group_typeElements getGroup_typeAccess() {
		return (pGroup_type != null) ? pGroup_type : (pGroup_type = new Group_typeElements());
	}
	
	public ParserRule getGroup_typeRule() {
		return getGroup_typeAccess().getRule();
	}

	//group_item_list:
	//	group_item (COMMA items=group_item)*;
	public Group_item_listElements getGroup_item_listAccess() {
		return (pGroup_item_list != null) ? pGroup_item_list : (pGroup_item_list = new Group_item_listElements());
	}
	
	public ParserRule getGroup_item_listRule() {
		return getGroup_item_listAccess().getRule();
	}

	//order_by_clause:
	//	STAR ("ASC" | "DESC")? | order_col_list;
	public Order_by_clauseElements getOrder_by_clauseAccess() {
		return (pOrder_by_clause != null) ? pOrder_by_clause : (pOrder_by_clause = new Order_by_clauseElements());
	}
	
	public ParserRule getOrder_by_clauseRule() {
		return getOrder_by_clauseAccess().getRule();
	}

	//order_col_list:
	//	order_col ("," order_col)*;
	public Order_col_listElements getOrder_col_listAccess() {
		return (pOrder_col_list != null) ? pOrder_col_list : (pOrder_col_list = new Order_col_listElements());
	}
	
	public ParserRule getOrder_col_listRule() {
		return getOrder_col_listAccess().getRule();
	}

	//order_col:
	//	col_ref ("ASC" | "DESC")? | "(" col_ref ("ASC" | "DESC")? ")";
	public Order_colElements getOrder_colAccess() {
		return (pOrder_col != null) ? pOrder_col : (pOrder_col = new Order_colElements());
	}
	
	public ParserRule getOrder_colRule() {
		return getOrder_colAccess().getRule();
	}

	//partition_clause:
	//	"PARTITION" "BY" FuncName;
	public Partition_clauseElements getPartition_clauseAccess() {
		return (pPartition_clause != null) ? pPartition_clause : (pPartition_clause = new Partition_clauseElements());
	}
	
	public ParserRule getPartition_clauseRule() {
		return getPartition_clauseAccess().getRule();
	}

	//rel_list:
	//	type=AliasType ("," type=AliasType)*;
	public Rel_listElements getRel_listAccess() {
		return (pRel_list != null) ? pRel_list : (pRel_list = new Rel_listElements());
	}
	
	public ParserRule getRel_listRule() {
		return getRel_listAccess().getRule();
	}

	//join_type:
	//	STRING;
	public Join_typeElements getJoin_typeAccess() {
		return (pJoin_type != null) ? pJoin_type : (pJoin_type = new Join_typeElements());
	}
	
	public ParserRule getJoin_typeRule() {
		return getJoin_typeAccess().getRule();
	}

	//join_sub_clause:
	//	join_item ("LEFT" | "RIGHT" | "FULL")? "OUTER"? ("," others=join_item)+;
	public Join_sub_clauseElements getJoin_sub_clauseAccess() {
		return (pJoin_sub_clause != null) ? pJoin_sub_clause : (pJoin_sub_clause = new Join_sub_clauseElements());
	}
	
	public ParserRule getJoin_sub_clauseRule() {
		return getJoin_sub_clauseAccess().getRule();
	}

	//join_item:
	//	type=AliasType expressions=join_group_by_clause;
	public Join_itemElements getJoin_itemAccess() {
		return (pJoin_item != null) ? pJoin_item : (pJoin_item = new Join_itemElements());
	}
	
	public ParserRule getJoin_itemRule() {
		return getJoin_itemAccess().getRule();
	}

	//group_item:
	//	("BY" join_group_by_expr_list | "ALL" | "ANY") ("INNER" | "OUTER")?;
	public Group_itemElements getGroup_itemAccess() {
		return (pGroup_item != null) ? pGroup_item : (pGroup_item = new Group_itemElements());
	}
	
	public ParserRule getGroup_itemRule() {
		return getGroup_itemAccess().getRule();
	}

	//join_group_by_clause:
	//	"BY" join_group_by_expr_list;
	public Join_group_by_clauseElements getJoin_group_by_clauseAccess() {
		return (pJoin_group_by_clause != null) ? pJoin_group_by_clause : (pJoin_group_by_clause = new Join_group_by_clauseElements());
	}
	
	public ParserRule getJoin_group_by_clauseRule() {
		return getJoin_group_by_clauseAccess().getRule();
	}

	//join_group_by_expr_list:
	//	join_group_by_expr | "(" left=join_group_by_expr ("," expressions=join_group_by_expr)* ")";
	public Join_group_by_expr_listElements getJoin_group_by_expr_listAccess() {
		return (pJoin_group_by_expr_list != null) ? pJoin_group_by_expr_list : (pJoin_group_by_expr_list = new Join_group_by_expr_listElements());
	}
	
	public ParserRule getJoin_group_by_expr_listRule() {
		return getJoin_group_by_expr_listAccess().getRule();
	}

	//join_group_by_expr:
	//	Expression | STAR;
	public Join_group_by_exprElements getJoin_group_by_exprAccess() {
		return (pJoin_group_by_expr != null) ? pJoin_group_by_expr : (pJoin_group_by_expr = new Join_group_by_exprElements());
	}
	
	public ParserRule getJoin_group_by_exprRule() {
		return getJoin_group_by_exprAccess().getRule();
	}

	//nested_blk:
	//	"{" nested_command_list clauses=generate_clause ";" "}";
	public Nested_blkElements getNested_blkAccess() {
		return (pNested_blk != null) ? pNested_blk : (pNested_blk = new Nested_blkElements());
	}
	
	public ParserRule getNested_blkRule() {
		return getNested_blkAccess().getRule();
	}

	//generate_clause:
	//	"GENERATE" items+=FlattenGeneratedItem ("," items+=FlattenGeneratedItem)*;
	public Generate_clauseElements getGenerate_clauseAccess() {
		return (pGenerate_clause != null) ? pGenerate_clause : (pGenerate_clause = new Generate_clauseElements());
	}
	
	public ParserRule getGenerate_clauseRule() {
		return getGenerate_clauseAccess().getRule();
	}

	//nested_command_list:
	//	{nested_command_list} (cmds+=nested_command SEMI_COLON)*;
	public Nested_command_listElements getNested_command_listAccess() {
		return (pNested_command_list != null) ? pNested_command_list : (pNested_command_list = new Nested_command_listElements());
	}
	
	public ParserRule getNested_command_listRule() {
		return getNested_command_listAccess().getRule();
	}

	//nested_command:
	//	Alias "=" nested_op;
	public Nested_commandElements getNested_commandAccess() {
		return (pNested_command != null) ? pNested_command : (pNested_command = new Nested_commandElements());
	}
	
	public ParserRule getNested_commandRule() {
		return getNested_commandAccess().getRule();
	}

	//// TODO some warning comes from here          
	//nested_op:
	//	NestedFilter | nested_sort | nested_distinct | nested_limit | ("(" Type ")")? AddExpression;
	public Nested_opElements getNested_opAccess() {
		return (pNested_op != null) ? pNested_op : (pNested_op = new Nested_opElements());
	}
	
	public ParserRule getNested_opRule() {
		return getNested_opAccess().getRule();
	}

	//NestedFilter:
	//	"FILTER" exp=var_expr "BY" cond=Condition;
	public NestedFilterElements getNestedFilterAccess() {
		return (pNestedFilter != null) ? pNestedFilter : (pNestedFilter = new NestedFilterElements());
	}
	
	public ParserRule getNestedFilterRule() {
		return getNestedFilterAccess().getRule();
	}

	//nested_sort:
	//	"ORDER" var_expr "BY" order_by_clause ("USING" FuncClause)?;
	public Nested_sortElements getNested_sortAccess() {
		return (pNested_sort != null) ? pNested_sort : (pNested_sort = new Nested_sortElements());
	}
	
	public ParserRule getNested_sortRule() {
		return getNested_sortAccess().getRule();
	}

	//nested_distinct:
	//	"DISTINCT" var_expr;
	public Nested_distinctElements getNested_distinctAccess() {
		return (pNested_distinct != null) ? pNested_distinct : (pNested_distinct = new Nested_distinctElements());
	}
	
	public ParserRule getNested_distinctRule() {
		return getNested_distinctAccess().getRule();
	}

	//nested_limit:
	//	"LIMIT" var_expr (INT | LONGINTEGER);
	public Nested_limitElements getNested_limitAccess() {
		return (pNested_limit != null) ? pNested_limit : (pNested_limit = new Nested_limitElements());
	}
	
	public ParserRule getNested_limitRule() {
		return getNested_limitAccess().getRule();
	}

	//split_branch:
	//	IDENTIFIER "IF" Condition;
	public Split_branchElements getSplit_branchAccess() {
		return (pSplit_branch != null) ? pSplit_branch : (pSplit_branch = new Split_branchElements());
	}
	
	public ParserRule getSplit_branchRule() {
		return getSplit_branchAccess().getRule();
	}

	//col_ref:
	//	alias_col_ref | dollar_col_ref;
	public Col_refElements getCol_refAccess() {
		return (pCol_ref != null) ? pCol_ref : (pCol_ref = new Col_refElements());
	}
	
	public ParserRule getCol_refRule() {
		return getCol_refAccess().getRule();
	}

	//alias_col_ref:
	//	"GROUP" | IDENTIFIER;
	public Alias_col_refElements getAlias_col_refAccess() {
		return (pAlias_col_ref != null) ? pAlias_col_ref : (pAlias_col_ref = new Alias_col_refElements());
	}
	
	public ParserRule getAlias_col_refRule() {
		return getAlias_col_refAccess().getRule();
	}

	//dollar_col_ref:
	//	DOLLAR INT;
	public Dollar_col_refElements getDollar_col_refAccess() {
		return (pDollar_col_ref != null) ? pDollar_col_ref : (pDollar_col_ref = new Dollar_col_refElements());
	}
	
	public ParserRule getDollar_col_refRule() {
		return getDollar_col_refAccess().getRule();
	}

	//const_expr:
	//	literal;
	public Const_exprElements getConst_exprAccess() {
		return (pConst_expr != null) ? pConst_expr : (pConst_expr = new Const_exprElements());
	}
	
	public ParserRule getConst_exprRule() {
		return getConst_exprAccess().getRule();
	}

	//literal:
	//	scalar | STRING | "\\u" | //| map | bag | tuple // const type?
	//	"NULL";
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//scalar:
	//	FLOATINGPOINT | //INTEGER | LONGINTEGER | FLOATNUMBER | DOUBLENUMBER | MYQUOTEDSTRING | NULL
	//	scalarInt;
	public ScalarElements getScalarAccess() {
		return (pScalar != null) ? pScalar : (pScalar = new ScalarElements());
	}
	
	public ParserRule getScalarRule() {
		return getScalarAccess().getRule();
	}

	//scalarInt:
	//	DIGIT // TODO warning
	//	| INT | LONGINTEGER | "$" ID;
	public ScalarIntElements getScalarIntAccess() {
		return (pScalarInt != null) ? pScalarInt : (pScalarInt = new ScalarIntElements());
	}
	
	public ParserRule getScalarIntRule() {
		return getScalarIntAccess().getRule();
	}

	//terminal BACKQUOTE_STRING:
	//	"`" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "`" | "`" | "\\") | !("\\" | "`"))* "`";
	public TerminalRule getBACKQUOTE_STRINGRule() {
		return (tBACKQUOTE_STRING != null) ? tBACKQUOTE_STRING : (tBACKQUOTE_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BACKQUOTE_STRING"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
